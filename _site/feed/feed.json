{
  "version": "https://jsonfeed.org/version/1",
  "title": "Apprentice Log",
  "home_page_url": "https://lavi-blog.vercel.app",
  "feed_url": "https://lavi-blog.vercel.app/feed/feed.json",
  "description": "工程師學徒的一點記錄",
  "author": {
    "name": "Lavi",
    "url": ""
  },
  "items": [{
      "id": "https://lavi-blog.vercel.app/posts/blog-log/",
      "url": "https://lavi-blog.vercel.app/posts/blog-log/",
      "title": "用 11ty 寫部落格的心得",
      "content_html": "<h2 id=\"td%3Blr\"><a class=\"direct-link\" href=\"#td%3Blr\">#</a> TD;LR</h2>\n<!-- summary -->\n<p>從規劃、設計、開發到部署，簡單談談用 eleventy 架設部落的心得。</p>\n<!-- summary -->\n<hr>\n<p>最近一個月左右的時間都在架設部落格，利用這篇回顧一下過程，也記錄一下心得。</p>\n<p>在正式開始前先提一下為什麼決定自己架部落格好了。</p>\n<p>自己過去有在 Medium 還有 CoderBridge 放一些內容，在 Medium 平台上寫技術文章的問題，在網路上有已經有非常多的討論，可以左轉 Huli 的<a href=\"https://hulitw.medium.com/do-you-really-want-to-write-tech-blog-on-medium-3dd25640f26c\">在 Medium 上寫技術文章，你確定嗎？</a>或其他文章。</p>\n<p>不過對於自己而言問題 Medium 主要體現在兩個部分：寫文章體驗、沒有文章列表和分類。</p>\n<p>寫文章體驗部分，如果單純分享純文字內容可能沒有那麼不便，但對於工程師而言想要寫技術文章內容很難避開程式碼，在  Medium 上面放程式碼絕對是體驗很糟的選擇，還有自己習慣使使用 Markdown 來寫文章然後再上傳 Medium，即使有了轉換器也還是很麻煩。</p>\n<p>此外可能出於商業考量， Medium 的文章列表非常難用，整體並沒有一個能夠一目了然看到自己 PO 了多少篇文章的功能，還有如果不是 Publication 的話，目前似乎還沒有分類的功能。</p>\n<p>Medium 這個平台的推力對於自己主要就是這兩項，其他比較常提到的 SEO、搬家麻煩等等的問題其實對我而言也沒有那麼嚴重。自己本來文章就不多，搬家的過程其實並沒有想像中的那麼困難（後面會提到如何搬家），SEO 部分沒什麼流量所以還不需要擔心。</p>\n<p>再來是 CoderBridge ，CoderBridge 的確是蠻方便的平台，功能上也很完整，沒甚麼好挑剔的，蠻推薦初期想要寫自己的技術文章但是還沒有能力或懶得建立自己部落格的人，自己大多的技術文章也都放在上面。</p>\n<p>不過做為工程師到了一個程度之後就會開始想要架設自己的部落格，一方面可以累積一些內容，還有之前在面試的時候就有被問到為什麼沒有自己架設，這樣的問題不管怎麼回答都是滿滿的尷尬。</p>\n<p>另外一點是，總覺得自己的部落格算是一個工程師技術能力上的證明，在處理部落格的過程中，從前端、<s>後端</s>（不，根本沒有）、部署都能夠接觸到，也能夠踩到一些坑還有處理問題，也算是不錯的經歷。也有個平台可以累積內容。</p>\n<p>好了，建立部落格的原因大概講到這裡，正文開始。</p>\n<h2 id=\"%E5%B7%A5%E5%85%B7%E6%A3%A7\"><a class=\"direct-link\" href=\"#%E5%B7%A5%E5%85%B7%E6%A3%A7\">#</a> 工具棧</h2>\n<p>整個部落格大概有五個步驟：規劃、設計、開發、搬家、部署，這篇文章也大概會依照這樣的脈絡下去敘述。</p>\n<p>規劃部分，一開始初步思考一下部落格的定位，可以找找常看的部落格，參考有哪些頁面和功能是想要放進部落格的。思考完定位後，最重要的是列出資訊架構，包含說每個頁面中需要放入哪些內容，需要哪些功能。</p>\n<p>這裡簡單列出一些自己列出的項目：</p>\n<ul>\n<li>主頁：文章列表，列表項目需要\n<ul>\n<li>標題</li>\n<li>概要</li>\n<li>發文時間</li>\n<li>閱讀時長</li>\n<li>標籤</li>\n</ul>\n</li>\n<li>archive 文章列表</li>\n<li>post 文章頁面</li>\n</ul>\n<p>另外，除了頁面之後，也需要列出每一頁共同區塊。像是最基本的 Footer 和 Header 的資訊架構。列出資訊架構後，在後面的設計與開發，會依照這些頁面和區塊作為基本單位去執行。</p>\n<h2 id=\"%E8%A8%AD%E8%A8%88\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E8%A8%88\">#</a> 設計</h2>\n<p>在軟體上是用 Figma。至於設計的流程部分，自己不是什麼正統的設計師，並沒有非常嚴謹清楚的方法論，只是分享下個人經驗。</p>\n<p>自己在設計上的順序是這樣：</p>\n<ol>\n<li>顏色和字體：自己認為會決定整個網頁的調性</li>\n<li>文章中的出現的元素</li>\n<li>將元素微調，組合成各個頁面需要的功能</li>\n</ol>\n<h3 id=\"%E8%89%B2%E5%BD%A9%E5%92%8C%E5%AD%97%E9%AB%94\"><a class=\"direct-link\" href=\"#%E8%89%B2%E5%BD%A9%E5%92%8C%E5%AD%97%E9%AB%94\">#</a> 色彩和字體</h3>\n<p>起初是希望走比較乾淨的風格，但又不要太嚴肅（希望有做到）。所以在字體上就先決定用無襯線體作為主要的文字，在比較細節的部分則用襯線體做為點綴。</p>\n<p>色彩部分，定義了這些顏色：</p>\n<ul>\n<li>Primary：主色</li>\n<li>Secondary：輔色</li>\n<li>Text：主要字體顏色</li>\n<li>Text-secondary：輔助字體顏色</li>\n<li>Text-highlight：強調字體顏色</li>\n<li>background：背景色</li>\n<li>background-secondary：次背景色</li>\n</ul>\n<p>因為還有 Dark-mode，所以需要兩套配色。當然，每一個部落格設計都不同，很有可能在顏色上有增減，但基本一定需要定義的是字體和背景色（不然要怎麼看內容...），下面是自己這個階段定義出來的色盤：</p>\n<figure tabindex=\"1\"><img src=\"/img/post/blog-log/Pasted%20image%2020211026222438.png\" alt=\"\"></figure>\n<p>在這個階段會先做一個非非常簡單的文章 Mockup，能夠比較好想像顏色組合的結果，也可以先在這個階段初步的避免掉易讀性的問題。</p>\n<figure tabindex=\"2\"><img src=\"/img/post/blog-log/Pasted%20image%2020211026222708.png\" alt=\"\"></figure>\n<p>在這個階段只是抓一個方向，在最後開發的時候還會在明度、彩度上根據易讀性作更細節的調整。</p>\n<h3 id=\"%E5%85%83%E7%B4%A0\"><a class=\"direct-link\" href=\"#%E5%85%83%E7%B4%A0\">#</a> 元素</h3>\n<p>設計過程比較特別部分在於，自己是先從文章內容中的元素開始設計，文章中有哪些元素呢？這並不是太難的問題，基本上 Markdown 裡面有哪些元素，文章中就有哪些，可以找一些 markdown-demo 來確定有哪些元素。這邊簡單列舉：</p>\n<p>行內元素樣式：<strong>粗體</strong>、<em>斜體</em>、<s>橫線</s>、<a href=\"\">連結</a>、<code>code</code>等</p>\n<p>區塊元素樣式：</p>\n<ul>\n<li>內文段落 paragraph</li>\n<li>標題：h1~h6</li>\n<li>order list, unordered list</li>\n<li>引用區塊 quoteblock</li>\n<li>codeblock</li>\n<li>分隔線</li>\n<li>Table</li>\n</ul>\n<p>在設計區塊樣式時，除了要滿足單一元素的使用情境，而凸顯元素使用情境的方式在於和其他元素之間做出區別。</p>\n<p>在設計的時候可以先把最簡單的內文段落（paragraph）樣式設定出來（包含字距、行距等），然後把內文作為最基礎的樣式來做變化。</p>\n<p>像是清單（order list/ unordered list） 主要的目的是要能夠清楚的列出項目，那在行距上就需要再大一點，來和內文做出區別。</p>\n<p>還有像引用區塊的文字，本身視覺上是不是真的帶來「引用」的感覺（通常的設計在左邊會有直線，或者是放在方框裡面），並和普通的段落有所區別。</p>\n<p>除了個別的樣式外，在區塊會有兩不同類型的互動，一種是相鄰，另一種是嵌套。</p>\n<p>在兩相鄰區塊的設計上，就必須要注意區塊間距的拿捏，需要在比行距還要大、但又不能過大導致太分離難以閱讀。而在嵌套上，像是 list 和 quoteblock 能夠再包住其他區塊像是其他 list，這時如何同時內外兩層元素樣式的融合是需要思考的部分。</p>\n<p>在使用 Figma 設計時有一個訣竅，可以上述每個元素都做成 Figma 的 Component，並在旁邊直接互相組合排列，模擬真實的文章，來檢視自己的設計。</p>\n<figure tabindex=\"3\"><img src=\"/img/post/blog-log/Pasted%20image%2020211026231304.png\" alt=\"\"></figure>\n<h3 id=\"%E9%A0%81%E9%9D%A2%E5%92%8C%E5%8D%80%E5%A1%8A\"><a class=\"direct-link\" href=\"#%E9%A0%81%E9%9D%A2%E5%92%8C%E5%8D%80%E5%A1%8A\">#</a> 頁面和區塊</h3>\n<p>當個別元素完成後，就能夠以頁面為單位來進行設計了。在設計每個頁面時，會以先前的元素作為基礎，進行調整及組合後，來構成頁面上面的元件。舉例來說，這是主頁面的文章列表，基本上就是由多個文章項目排列而成</p>\n<figure tabindex=\"4\"><img src=\"/img/post/blog-log/Pasted%20image%2020211027220350.png\" alt=\"\"></figure>\n<p>而在每個文章項目都是由原本文章中的元素（標題、內文段落等等）做樣式上的調整後再進行組合。</p>\n<ul>\n<li>在文章標題上，就直接採用 h1 標題的樣式</li>\n<li>標籤則是連結的樣式，所以帶有 <code>hever:underline</code> 的效果</li>\n<li>時間上，基本上是內文段落的樣式（顏色、字距）但使用襯線體的字型做出區別</li>\n<li>概要也是內文段落的樣式，但運用顏色做出區別</li>\n<li>分隔線就直接採用文章的分隔線</li>\n</ul>\n<p>除此之外不同頁面之間的元件，如果資訊架構上相似的話，也是可以共用的。像主頁文章列表和標籤文章列表的樣式基本上就沒有太大差異，只是缺少了上方的 tag 而已。</p>\n<figure tabindex=\"5\"><img src=\"/img/post/blog-log/Pasted%20image%2020211027232241.png\" alt=\"\"><figcaption>標籤頁文章列表</figcaption></figure>\n<p>將元素重組的好處一來是省時間，二來是整體的樣式會比較一致，當然缺點就是看起來會比較呆板無變化。相信好的設計還是能夠在樣式和一致性上取得平衡，但自己能力有限，也希望讀者把注意放在文章上，樣式的變化就比較次之。</p>\n<h2 id=\"%E9%96%8B%E7%99%BC\"><a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BC\">#</a> 開發</h2>\n<p>再來是開發，這裡先提一下使用到的開發上使用的工具。自己在開發上是用 eleventy 這個 static site generator（後面簡稱 11ty）。一開始其實沒想過這個選擇，身為 React 仔，一開始的方案其實是朝 Gatsby 或者是 Next，覺得還可以順便寫熟悉的 React 根本是一舉兩得，不過拖延症卻讓自己遲遲還沒開始動工。</p>\n<p>後來因為在 <a href=\"https://blog.errorbaker.tw/\">Errorbaker</a> 上參與共筆部落格，而部落格本身也是用 11ty 寫的。了解後發現是個輕量的選擇，想想與其要花時間在學習新的框架，那不如就先採用個簡單的方案，看看能不能在短時間內就把部落格架起來（寫完之後，自己的答案是不太行🥲）。</p>\n<p>那在這部分也會提一下自己使用 11ty 和 <a href=\"https://github.com/google/eleventy-high-performance-blog\"><br>\neleventy-high-performance-blog</a> 這個 template 的心得，以及自己額外做的處理。</p>\n<h3 id=\"eleventy\"><a class=\"direct-link\" href=\"#eleventy\">#</a> Eleventy</h3>\n<p>消毒一下，這裡是非常個人的心得，好不好用本身和每個人的道行很有關係。</p>\n<p>如果想要多了解 11ty 可以先參考前輩的這兩篇</p>\n<ul>\n<li><a href=\"https://blog.huli.tw/2021/08/22/eleventy-over-hexo/\">除了 hexo，也可以考慮用 eleventy 來寫技術部落格</a></li>\n<li><a href=\"https://jason-memo.dev/posts/why-i-leave-medium-and-build-blog-with-eleventy/\">為什麼我離開 Medium 用 eleventy 做一個 blog</a></li>\n</ul>\n<p>11ty 基本的用法需要搭配 template language 來 compile 出 html，標配是 nunjucks，不過也可以用自己喜歡的 template language 像是 Pug, ejs, Mustache 等等，或者官方也有提到可以直接使用 JS 來 compile。</p>\n<p>那除了利用 template language 外，寫文章的部分</p>\n<p>在 build 的過程中，11ty 可以自由選要用什麼樣的 parser 來解析語法，在<a href=\"https://github.com/11ty/eleventy-base-blog/blob/master/.eleventy.js#L68\">官方的 base-blog 中</a>使用 <a href=\"https://github.com/markdown-it/markdown-it\">markdown-it</a> 做為 markdown parser（hight-preformance 也是），所以如果想要調整 markdown 解析出來的 html 或者新增功能，就只需要更改 config 或者新增 plugin 上去即可。</p>\n<h3 id=\"nunjucks\"><a class=\"direct-link\" href=\"#nunjucks\">#</a> Nunjucks</h3>\n<p>Nunjucks 本身語法不算複雜，如果有接觸過模板語言或者只是作一些內容的調整非常容易。但畢竟還是有學習曲線，再一些複雜的調整還是需要更深入的理解語法，而且語法本身寫起來稍微比較像早期的 PHP，比起平常常接觸的 JSX 起來並沒有那麼自然。但這可能不是好的比較，也才寫過幾天的 PHP。</p>\n<p>Nunjucks 本身也有提供一些非常基本的操作，用這些操作來組合成需要的頁面功能如果比較複雜的話自己覺得頗有難度。在 11ty 中如果要操作模板引擎很方便，有提供 API 來統一操作。這樣一來就能夠在 <code>eleventy.js</code> 這個檔案中使用 JS 寫出需要的 filter ，再拿到 Nunjucks 裡面做使用。</p>\n<p>這樣一來比起單純使用 11ty 和 Nunjucks 的語法組合功能會方便非常多。像是利用正則就可以做到像是下方的 summary （參考自 <a href=\"https://github.com/Lidemy/error-baker-blog/blob/main/_11ty/summary.js\">Errorbaker source code</a> ）</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;!-- summary --&gt;<br>這邊是摘要 <br>&lt;!-- summary --&gt;<br><br>這邊開始才是本文</code></pre>\n<p>在撰寫 Nunjucks 就能時使用下面的 custom filter 來做到渲染 tag 內部的內容：</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;&#123;&#123;post | summary &#125;&#125;&lt;/p&gt;</code></pre>\n<p>產生出的 HTML：</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;p>這邊是摘要&lt;/p&gt;</code></pre>\n<p>不過在寫 custom filter 的時候需要知道 11ty 本身給的資料結構，自己在文件裡面一直找不到一份齊全的資料，只能在 custom filter 內部 print 出來後輸出到 log 裡面看，導致花了蠻多的時間的。</p>\n<p>此外 Nunjucks 可能太少使用者，有一點蠻影響開發體驗的是 VScode 似乎沒有對應的 Formatter（有 extension 但無法使用），這個時代還要要手動 Prettier 真的非常之惱人，還有 syntax highlight 常常也有問題。</p>\n<h3 id=\"eleventy-high-performance-blog\"><a class=\"direct-link\" href=\"#eleventy-high-performance-blog\">#</a> eleventy-high-performance-blog</h3>\n<p>自己是基於 <a href=\"https://github.com/google/eleventy-high-performance-blog\">eleventy-high-performance-blog</a> 這個 template 來改造搭建的。既然都叫 high-performance 了，那當然做好做滿的就是性能優化，先附上 lighthouse。</p>\n<p><img src=\"/img/post/blog-log/Pasted%20image%2020211028230922.png\" alt=\"圖片來源：https://github.com/google/eleventy-high-performance-blog\">\n<img src=\"/img/post/blog-log/Pasted%20image%2020211028230907.png\" alt=\"自己部落格的 lighthouse 評分\"></p>\n<p>可以看到滿滿的綠燈，就算自己改過不少內容，Performance 還是達到 99 分。可以看到 github 上面的介紹：</p>\n<blockquote>\n<ul>\n<li>Perfect score in applicable lighthouse audits (including accessibility).</li>\n<li>Single HTTP request to <a href=\"https://web.dev/first-contentful-paint/\">First Contentful Paint</a>.</li>\n<li>Very optimized <a href=\"https://web.dev/lcp/\">Largest Contentful Paint</a> (score depends on image usage, but images are optimized).</li>\n<li>0 <a href=\"https://web.dev/cls/\">Cumulative Layout Shift</a>.</li>\n<li>~0 <a href=\"https://web.dev/fid/\">First Input Delay</a>.</li>\n</ul>\n</blockquote>\n<p>果然是 Google 內部開發的 template，優化真的是完全做好做滿。在這個 template 覺得最大的優點在圖片方面處理的非常之好，對於 Blog 這種本身沒有 SPA 也不用另外 fetch 資料的網站來說，處理好圖片幾乎就解決效能上 90% 的問題了。這邊簡單提一下自己使用這個 template 的心得。</p>\n<h4 id=\"%E5%9C%96%E7%89%87%E5%84%AA%E5%8C%96\"><a class=\"direct-link\" href=\"#%E5%9C%96%E7%89%87%E5%84%AA%E5%8C%96\">#</a> 圖片優化</h4>\n<p>會把 markdown 中以網址插入的圖片 fetch 下來 local，還會做響應式圖片，以及載入的優化，像是：</p>\n<ol>\n<li>多寬度圖片大小</li>\n<li>優化</li>\n<li>async decode, lazy loading 以及 <code>content-visibility: auto</code></li>\n<li>轉檔（webp, avif）</li>\n<li>loading 時的 blurred placeholder</li>\n</ol>\n<p>尤其是第四點自己還是第一次看到把 jpg 檔案再轉換成模糊的 svg 的做法，做出來的 placeholder 一來體積小，還可以利用 baseUrl 直接放進 HTML，二來又能增進 Web vital 的 <a href=\"https://support.google.com/webmasters/answer/9205520?hl=en#cls_description\"><strong>CLS</strong></a> 分數，而且因為是模糊的圖片，體驗上會比單純的 image placeholder 優雅許多。</p>\n<p>但也是有對應的 tradeoff 就是，這個 template 最大的問題就是在 server 上 building 時，可能因為規格較弱，所以常常在轉換圖片卡住導致 building error，對應的處理會在後面部署的部分提到。</p>\n<h4 id=\"csp\"><a class=\"direct-link\" href=\"#csp\">#</a> CSP</h4>\n<p>template 本身有透過 <code>&lt;meta&gt;</code> 來做 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\">CSP</a>，可以限制網頁上各種資源的來源，來避免 XSS 等攻擊。</p>\n<p>如果要引用外部資源，像透過 uri 來存取像是 CSS, script 或者是字型時，在 CSP 就要另外做設定。行內 inline script 也要記得加上指定的 attribute 來建立 hash。</p>\n<h4 id=\"css\"><a class=\"direct-link\" href=\"#css\">#</a> CSS</h4>\n<p>在 CSS 部份的優化方式上，是使用 <a href=\"https://kimeiga.github.io/bahunya/\">Bahunya CSS</a>. 這個  classless framework，Bahunya CSS 本身沒有用到 class，只使用 element selector 來減少 CSSOM 解析負擔。</p>\n<p>除此之外 CSS 你可以看到 template 裡面並沒有用 link 來載入 url 檔案。所有的 style 會先經過 purge CSS 來做 tree shake，去掉頁面不需要的 css 之後，再利用 style 插入到 <code>&lt;head&gt;</code> 裡面來減少 request 的次數。</p>\n<p>不過這樣也造成一點問題就是，一個問題是基於 Bahunya CSS 上再做 customize 不太方便，最後幾乎原本的 CSS 都刪光光了...，還有預設的 purge CSS 會清除掉冗餘的 css variable 還有 font-face，不過自己在使用時有點問題，如果是多層 reference 的 variable 使用似乎就不會被解析而被刪掉。</p>\n<p>另外這個時代還要寫純 CSS 真的 非 常 痛 苦，後來加入了 postcss 使用 import 還有 nesting 的功能。個人看法在 CSS 上只要有這兩樣功能在開發體驗上就會好非常非常多，沒有必要一定得用 Scss。</p>\n<hr>\n<p>關於這個 template 不知不覺提了很多，自己也還沒有研究的非常完全，像 SEO 的部分自己還是不太熟悉。如果你是剛好再用 11ty，還是很推薦說可以看看這個 template 做了哪些事情，用了那些套件去做到的。</p>\n<h2 id=\"%E6%90%AC%E5%AE%B6\"><a class=\"direct-link\" href=\"#%E6%90%AC%E5%AE%B6\">#</a> 搬家</h2>\n<p>開發完之後就可以搬家囉</p>\n<p>我的原本的發佈平台主要有兩個： CoderBridge 以及 Medium。Coderbridge 本身有提供輸出 markdown 的功能，非常的方便，但是 Medium 竟然只能下載整包的 HTML 😕。</p>\n<p>自己使用 <a href=\"https://www.npmjs.com/package/medium-to-markdown\">Medium to markdown</a> 這個小工具來做轉換，先到 Medium 上面把自己的備份下載下來，然後再轉換就可以。但轉換後的 Markdown 也依然要做整理，沒辦法做到無腦轉換。幸好自己的文章內容不算多，比起常常在 PO 文的作者整理起來還不算太複雜。</p>\n<h2 id=\"%E9%83%A8%E7%BD%B2\"><a class=\"direct-link\" href=\"#%E9%83%A8%E7%BD%B2\">#</a> 部署</h2>\n<p>最後是部署，自己是參考<a href=\"https://jason-memo.dev/posts/why-i-leave-medium-and-build-blog-with-eleventy/\">文中</a> 的方式，利用 <a href=\"https://vercel.com/dashboard\">vercel</a> 來做部署。</p>\n<p>第一次使用 vercel 的體驗蠻好的，介面很清楚使用起來也蠻簡單。但是就像前面提到的，在圖片轉換部分一直 build失敗，後來的做法是直接把整個網頁 build 出來並加入 git，而且並不使用內建的 11ty setting，而是當作 static site 來部署。</p>\n<figure tabindex=\"6\"><img src=\"/img/post/blog-log/Pasted%20image%2020211031021955.png\" alt=\"\"></figure>\n<p>這樣一來就暫時避免掉 build 的問題，雖然解法似乎不是很優雅就是了。</p>\n<h2 id=\"%E6%9C%AA%E4%BE%86\"><a class=\"direct-link\" href=\"#%E6%9C%AA%E4%BE%86\">#</a> 未來</h2>\n<p>在完成這個部落格的時其實算是抱著完成 MVP 的心態去做的，這邊列下自己在這次的部落格中沒有做到，或者是未來可能希望再重新的部分：</p>\n<ul>\n<li>CSS 原本想用 tailwind 來處理，</li>\n<li>SEO 部分，目前還不太了解怎麼實作</li>\n<li>這次 Logo 模仿<s>抄襲</s> vercel 暫時先弄個三角形，之後有想法再補上</li>\n<li>認真做個 og image</li>\n</ul>\n<p>除此之外也還有一些樣式上的 bug 要處理就是。不過總算是有一個自己的平台可以開始累積內容 🙂。</p>\n<p>Big guy is john，感謝大家的觀看。</p>\n",
      "date_published": "2021-10-31T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/deploy-on-aws/",
      "url": "https://lavi-blog.vercel.app/posts/deploy-on-aws/",
      "title": "在 AWS 上面部署 LEMP server, PHPmyadmin, FTP",
      "content_html": "<p>LEMP 在這邊是指下面幾種技術的簡稱：</p>\n<ul>\n<li>Linux</li>\n<li>Nginx</li>\n<li>MySQL</li>\n<li>PHP</li>\n</ul>\n<p>我們會利用這些技術在 AWS 來做一個 web server，並把我們的資料部署到 server 上。我們可以先大概看一下我們做了哪些事情：</p>\n<ul>\n<li>設定 AWS，其中包含\n<ul>\n<li>建立一個 ubuntu 的 instance</li>\n<li>設定 security group</li>\n</ul>\n</li>\n<li>nignx 比較快比較潮的 web server\n<ul>\n<li>安裝 PHP 的 CGI</li>\n<li>https</li>\n</ul>\n</li>\n<li>mySQL 資料庫\n<ul>\n<li>設定可以使用其他程式遠端連線</li>\n<li>建立一個帳戶，而且那帳戶只能存取他自己的 Database</li>\n</ul>\n</li>\n<li>myphpadmin 方便線上操作資料庫，弄起來還是很方便的\n<ul>\n<li>從瀏覽器登入 myPHPadmin 需要另外設定帳號密碼</li>\n</ul>\n</li>\n<li>FTP server 用來上傳檔案\n<ul>\n<li>建立帳號</li>\n<li>讓該帳號只能上傳東西到特定的資料夾裡面</li>\n</ul>\n</li>\n</ul>\n<p>這篇會站在巨人們的肩膀上，把蒐集到的資料做個統整，在最後會附上資料的連結。如果覺得我講的很模糊可以直接去看原文，後來覺得這篇文章的定位比較像是導讀的感覺，而且打到後面越來越x懶... 其實好像看參考的原文就好了（？）。</p>\n<h2 id=\"aws\"><a class=\"direct-link\" href=\"#aws\">#</a> AWS</h2>\n<p>AWS 是啥，Amazon Web Services 可以說是一個統稱，泛指 Amazon 旗下的網路服務，但是範圍非常之廣泛，包含很多不同種類的 VPS, Domain name 等等。可以讓你完全用他們的服務來組成一個完整且能附載高流量的 server。</p>\n<p>這次要用的是 EC2 (Elastic Compute Cloud)，本質上他就是一個 VPS ，但優勢是可以自由地控制 VPS 的大小，即使建立之後要改配備的設定（核心數、RAM、硬碟大小）都沒問題，所以才會這麼夯。</p>\n<h3 id=\"%E5%BB%BA%E7%AB%8B-ec2-instance\"><a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B-ec2-instance\">#</a> 建立 EC2 instance</h3>\n<ol>\n<li>要先辦 AWS 的帳號，然後選擇 EC2，這個就不帶了。</li>\n<li>到 instance 的視窗，然後點選 Launch instance</li>\n</ol>\n<p>AWS 稱每個 VPS 叫做 instance 。另外，建立 instace 要透過所謂的 AMI（Amazon Machine Image），來安裝 OS 還有一些設定，簡單說就像一個模板，所以等你很強你也可以做自己的模板，但現在先不要。</p>\n<p>可以先點 Filter Tier only，就可以看到免費的 template</p>\n<p>上面還可以選國家，聽說可以選近一點的連線比較快，自己沒有實驗過。\n在這邊自己是選 <code>Ubuntu Server 18.04 LTS (HVM), SSD Volume Type</code></p>\n<p>選 Ubuntu 是因為感覺比較熟悉，版本選舊而不選 20 的是覺得說資源可能比較多，然後後面那個  SSD Volume Type 的意思沒有很了解，不過看 <a href=\"https://aws.amazon.com/tw/about-aws/whats-new/2014/06/16/introducing-the-amazon-ebs-general-purpose-ssd-volume-type/#:~:text=Introducing%20the%20Amazon%20EBS%20General%20Purpose%20(SSD)%20volume%20type,-Posted%20On%3A%20Jun&amp;text=Backed%20by%20Solid%2DState%20Drives,baseline%20of%203%20IOPS%2FGB.\">docs</a> 應該是指說 vps 會使用 SSD，讀寫會比較快？但是疑惑的點是會從安裝 os 這邊來選嗎？所以自己也沒有很清楚。大家可以自己看狀況，其實進去之後 OS 操作應該是大同小異。記得選免費的就好</p>\n<ol start=\"3\">\n<li>選規格</li>\n</ol>\n<p>其實我們也只能選免費的。這裡的規格大致上是指說我們會分到幾顆 CPU、記憶體的容量等等。有點像在選電腦的感覺。</p>\n<p>除此之外有一些細部規格，不過看不太懂而且用免費的也不用想太多，這邊就先 next。</p>\n<ol start=\"4\">\n<li>Security Group</li>\n</ol>\n<p>這個但是事後也可以再設定，之後會再提到。</p>\n<p>弄完之後會讓你看一下大概的規格，OK 就可以 launch instance （啟動你的 server）了</p>\n<ol start=\"5\">\n<li>設定 private key</li>\n</ol>\n<p>因為跟 AWS 連線是使用 SSL 連線，需要 public key 跟 private key，所以他會問你說要建立新的 key，還是用之前設定好的。因為從來沒用過，所以當然是選擇 new key，就照上面的要求打上名子然後 download 下來放到你的<s>寶貝袋</s>資料夾裡面，之後 SSH 連線都會用到。</p>\n<p>到這裡就成功了</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A-security-group\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A-security-group\">#</a> 設定 security group</h3>\n<p>security group （後面簡稱SG） 可以設定允許透過哪些 port 可以傳入資料（稱作 inbound），還有透過哪些 port 可以傳出資料（稱作 outbound）。但大部分是只會設定 inbound 而已，因為傳出跟安全性比較沒有關係（就目前自己的了解）。預設是開啟 <code>:22</code> 也就是 ssh 連線的預設 port，如果沒有開這個你就沒辦法連到你的 server 了（還有其他方式可以連到 server 啦，不過這裡先用 ssh）。</p>\n<p>我們可以建立很多不同的 SG，然後依照狀況套用進去。接下來的步驟就是要建立一個 SG，然後開啟我們需要的服務會用到的端口，分別是：</p>\n<ul>\n<li>HTTP: <code>80</code> ipv4</li>\n<li>HTTPS: <code>443</code> ipv4</li>\n<li>FTP: <code>20-21</code> ipv4 &amp; ipv6, <code>900</code>,  <code>40000-50000</code></li>\n<li>MySQL: <code>3306</code> ipv4</li>\n</ul>\n<p>為什麼會開這些 port？每個服務都有一個預設的 port，上面這些就是需要的功能的 port，FTP 的部分就比較奇怪，可以之後在了解。那接下來會講怎麼新增 SG。</p>\n<ol>\n<li>點擊 SG 然後 add rule</li>\n<li>SG 的基本設定</li>\n</ol>\n<p>SGname 隨便填，你喜歡就好。descroption 也是建議可以打個容易識別的名子。VPC (Virtual Private Cloud)，簡單來說就是一個屬於你的虛擬 IP 位置這樣，這個東西用預設的就好了。（這個東西自己也沒有很清楚）</p>\n<blockquote>\n<p>❓ VPC是甚麼？\n自己目前對於 VPC 的理解是，Amazon 只有寥寥幾個 ipv4 的 IP，不可能所有人一人一個，但是他有無數個虛擬。所以他會透過類似 router 的東西，當有人向 寥寥幾個 IP 傳送 Request 時候，用 router 把 request 指向虛擬 IP。不過有一個問題是說他怎麼知道那個原本的 IP 要 router 去哪裡？這個東西關係到網路的東西有點小複雜阿...</p>\n</blockquote>\n<ol start=\"3\">\n<li>add rule</li>\n</ol>\n<p>點擊 add rule，然後其實他會有一些預設的 set，可以直接選擇，我們需要設定的東西是 Source，能夠設定說允許哪些 IP 位置能夠連線進來。因為我們是 web server，要讓世界各地的人來看我們的網站，所以這裡就不限制，點三角形有一個 anywhere 的選項，全部都設置為 anywhere。</p>\n<p>其實 anywhere 就是設置 ipv4 是 0.0.0.0/0 跟 ipv6</p>\n<blockquote>\n<p>❓ CIDR\n這裡的標示方法是用 CIDR 表示法，不過 CIDR 是啥，還有子網路遮罩又是啥，這裡還有很多坑要填。直接講說 CIDR 是什麼可能要從 IP 是甚麼開始寫了，直接寫說這樣寫代表的意義是甚麼好了。</p>\n<p>這裡的用 CIDR 的原因是指定 NET_ID，然後允許下面所有的 HOST 可以連線，像是 132.2.123.222/8 就表示說 可以從 132.0.0.0 ~ 132.256.256.256 都可以連線</p>\n<p>不過這裡有問題是說，所以 132.3.123.222/8 跟 132.23.232.222/8 這兩個是一樣的？因為前面的 132 都是相同的</p>\n</blockquote>\n<p>這樣就設定好 SG 了，設定的部分再細節部分可能有點因人而異，不過大方向就是把需要的 port 打開，然後不限制 IP 進來就對了。</p>\n<ol start=\"4\">\n<li>更改 instance 的 SG</li>\n</ol>\n<p>回到 instance，選擇自己的 instance 之後點擊 action &gt; networking &gt; change security group ，然後選則剛剛設定的 SG，然後按 add。一定要做這步不然沒用喔，還是會連不上去。</p>\n<h3 id=\"%E7%94%A8-ssh-%E7%99%BB%E5%85%A5-vps\"><a class=\"direct-link\" href=\"#%E7%94%A8-ssh-%E7%99%BB%E5%85%A5-vps\">#</a> 用 ssh 登入 VPS</h3>\n<p>打開你的 CLI，用哪個都行，有 ssh 就可以。然後輸入</p>\n<pre><code>格式：\nssh -i &quot;你的剛剛下載的 key 的位置&quot; ubuntu@&quot;你 insatnce 的 Public IP address&quot;\n範例：\nssh -i ./location.pem ubuntu@3.232.232.232\n</code></pre>\n<p>會問你 yes 還是 no，不太懂這邊問這個是甚麼意思，不過選 yes 就可以了（就是這種心態才會出問題）</p>\n<p>可以稍微來看一下上面的 command 的意思，<code>-i</code> 的意思是使用檔案的金鑰認證，後面是 <code>用戶名稱@IP位置</code>，要輸入 Public IP DNS 也是可以啦，如果之後有串上自己的 DNS 也可以使用。</p>\n<p>或者是可以點進去你的 instance 然後按裡面的 connect &gt; ssh client 就會有教學，複製上去 CLI 就可以了</p>\n<p>到這裡就正式把 VPS 設定好了。</p>\n<h2 id=\"%E5%AE%89%E8%A3%9D-nginx%2C-mysql%2C-php\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-nginx%2C-mysql%2C-php\">#</a> 安裝 nginx, Mysql, PHP</h2>\n<p>處理完 instance 就到了安裝的環節了，這裡基本上是參考<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-ubuntu-18-04\">這篇文章</a></p>\n<p>對了，安裝之前，因為讀者可能會找其他的資料（這篇寫的不夠清楚時），要記得盡量找  OS 版本符合的，我們安裝的 OS 是 Ubuntu 18.04。</p>\n<p>首先先更新一下系統：</p>\n<pre><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt dist-upgrade\n</code></pre>\n<p>只要安裝 Package 完他都會問你說（後面也會出現）</p>\n<pre><code>After this operation, 312 kB of additional disk space will be used.\nDo you want to continue? [Y/n]\n</code></pre>\n<p>問你會占用多少容量，要不要安裝，按 yes 就可以了，哪次不 yes。</p>\n<h3 id=\"%E5%AE%89%E8%A3%9D-ngnix\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-ngnix\">#</a> 安裝 Ngnix</h3>\n<pre><code>sudo apt install nginx\n</code></pre>\n<p>稍微解析一下指令在幹嘛， <code>sudo</code> 是以管理員的身分執行的意思，<code>apt</code> 則是 Ubuntu 管理套件的工具，之後可能會看到 <code>apt-get</code> ，其實是一樣的東西，只是 <code>apt</code> 把常用的東西抽出來，有點像瑞士刀的感覺，詳細可以看<a href=\"https://www.itread01.com/content/1543804995.html#:~:text=apt%E8%88%87apt%2Dget%E4%B9%8B%E9%96%93%E7%9A%84%E5%8D%80%E5%88%A5&amp;text=apt%20%E5%85%B7%E6%9C%89%E6%9B%B4%E7%B2%BE%E6%B8%9B,%E7%B5%84%E7%B9%94%E6%96%B9%E5%BC%8F%E6%9B%B4%E7%82%BA%E6%9C%89%E6%95%88%E3%80%82&amp;text=%E4%BE%8B%E5%A6%82%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E4%BD%BF%E7%94%A8%20apt,get%20%E6%99%82%E7%9B%B8%E5%90%8C%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%82\">這篇</a>，後面就不贅述了，就是下載的 nginx。</p>\n<p>這個階段設定好之後，就可以透過 <code>http://[你的 public IP]</code> 來連線了，AWS 的 Public IP 可以在 Instance 的資料裡面看到。會顯示 nginx 的預設畫面，這個畫面的資料會被放在 <code>var/www/html</code> 裡面，這也是之後我們會放我們東西的地方。</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E9%98%B2%E7%81%AB%E7%89%86\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E9%98%B2%E7%81%AB%E7%89%86\">#</a> 設定防火牆</h3>\n<p>自己這部分沒有設定，有興趣可以看原教學。</p>\n<p>防火牆可以阻擋未經我們允許的連線，來讓 server 更安全，防火牆可以在網路的每一個環節的很多部分去做，像是在路由器、IPS（像是種花電信），我們剛剛設定的 SG 也是防火牆之一。</p>\n<p>因為 aws 的 Security Group 就已經阻擋未開啟的 port 連線 server 的功能了，所以 SG 還有 ufw 的設定功能上是重疊的，詳細可以看<a href=\"https://serverfault.com/questions/286665/why-have-both-security-groups-and-iptables-on-amazon-ec2\">這篇</a>。不過並不是說當你使用 aws，ufw 就完全不用了，ufw 可以做到針對傳遞的內容或者是流量阻擋等等更細節的操作，可以用來防止 DDOS 之類的攻擊。</p>\n<blockquote>\n<p>通常在講設定防火牆，其他文章會提到的大多是 ufw（Uncomplicated FireWall），1不過實際上 ufw 背後也是去設定 iptable（可以看<a href=\"https://askubuntu.com/questions/952705/ufw-or-iptables-on-ubuntu-for-openvpn\">這篇</a>），但是因為 iptable 太複雜了，而且 ubuntu 也已經內建 ufw （ubuntu 18.04），所以大家都用 ufw 去設定。</p>\n</blockquote>\n<h3 id=\"%E5%AE%89%E8%A3%9D%E5%8F%8A%E8%A8%AD%E5%AE%9A-mysql-server\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D%E5%8F%8A%E8%A8%AD%E5%AE%9A-mysql-server\">#</a> 安裝及設定 mySQL server</h3>\n<p>資料庫的部分我們使用 MYsql，先進行下載。</p>\n<pre><code>sudo apt install mysql-server\n</code></pre>\n<pre><code>sudo mysql_secure_installation\n</code></pre>\n<p>接來我們會啟用 mysql-server 的 Validate Password Plugin。後面就不付上指令了，建議自己稍微看一下內容會比較好，能夠理解自己在幹嘛。</p>\n<p>Validate Password Plugin 會強制你的密碼要有一定限制，繼續剛剛的步驟就可以看到有三種規則，看你自己的要求，不過之後 phpmyadmin 還有我們要用遠端連線資料庫的密碼也要遵守這個規則，可以自行斟酌。</p>\n<p>接著會開始設定 root 帳號的密碼， root 帳號是 mySQL 裡面最高權限的帳號，我們在操作資料庫其實不太會直接用這個帳號操作，如果不小心誤操作會造成嚴重的問題。</p>\n<p>設定好密碼之後還有一件事情要做，在 mysql 裡面，root 的預設登入帳號是使用 <code>auth_socket</code>，會直接對已經登入的 linux 帳戶作驗證，就不用另外打 mysql 帳戶的密碼。這裡我們要改一下設定：</p>\n<pre><code>sudo mysql\n</code></pre>\n<p>進入 mysql，使用 mysql 的 CLI。</p>\n<pre><code>SELECT user,authentication_string,plugin,host FROM mysql.user;\n</code></pre>\n<p>我們先來看看原本的登入方法還有用戶資料</p>\n<pre><code>+------------------+-------------------------------------------+-----------------------+-----------+\n| user             | authentication_string                     | plugin                | host      |\n+------------------+-------------------------------------------+-----------------------+-----------+\n| root             |                                           | auth_socket           | localhost |\n| mysql.session    | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |\n| mysql.sys        | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE | mysql_native_password | localhost |\n| debian-sys-maint | *CC744277A401A7D25BE1CA89AFF17BF607F876FF | mysql_native_password | localhost |\n+------------------+-------------------------------------------+-----------------------+-----------+\n4 rows in set (0.00 sec)\n</code></pre>\n<p>可以看到 mysql 在安裝的時候就已經會有預設一些帳戶了。而且 root 在 plugin 是  <code>auth_socket</code>，我們要改成 <code>mysql_native_password</code> 來用 mysql 設定的密碼登入。</p>\n<pre><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';\n</code></pre>\n<p>指令蠻直觀的，可以看一下內容，就是指定用戶以甚麼樣的方式登入，最後要輸入剛剛設定的密碼。</p>\n<blockquote>\n<p>有看到說可以用另外一個指令來設定</p>\n<pre><code>UPDATE user SET plugin='mysql_native_password' WHERE User='root';\n</code></pre>\n<p>似乎一個是用 mysql 處理帳戶的方式來設定，另外一個就是單純用 UPDATE 的指令來設定身分的 table，而且只改變 plugin。不知道說這兩個有沒有什麼差別。</p>\n</blockquote>\n<pre><code>FLUSH PRIVILEGES;\n</code></pre>\n<p>這個指令是更新權限表，每次修改權限都需要更新才會套用設定。</p>\n<p>剛剛在修改權限時有看到 <code>'root'@'localhost'</code>，這是什麼？我們知道說 <code>root</code> 是我們最高權限的帳號，那 <code>localhost</code> 呢？</p>\n<p>SQL 的權限設定是用 <code>帳號名稱@登入位置</code> 來設定的，跟我們一開始登入 ssh 的概念有點像，這兩個合在一起才可以組成完整的登入帳號。所以  <code>'root'@'localhost'</code> 表示在 <strong>localhost</strong> 上面登入的 <strong>root</strong>，如果你要從外部（例如不透過 ssh，用程式來遠端連線）連線到 SQLserver 用 root 帳號登入是行不通的，只提供從 <code>localhost</code> 連線。也可以設定不管從哪裡連線都可以，後面如果填入 <code>'%'</code> 表示不管從哪裡連線都可以（不確定可不可以填入域名）。</p>\n<p>SQL 還可以設定從不同的地方連線同一個帳戶可以有不同的權限。之後在處理 PHPmyadmin 的時候會提到。</p>\n<p>設定完之後可以在輸入前面 <code>SELECT</code> 的指令看看自己的設定有沒有生效。 OK 就可以</p>\n<pre><code>exit\n</code></pre>\n<p>離開 mysql。設定好之後可能就沒辦法用 <code>sudo mysql</code> 來登入了，會需要使用</p>\n<pre><code>mysql -u root -p\n</code></pre>\n<p>然後輸入密碼登入。</p>\n<blockquote>\n<p>也有看到使用 <code>sudo mysql -u root mysql</code> ，這裡自己沒有詳細研究之間的差別。</p>\n</blockquote>\n<h3 id=\"php\"><a class=\"direct-link\" href=\"#php\">#</a> PHP</h3>\n<p>再來就是 LEMP 的最後一個步驟：PHP。這步驟我們要處理 PHP 的 CGI。什麼是 CGI？ CGI (Common Gateway Interface) 會把接收到的 request 轉化成語言可以解讀的形式，然後再用程式的語法送出 response。所以你才可以用 <code>$GET</code>, <code>$POST</code> 之類的東西來處理 request，然後 <code>echo</code> 就可以送出 response 的 body。</p>\n<p>我們這裡就是要設定 PHP 的 CGI，更準確地來說是 FastCGI，也就是 CGI 的進化版。你也可以自己設定你喜歡的，像是另外一個 P（python），或者是 Ruby 之類的（LEMR 聽起來好像比 LEMP 更酷）。</p>\n<pre><code>sudo apt install php-fpm php-mysql\n</code></pre>\n<blockquote>\n<p>有可能會沒辦法下載(自己有遇到這個問題)，會需要先下載 universe 的 repo</p>\n<pre><code>sudo add-apt-repository universe\n</code></pre>\n</blockquote>\n<p>這樣就下載好 php-fpm （PHP FastCGI Process Manager），我們必須手動把 CGI 串上 web server，也就是 nginx。需要手動修改 nginx 的設定檔。</p>\n<p>這裡講一下 nginx 設定檔的結構：</p>\n<p>nginx 有一個主設定檔 <code>nginx.conf</code> 位在 <code>etc/nginx/</code> 裡面，裡面有這一段</p>\n<pre><code>http {\n      //...\n      include /etc/nginx/conf.d/*.conf;\n      include /etc/nginx/sites-enabled/*;\n}\n</code></pre>\n<p>會引入 <code>/etc/nginx/conf.d/*.conf</code> 還有 <code>/etc/nginx/sites-enabled/*</code>。通常對個別網站的做法是會在 <code>/etc/nginx/sites-available/</code> 裡面寫我們個別網站的設定，然後在透過連結的方式把需要的設定連結到 <code>sites-enabled</code> 裡面。個別網域的東西比較不會去動主設定檔。接下來就開始處理：</p>\n<pre><code>sudo nano /etc/nginx/sites-available/example.com\n</code></pre>\n<p>開一個 <code>example.com</code> 讓我們寫設定檔，名子隨便你，文字編輯器也隨便你，參考文章裡面的 <code>nano</code> 就只是一個文字編輯器而已。</p>\n<pre><code>server {\n        listen 80;\n        root /var/www/html;\n        index index.php index.html index.htm index.nginx-debian.html;\n        server_name example.com;\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;\n        }\n\n        location ~ /\\.ht {\n                deny all;\n        }\n}\n</code></pre>\n<p>然後把檔案改成這樣。你也可以直接 cp (複製的指令) <code>sites-available</code> 裡面的 default，在修改檔案</p>\n<pre><code>sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/example.com\n</code></pre>\n<p>然後要加的東西加一加，其實 <code>default</code> 裡面都幫你打好了，弄到上面那樣就可以了。</p>\n<pre><code>sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\nsudo unlink /etc/nginx/sites-enabled/default\n</code></pre>\n<pre><code>sudo systemctl reload nginx\n</code></pre>\n<p>接下來就是做剛剛說到的設定連結到 <code>sites-enabled</code> 裡面，而且把 default unlink，最後更新 nginx 的設定。</p>\n<p>在更新之前也可以用 <code>sudo nginx -t</code> 來測試看看說設定有沒有打錯。這樣就設定好 PHP 的 CGI 了。</p>\n<h3 id=\"%E6%B8%AC%E8%A9%A6\"><a class=\"direct-link\" href=\"#%E6%B8%AC%E8%A9%A6\">#</a> 測試</h3>\n<p>最後我們來測試一下</p>\n<pre><code>sudo nano /var/www/html/info.php\n</code></pre>\n<pre><code>&lt;?php\nphpinfo();\n</code></pre>\n<p>建立一個 info.php，輸入上面的指令。這個 PHP 指令可以告訴我們 PHP 的設定，還有裝了那些 PHP 的 plugin。</p>\n<p>然後你就可以瀏覽器瀏覽這個頁面看看</p>\n<pre><code>http://你的網頁/info.php\n</code></pre>\n<p>有跑出東西就是成功了，沒跑出東西就看看設定檔有沒有打錯或者是有沒有更新設定檔，看完記得刪除。</p>\n<p>到這裡就完成 LEMP 的設置了。</p>\n<h2 id=\"%E9%96%8B%E5%95%9F-php-%E9%81%A0%E7%AB%AF%E9%80%A3%E7%B7%9A\"><a class=\"direct-link\" href=\"#%E9%96%8B%E5%95%9F-php-%E9%81%A0%E7%AB%AF%E9%80%A3%E7%B7%9A\">#</a> 開啟 PHP 遠端連線</h2>\n<p>可以參考<a href=\"https://www.digitalocean.com/community/tutorials/how-to-allow-remote-access-to-mysql\">這篇</a></p>\n<p>開啟遠端連線就可以用自己的資料庫軟體來操作了。步驟大概是這樣：</p>\n<ol>\n<li>打開防火牆（包含 ufw &amp; SG）</li>\n<li>設定 mySQL 的連線</li>\n<li>建立一個帳戶</li>\n<li>建立一個專屬於帳戶的資料庫</li>\n<li>設定帳戶權限</li>\n</ol>\n<p>其實也可以自己試著用更開源的 MariaDB，但是設定方式就要再看一下，不過應該沒什麼很大的差異</p>\n<h3 id=\"%E6%89%93%E9%96%8B%E9%98%B2%E7%81%AB%E7%89%86\"><a class=\"direct-link\" href=\"#%E6%89%93%E9%96%8B%E9%98%B2%E7%81%AB%E7%89%86\">#</a> 打開防火牆</h3>\n<p>前面已經開了</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E9%80%A3%E7%B7%9A\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E9%80%A3%E7%B7%9A\">#</a> 設定連線</h3>\n<p>修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 修改 <code>bind-address</code> 成為 0.0.0.0，也就是允許任何 IP 連線的意思。</p>\n<pre><code>lc-messages-dir = /usr/share/mysql\nskip-external-locking\n#\n# Instead of skip-networking the default is now to listen only on\n# localhost which is more compatible and is not less secure.\nbind-address   = 0.0.0.0\n</code></pre>\n<pre><code>sudo systemctl restart mysql\n</code></pre>\n<p>然後重新啟動，systemctl 可以用來管理整個 OS 上面的服務。</p>\n<h3 id=\"%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%EF%BC%9B%E8%B3%87%E6%96%99%E5%BA%AB%EF%BC%9B%E6%8E%88%E6%AC%8A\"><a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%EF%BC%9B%E8%B3%87%E6%96%99%E5%BA%AB%EF%BC%9B%E6%8E%88%E6%AC%8A\">#</a> 建立帳戶；資料庫；授權</h3>\n<pre><code>mysql -u root -p\n</code></pre>\n<pre><code>CREATE USER 'username'@'%' IDENTIFIED BY 'password';\n</code></pre>\n<p>先登入資料庫，後再建立一個新的帳戶，還記得前面提到的帳戶格式嗎？這裡可以用 % 代表你可以從任何 IP 來登入。</p>\n<p>到這裡，可以先用 <code>SHOW GRANTS FOR [user];</code> 來看看自己的權限。</p>\n<pre><code>CREATE DATABASE &quot;database_name&quot;;\n</code></pre>\n<pre><code>GRANT ALL PRIVILEGES ON 'database_name'.* TO 'username'@'%' WITH GRANT OPTION;\n</code></pre>\n<p>再檢查一次權限，可以看到已經有指定的 database 有存取的權限了。但是要注意，這樣給的是該資料庫最高的權限，還可以新增帳戶之類的，如果覺得安全性有疑慮不想要設定高的權限，可以看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html\">文件</a>照自己的要求來設定。或者是用下面的指令，可以只給予一些基本操作的權限。</p>\n<pre><code>GRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES, RELOAD on 'database_name'.* TO 'username'@'%' WITH GRANT OPTION;\n</code></pre>\n<h2 id=\"%E8%A8%AD%E5%AE%9A-https\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A-https\">#</a> 設定 https</h2>\n<p>在安裝 phpmyadmin 之前要先來設定 https，因為 phpmyadmin 是透過 http/https 連上 server，在透過 PHP 的介面操作資料庫。先設定 https 可以避免我們的操作暴露在網路上。這部分的內容主要參考<a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04\">這篇</a></p>\n<p>https 需要一個 Certificate Authority (CA) 發放的證書 (certificate) 來幫我們的網頁認證。有一個很方便的東西叫做 certbot 可以幫我們處理這點。</p>\n<h3 id=\"%E5%AE%89%E8%A3%9D-certbot\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-certbot\">#</a> 安裝 certbot</h3>\n<pre><code>sudo add-apt-repository ppa:certbot/certbot\n</code></pre>\n<pre><code>sudo apt install python-certbot-nginx\n</code></pre>\n<p>先下載 certbot 的軟體庫，然後在下載 certbot。因為 certbot 的開發比較活躍，如果你適用預設的 ubuntu 軟體庫來下載的話常常已經是之前的版本了，所以我們這裡使用 certbot 自己提供的軟體庫來拿到最新的版本。</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A-nginx\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A-nginx\">#</a> 設定 nginx</h3>\n<p>記得一開始我們設定過 CGI ，現在我們要到同樣的檔案去設定 https。打開一樣的檔案 <code>/etc/nginx/sites-available/example.com</code>，把自己的 domain name 加進去，包含 <code>www.domain.com</code> 以及 <code>domain.com</code>。</p>\n<pre><code>server_name example.com www.example.com;\n</code></pre>\n<p>這裡設定好直接儲存就好了，不用再連結一次，已經之前已經設連結了。</p>\n<p>https 發證書是跟著 domain name 的，不是跟著 IP，所以要跟著設定 domain name 給 nginx 。想到這裡有點好奇說能不能發證書給 IP，有<a href=\"https://stackoverflow.com/questions/2043617/is-it-possible-to-have-ssl-certificate-for-ip-address-not-domain-name\">查到</a>說其實也可以，不過似乎很少這樣處理。</p>\n<p>最後記得測試跟 reload nginx，可以去前面翻指令。</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A%E9%98%B2%E7%81%AB%E7%89%86-2\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E9%98%B2%E7%81%AB%E7%89%86-2\">#</a> 設定防火牆</h3>\n<p>要把 ngnix 的 port 存取全部打開，SG 有設定了所以這邊沒有設定，想設定可以參考原文。</p>\n<h3 id=\"%E7%8D%B2%E5%8F%96-ssl-%E8%AD%89%E6%9B%B8\"><a class=\"direct-link\" href=\"#%E7%8D%B2%E5%8F%96-ssl-%E8%AD%89%E6%9B%B8\">#</a> 獲取 SSL 證書</h3>\n<p>接下來就超級快了，快到不行那種</p>\n<pre><code>sudo certbot --nginx -d example.com -d www.example.com\n</code></pre>\n<p>輸入上面指令可以獲取證書，如果有想新增的 subdomain 可以再加上自己要的 <code>-d</code>，沒有試過說能不能用 <code>*.example.com</code> 來讓所有的 subdomain 都登記在證書上面。不過應該可以試試看。</p>\n<pre><code>Output\nPlease choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.\n\n// 選項\n\nSelect the appropriate number [1-2] then [enter] (press 'c' to cancel):\n</code></pre>\n<p>中間可能會跳出 email 或什麼的可以照他的指示處理，還有上面這個，我是選 2 啦，內容可以自己看一下，在講要不要自動幫你轉到 https。</p>\n<p>然後就好了，是不是超級快！！快來讓自已的網站也安全起來吧。</p>\n<p>最後講一下說為什麼可以這麼方便幾乎是一行指令就讓你的 server 擁有高枕無憂的 https 連線好了。</p>\n<p>有一個網站叫做 <a href=\"https://letsencrypt.org/zh-tw/getting-started/\">lets encrypt</a> 可以免費頒發 SSL 的證書，而 certbot 就是可以幫你自動連到 lets encrypt 申請證書，甚至在過期的時候也會自動幫你再申請！！簡直是 nice 到不行。</p>\n<p>如果想要強制更新證書來測試說有沒有問題，可以：</p>\n<pre><code>sudo certbot renew --dry-run\n</code></pre>\n<p>如果沒問題就大功告成囉。</p>\n<h2 id=\"phpmyadmin\"><a class=\"direct-link\" href=\"#phpmyadmin\">#</a> PHPmyadmin</h2>\n<p>會把 PHPmyadmin 放在的 https 後面的原因是如果透過 http 連線來存取會比較危險一點（雖然可能沒甚麼要盜用我的資料庫...），所以在設定好 https 之後再開始處理 phpmyadmin。</p>\n<p>phpmyadmin 的部分是參考<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-with-nginx-on-an-ubuntu-18-04-server\">這篇</a></p>\n<h3 id=\"%E5%AE%89%E8%A3%9D\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D\">#</a> 安裝</h3>\n<pre><code>sudo apt update\n</code></pre>\n<pre><code>sudo apt install phpmyadmin\n</code></pre>\n<p>首先老步驟，更新還有下載 phpmyadmin。這裡突然很好奇說 apt update 是甚麼意思？是更新系統的意思嗎。後來發現不是，是更新可以下載的套件清單還有版本，所以每次 install 的時候都推薦跑一下。</p>\n<p>中間會選說你用哪個 server，很可惜的都不是。可以直接按 <code>tab</code> 然後 <code>enter</code>。</p>\n<p>再來，phpmyadmin 會幫你在 mySQL 裡面建立一個用戶，來存放 phpmyadmin 的資料，而且會要你輸入密碼，照做設定自己的密碼就可以了。</p>\n<p>接下來會把 phpmyadmin 連結到 web-server 存取的網站資料夾裡面。</p>\n<pre><code>sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin\n</code></pre>\n<p>追根究柢來說 phpmyadmin 其實就只是一堆 php 檔案而已，這個步驟跟把自己的 index.html 差不多。這個時候其實 phpmyadmin 就弄好了，可以輸入網址看一下。</p>\n<pre><code>https://server_domain_or_IP/phpmyadmin\n</code></pre>\n<p>但是這只是第一步喔，phpmyadmin 超夯，而且超多人在用，別人看到你的網站然後後面接著 <code>/phpmyadmin</code> 就可以看到 phpmyadmin，然後你又一定有個 <code>root</code> 的帳戶，可能你的密碼又超簡單，輕鬆登入你的資料庫，然後 <code>drop</code> 掉你的心血。</p>\n<p>方便總要付出一點代價，雖然有 https 安全很多，但是接下來的設定可以讓你更安心地用 phpmyadmin。大概有這些步驟</p>\n<ul>\n<li>更改 phpmyadmin 的資料夾名稱</li>\n<li>禁用 <code>root</code> 使用 phpmyadmin 登入</li>\n<li>讓進入 phpmyadmin 以前需要再進行驗證</li>\n</ul>\n<h3 id=\"%E6%9B%B4%E6%94%B9%E8%B3%87%E6%96%99%E5%A4%BE%E5%90%8D%E7%A8%B1\"><a class=\"direct-link\" href=\"#%E6%9B%B4%E6%94%B9%E8%B3%87%E6%96%99%E5%A4%BE%E5%90%8D%E7%A8%B1\">#</a> 更改資料夾名稱</h3>\n<p>這步驟超簡單，但是還蠻有用的。</p>\n<pre><code>cd /var/www/html\n\nsudo mv phpmyadmin secret_admin\n</code></pre>\n<p><code>secret_admin</code> 可以自行填入。這樣可以避免自動掃描，或者是那種喜歡動不動就偷看一下的人（像我就是...）。</p>\n<h3 id=\"%E7%A6%81%E6%AD%A2-root-%E4%BD%BF%E7%94%A8-phpmyadmin-%E7%99%BB%E5%85%A5\"><a class=\"direct-link\" href=\"#%E7%A6%81%E6%AD%A2-root-%E4%BD%BF%E7%94%A8-phpmyadmin-%E7%99%BB%E5%85%A5\">#</a> 禁止 <code>root</code> 使用 phpmyadmin 登入</h3>\n<pre><code>sudo nano /etc/phpmyadmin/conf.d/pma_secure.php\n</code></pre>\n<pre><code>&lt;?php\n\n# PhpMyAdmin Settings\n# This should be set to a random string of at least 32 chars\n$cfg['blowfish_secret'] = '任意輸入32字元的字串';\n\n$i=0;\n$i++;\n\n$cfg['Servers'][$i]['auth_type'] = 'cookie';\n$cfg['Servers'][$i]['AllowNoPassword'] = false;\n$cfg['Servers'][$i]['AllowRoot'] = false;\n\n?&gt;\n</code></pre>\n<p>建立一個 pma_secure.php，然後放進去上面的設定。自己也還沒理解所有的設定，但重要的是下面三個。</p>\n<ul>\n<li><code>['auth_type'] = 'cookie'</code>：讓我們可以用 cookie 來連線，預設的連線方式是 config 有點危險，上面的 blowfish 可以設定驗證 cookie 的 token，系統會要求要打滿 32 字。</li>\n<li><code>['AllowNoPassword'] = false;</code>：不讓你用免密碼登入</li>\n<li><code>['AllowRoot'] = false;</code>：這個就是我們的目標了，禁用 root</li>\n</ul>\n<p>設定完之後可以試著用 root 登入看看。</p>\n<h3 id=\"%E8%AE%93%E9%80%B2%E5%85%A5-phpmyadmin-%E4%BB%A5%E5%89%8D%E9%9C%80%E8%A6%81%E5%86%8D%E9%80%B2%E8%A1%8C%E9%A9%97%E8%AD%89\"><a class=\"direct-link\" href=\"#%E8%AE%93%E9%80%B2%E5%85%A5-phpmyadmin-%E4%BB%A5%E5%89%8D%E9%9C%80%E8%A6%81%E5%86%8D%E9%80%B2%E8%A1%8C%E9%A9%97%E8%AD%89\">#</a> 讓進入 phpmyadmin 以前需要再進行驗證</h3>\n<p>大部分的 webserver 可以設定說特定的網站需要透過另外登入才可以進去，這樣可以不讓一些比較邪惡的爬蟲找到我們的 phpmyadmin。</p>\n<p>首先我們要用 openssl 來幫我們建立一組密碼，openssl 是一個提供很多種常用加密方式的工具，已經內建在 ubuntu 上了，常用 linux 會很常看到這個東西。</p>\n<pre><code>openssl passwd\n</code></pre>\n<p>然後輸入你的密碼，會跑出加密過後的密碼。</p>\n<pre><code>Output\nO5az.RSPzd.HE //會跑出你自己加密過的密碼\n</code></pre>\n<p>然後修改 nginx 的設定，把我們的帳戶加進去。</p>\n<pre><code>sudo nano /etc/nginx/pma_pass\n</code></pre>\n<p>加入你自己想要的帳號跟密碼</p>\n<pre><code>你要設定的帳號:剛剛加密過的密碼\n</code></pre>\n<p>再來要設定哪些資料夾需要透過帳號密碼驗證才可以進入，懂這個方法之後，其實你也可以自己把你想要的資料夾加入帳號密碼驗證，可以做一個自己的後台。其實也不難，還記得前面我們的 nginx 設定檔嗎？</p>\n<p>location block 可以設定存取到特定位置時的動作，我們在 <code>/secret_admin</code> (依照剛剛設定的資料夾)裡面設定我們要使用的授權方式，並選擇剛剛建立的帳戶檔案。</p>\n<pre><code>server {\n    . . .\n\n        location / {\n                try_files $uri $uri/ =404;\n        }\n\n        # 只要加這段進去\n        location /secret_admin {\n                auth_basic &quot;Admin Login&quot;;\n                auth_basic_user_file /etc/nginx/pma_pass;\n        }\n\n    . . .\n}\n</code></pre>\n<p>內容自己覺得直觀的，雖然這篇沒有提到 nginx 的設定，但是可以稍微理解設定的方法。</p>\n<p>話說這篇可能比較沒內容，覺得這裡的概念似乎沒有那麼複雜。</p>\n<h2 id=\"ftp-server\"><a class=\"direct-link\" href=\"#ftp-server\">#</a> FTP server</h2>\n<p>終於到最後了，這裡就是自己花最多時間的地方。有一個 ftp Server 之後上傳東西會方便很多，這篇的內容參考自<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04\">How To Set Up vsftpd for a User's Directory on Ubuntu 18.04</a>，但是有修改過很多東西。</p>\n<p>這部分會比較不同，設定大多是自己研究的，有可能有很多問題或者是還有待優化的部分，歡迎大家一起 debug XD，那一樣先來講講要幹嘛。</p>\n<p>我們要做的事情有</p>\n<ul>\n<li>建立一個獨立的帳戶能夠登入 FTP</li>\n<li>可以傳輸我們的檔案到 <code>/etc/www</code> （web server 存取的資料夾）裡面</li>\n<li>這個帳戶透過 FTP 只能存取到 <code>/etc/www</code> 沒辦法再存取上層目錄（安全問題）</li>\n<li>只有這個帳戶可以用 FTP 登入</li>\n<li>開啟 ssl 加密的功能</li>\n</ul>\n<p>為什麼是 <code>/html/www</code>，因為原本想設定 <code>/etc/www/html</code> 然後失敗很多次，灰心喪志，後來發現自己偶然設定成 <code>/html/www</code>，就放過自己了...</p>\n<p>單純的 FTP 就像 http 一樣會讓你在這個網路世界中裸奔，這裡我們會使用 FTPs 來連線，在 FTP 的基礎上使用 ssl 來加密。另外還有一種稱作 SFTP，能夠在 ssh （我們登入 server 採用的協議）的基礎上使用 ftp 傳輸，詳細的內容可以看<a href=\"https://www.trustauth.cn/wiki/13883.html\">這篇</a>。</p>\n<h3 id=\"%E5%AE%89%E8%A3%9D-vtftpd\"><a class=\"direct-link\" href=\"#%E5%AE%89%E8%A3%9D-vtftpd\">#</a> 安裝 vtftpd</h3>\n<p>我們會使用 vsftps 來作為我們的 ftp server，<a href=\"http://vsftpd.beasts.org/vsftpd_conf.html\">這裡</a>是他的文件。首先是下載，應該很熟悉了。</p>\n<pre><code>sudo apt update\nsudo apt install vsftpd\n</code></pre>\n<p>然後我們複製一個 vsftpd 的設定檔，留一個原版之後還原用</p>\n<pre><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig\n</code></pre>\n<h3 id=\"%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%E3%80%81%E8%A8%AD%E5%AE%9A%E5%AE%B6%E7%9B%AE%E9%8C%84%E4%BB%A5%E5%8F%8A%E6%AC%8A%E9%99%90\"><a class=\"direct-link\" href=\"#%E5%BB%BA%E7%AB%8B%E5%B8%B3%E6%88%B6%E3%80%81%E8%A8%AD%E5%AE%9A%E5%AE%B6%E7%9B%AE%E9%8C%84%E4%BB%A5%E5%8F%8A%E6%AC%8A%E9%99%90\">#</a> 建立帳戶、設定家目錄以及權限</h3>\n<p>FTP 登入的帳號和 unbuntu 本身帳戶是一樣的。所以我們要先再系統上面建立一個帳戶。</p>\n<pre><code>sudo adduser username\n</code></pre>\n<p>新增完會需要輸入密碼，就依照上面的指示。在來修改家目錄，家目錄就是當我們一開始登入的時候，進入的資料夾，我們會設定 FTP 登入這個帳戶的時候，會直接進入我們的網頁資料夾。passwd 是存放 ubuntu 用戶資料的檔案。</p>\n<pre><code>sudo vim /etc/passwd\n</code></pre>\n<p>可以修改帳戶的一些資料，然後滾到最下面會看到我們剛剛的帳號名稱。到那一行之後，改成下面這行。</p>\n<pre><code>username:x:1001:1001:,,,:/var/www:/bin/bash\n</code></pre>\n<p>基本上就是修改最後一個冒號跟倒數第二個冒號的內容，這裡可以修改家目錄。</p>\n<pre><code>sudo chown -R username /var/www\n</code></pre>\n<p>修改 <code>/var/www</code> 以及底下所有檔案的所有者，原本是屬於 root 的，我們把它改到剛剛設建立的帳戶下面，讓我們可以操作下面的檔案。</p>\n<p>從建立帳戶之後作法可能會有很大的爭議，照理來說你有幾種做法，只要讓新建立的帳戶可以存取就好。列一下自己的幾種想法：</p>\n<ul>\n<li>\n<p>把新帳戶加入 root 群組<br>\n覺得這個不太妥，很多重要的資料夾都是 root 群組的</p>\n</li>\n<li>\n<p>把 <code>/var/www</code> 的 owner 改成 new_user`<br>\n這裡是自己採用的做法，想法是這樣可以讓 root 有最高的權限（group 還是 root），又可以讓 new_user 可以存取裡面的東西</p>\n</li>\n<li>\n<p>改變 <code>/var/www</code> 權限變成 776，也就是</p>\n<ul>\n<li>擁有者：讀、寫、執行</li>\n<li>群組：讀、寫、執行</li>\n<li>其他人：讀、寫\n這個個人是覺得不太妥，這樣權限開太廣了</li>\n</ul>\n</li>\n<li>\n<p>建立一個 new_group，然後把 <code>/var/www</code> 的 group 改成 new_group，在把 new_user 放進去 new_group。<br>\n這個似乎是最穩妥的作法，但是好麻煩ㄚ...</p>\n</li>\n</ul>\n<p>這裡應該還可以思考看看如何利用帳戶、群組、還有資料夾權限來得到一個最佳解。</p>\n<details><summary>linux 權限</summary>\n<p>剛剛有提到權限 776 ，稍微講解一下，linux 的資料夾權限分：</p>\n<ul>\n<li>三個對象：\n<ul>\n<li>擁有者</li>\n<li>群組</li>\n<li>他人</li>\n</ul>\n</li>\n<li>三種權限\n<ul>\n<li>讀取(r, 4)</li>\n<li>寫入(w, 2)</li>\n<li>執行(x, 1)</li>\n</ul>\n</li>\n</ul>\n<p>如果擁有者可以讀取 &amp; 寫入，那擁有者的權限就會是 <code>4 + 2 = 6</code>。然後權限的三個數字會依序是擁有者、群組、他人，所以剛剛的 <code>776</code> 就是：</p>\n<ul>\n<li>擁有者：讀取、寫入、執行</li>\n<li>擁有群組：讀取、寫入、執行</li>\n<li>他人：讀取、寫入</li>\n</ul>\n<p>這個是 Linux 的權限表示法，可以用在更改檔案夾的權限，搭配指令 <code>chmod</code></p>\n<p>也可以用下面指令來看路徑內的檔案及資料夾的所有檔案權限：</p>\n<pre><code>ls -al /path\n</code></pre>\n<p>最前面會有一個第一次看很詭異的表現方式</p>\n<pre><code>-rwxr-xr-x.\n</code></pre>\n<p>第一個字如果是 <code>d</code>，表示是資料夾，是 <code>-</code> 表示是檔案。接下來三個一組分別表示 讀取、寫入、執行。然後三組分別是，擁有者、擁有群組、他人。</p>\n<p>所以上面就是</p>\n<ul>\n<li>不是資料夾</li>\n<li>擁有者：讀取、寫入、執行</li>\n<li>擁有群組：讀取、執行</li>\n<li>他人：讀取、執行</li>\n</ul>\n</details>\n<h3 id=\"vsftpd-%E8%A8%AD%E5%AE%9A\"><a class=\"direct-link\" href=\"#vsftpd-%E8%A8%AD%E5%AE%9A\">#</a> vsftpd 設定</h3>\n<pre><code>sudo nano /etc/vsftpd.conf\n</code></pre>\n<p>編輯設定檔。</p>\n<p>後面的設定一堆，設定原因可以看註解，或者是自己查文件。會提到自己覺得比較特別的，而且這裡是自己的設定，跟參考文章上面有點差別。有 ❗ 的部份表示我自己也沒有非常了解這些設定，但目前這樣是 OK 的，這方面希望多多交流<s>debug</s>。</p>\n<pre><code># Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n\nwrite_enable=YES\n\n\nchroot_local_user=YES                 # ❗ 讓使用者不能移開設定家目錄以外的地方，不太清楚說是不能離開家目錄還是下面的 local_root，可能需要做實驗\nlocal_root=/var/www/                  # ❗ 設定進去的資料夾，有點不清楚和家目錄的關係，但目前這樣是可以用的 XD\nallow_writeable_chroot=YES            # 可以在根目錄寫入資料\n\nlocal_umask=022                       \nfile_open_mode=0777                   \n❗ 這兩個要一起看，可以設定上傳上去檔案的權限，自己的理解是，權限會是 `file_open_mode` - `local_umask`，所以就是 777(前面的 0 這裡可以忽略) - `222` = `755`。\n\n# 設定 ftp 被動連線的端口\npasv_min_port=40000\npasv_max_port=50000\n\n\nuserlist_enable=YES                   # 啟用 userlist 來限定只有特定的用戶可以登入\nuserlist_file=/etc/vsftpd.userlist    # 使用 `/etc/vsftpd.userlist` 來作為 userlist\nuserlist_deny=NO                      # 在 userlist 代表用戶的白名單，如果是 YES 則代表黑名單\n</code></pre>\n<p>接下來建立 vsftpd.userlist</p>\n<pre><code>echo &quot;sammy&quot; | sudo tee -a /etc/vsftpd.userlist\n</code></pre>\n<p>重啟 vsftpd</p>\n<pre><code>sudo systemctl restart vsftpd\n</code></pre>\n<p>到這裡可以用新增的帳戶登入看看，可以用 filezilla 或者是看上面的參考文章</p>\n<h3 id=\"%E8%A8%AD%E5%AE%9A-ssl\"><a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A-ssl\">#</a> 設定 ssl</h3>\n<p>建立 ssl 金鑰，其實這裡的金鑰就是 certbot 發給我們的金鑰，所以搞不好也可以沿用，不用自製的？</p>\n<pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre>\n<pre><code>Output\nGenerating a 2048 bit RSA private key\n............................................................................+++\n...........+++\nwriting new private key to '/etc/ssl/private/vsftpd.pem'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:NY\nLocality Name (eg, city) []:New York City\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:DigitalOcean\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []: your_server_ip\nEmail Address []:\n</code></pre>\n<p>然後又是改設定了</p>\n<pre><code># rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\n# rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\n# 這兩行預設值註解掉\n\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\n# 用自己的金鑰比較有感情\n\nssl_enable=YES\n\nallow_anon_ssl=NO               # 禁止匿名用戶\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\n\nrequire_ssl_reuse=NO            \n\n\n# ❗ 下面的我沒有設定但文章有，之前設定好像怪怪的... 但不太清楚原因，可以試試看\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nssl_ciphers=HIGH\n</code></pre>\n<p>加上前面的設定，自己的設定檔是這樣的（去掉註解）</p>\n<pre><code>listen=NO\nlisten_ipv6=YES\nanonymous_enable=NO\nlocal_enable=YES\nwrite_enable=YES\nlocal_umask=022\nfile_open_mode=0777\ndirmessage_enable=YES\nuse_localtime=YES\nxferlog_enable=YES\nconnect_from_port_20=YES\n chroot_local_user=YES\nsecure_chroot_dir=/var/run/vsftpd/empty\npam_service_name=vsftpd\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nuserlist_enable=YES\nuserlist_file=/etc/vsftpd.userlist\nuserlist_deny=NO\nrequire_ssl_reuse=NO\nlocal_root=/var/www/\nallow_writeable_chroot=YES\npasv_min_port=40000\npasv_max_port=50000\n</code></pre>\n<p>至少這樣設定應該是沒問題啦。如果一樣了，還不能用就可能是其他問題，可能像是：</p>\n<ul>\n<li>防火牆</li>\n<li>AWS 的 SG</li>\n<li>檔案夾的權限</li>\n<li>帳戶的權限</li>\n</ul>\n<p>上面都是我遇過的問題 😥。最後再 <code>sudo systemctl restart vsftpd</code></p>\n<p>好了之就可以用 filezilla 登入看看了。會跳出說可疑的證書（親手製作的證書被說可疑太傷心了），大方給他按 ok 平反下去，就可以登入啦。</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<p>統整一下參考資料</p>\n<p>LEMP server\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-ubuntu-18-04</a></p>\n<p>phpmyadmin\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-with-nginx-on-an-ubuntu-18-04-server\">https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-phpmyadmin-with-nginx-on-an-ubuntu-18-04-server</a></p>\n<p>https\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-18-04</a></p>\n<p>mysql 權限\n<a href=\"https://zhuanlan.zhihu.com/p/55798418\">https://zhuanlan.zhihu.com/p/55798418</a>\n如果是 localhost 就表示只能從本地登入（phpmyadmin 也是）如果是 % 就代表全部</p>\n<p>新增 ssh 的 short cut，文中沒提到，可以自己弄看看，很方便\n<a href=\"https://scotch.io/tutorials/how-to-create-an-ssh-shortcut\">https://scotch.io/tutorials/how-to-create-an-ssh-shortcut</a></p>\n<p>FTP server\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04\">https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04</a></p>\n<p>openssl 的文章\n<a href=\"https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs\">https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs</a></p>\n<h2 id=\"%E5%85%B6%E4%BB%96%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96%E5%95%8F%E9%A1%8C\">#</a> 其他問題</h2>\n<p>❓ 什麼是 SSH\nSsh (Secure Shell) 是一種協定，可以用來作為 client 跟 server 的連接，簡單說就是可以讓我們安全的登入 Server。</p>\n<p>❓ security group 跟 linux 裡面的 firewall （像是 ufw 等）有甚麼差別？</p>\n<p>功能上類似，主要是在 server 的哪個環節阻擋的問題。防火牆是可以阻擋網路傳輸內容工具的統稱，實際上可以在很多不同網路的層面來實現這個功能，可能是從 router 就開始阻擋（就是你國小電腦課老師開的東西），或者是運用系統內建的軟體來阻擋（windows 常常莫名其妙跳出來的東西）。</p>\n<p>linux 的內核有提供稱作 netfilter 的模組來阻擋或者說過濾網路傳輸的內容，也就是剛剛提到的軟體防火牆（應該是，有錯在麻煩更正），而操作 netfilter 這個防火牆的介面就是 iptable。因為直接操作 iptable 很麻煩，所以就有了一個 ufw （uncomplicated firewall）來讓我們這些菜鳥也能夠好好的操作 netfilter。</p>\n<p>而 security group 就是在 VPS 外面，AWS 所提供的防火牆，功能跟 ufw 是一樣的。</p>\n<p>參考資料：\n<a href=\"https://serverfault.com/questions/884156/difference-between-security-groups-on-aws-and-iptables\">https://serverfault.com/questions/884156/difference-between-security-groups-on-aws-and-iptables</a>\n<a href=\"https://serverfault.com/questions/286665/why-have-both-security-groups-and-iptables-on-amazon-ec2\">https://serverfault.com/questions/286665/why-have-both-security-groups-and-iptables-on-amazon-ec2</a>\n<a href=\"https://www.awsforbusiness.com/aws-security-groups-different-firewalls/\">https://www.awsforbusiness.com/aws-security-groups-different-firewalls/</a>\n<a href=\"https://medium.com/awesome-cloud/aws-difference-between-security-groups-and-network-acls-adc632ea29ae\">https://medium.com/awesome-cloud/aws-difference-between-security-groups-and-network-acls-adc632ea29ae</a></p>\n<h2 id=\"%E6%84%9F%E6%83%B3\"><a class=\"direct-link\" href=\"#%E6%84%9F%E6%83%B3\">#</a> 感想</h2>\n<blockquote>\n<p>如果你這週是順利的，未來某一天你一樣會經歷這個崩潰的過程。如果你這週本來就很崩潰，放心，以後還有更多讓你崩潰的事。<br>\n- Huli</p>\n</blockquote>\n<p>好吧這裡先崩潰一次了... 往好處想，至少之後可能不會遇到這麼崩潰的事情（立 flag）</p>\n",
      "date_published": "2021-10-17T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/react-ref-reference/",
      "url": "https://lavi-blog.vercel.app/posts/react-ref-reference/",
      "title": "React Ref 的一點研究",
      "content_html": "<!-- summary -->\n<!-- 除了拿 DOM element 還有存變數外，更全面的了解 Ref 一點點 -->\n<!-- summary -->\n<h1 id=\"react-ref-%E7%9A%84%E4%B8%80%E9%BB%9E%E7%A0%94%E7%A9%B6\"><a class=\"direct-link\" href=\"#react-ref-%E7%9A%84%E4%B8%80%E9%BB%9E%E7%A0%94%E7%A9%B6\">#</a> React Ref 的一點研究</h1>\n<blockquote>\n<p>A JavaScript library for building user interfaces</p>\n</blockquote>\n<p>React 是狀態和 UI 的 Library 我們都知道，使用了 React 可以這樣思考：每一個狀態都會產生出對應的 UI。使用了 React 之後，就很少使用像是 DOM 的原生 API 來操作元素了，但還是會有需要直接從 DOM 元素取得資料或者是操作的情境，這時候就是使用 ref 的時候。</p>\n<p>React ref 就是一個可以直接操作 DOM 的出口，透過 <code>createRef</code> / <code>useRef</code>，以及將 ref 作為 props 放入 DOM element ，能透過 ref 直接操作 DOM。就像下面 React <a href=\"https://reactjs.org/docs/hooks-reference.html#useref\">官方文件</a> 中 hooks 的範例：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">TextInputWithFocusButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> inputEl <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onButtonClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// `current` points to the mounted text input element</span><br>    inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputEl<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Focus the input<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>我們直接透過 <code>input.current</code>，來使用 DOM 的 method。雖然上面是 Hooks 的範例，但其實在 Class component 也沒什麼不同，只是從在 function 中宣告變數變成 class 的內部屬性而已。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TextInputWithFocusButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inutEl <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <br>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token function\">onButtonClick</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputEl<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>inputEl<span class=\"token punctuation\">}</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onButtonClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Focus the input<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>另外一個會用到的 ref 的地方是，當你希望儲存一個不會影響 ui 的狀態的時候。在 React 中，每次 state 的改變都會造成 Rerender，進而改變 UI，但並不是每次都會想要這樣。這時候就能夠把值儲存在 ref 裡面：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">notRefreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> counterRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tcounterRef<span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span>\t<br>\t<span class=\"token punctuation\">}</span>\t<br>\t<br>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onPrint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<br>\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t\t<span class=\"token operator\">&lt;</span>button <span class=\"token parameter\">onClick</span><span class=\"token operator\">=></span>add <span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>好的，比較基本的用法大概就是這樣了，那可以來談談一些比較有趣的用法。</p>\n<h2 id=\"callback-ref\"><a class=\"direct-link\" href=\"#callback-ref\">#</a> Callback Ref</h2>\n<p>剛剛我們在使用 ref 的時候可以分為兩種用法</p>\n<ol>\n<li>透過將 ref 放入 react element（jsx 語法建立的）的 props，可以操作 element 上面的方法或者讀取屬性。</li>\n<li>儲存不影響 UI 的值。</li>\n</ol>\n<p>雖然講的是 ref，但其實第一種用法我們是透過兩個東西來做到的：</p>\n<ul>\n<li>create Ref 的 API，不論是 <code>React.createRef</code> 還是 <code>React.useRef</code></li>\n<li>React element 上面的  ref 屬性</li>\n</ul>\n<p>然而 React element 的 ref 屬性除了接受 <code>createRef</code> / <code>useRef</code>  以外，還可以接受function 的形式，\t並能夠帶來更大的彈性。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">function</span> <span class=\"token function\">AutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">autoFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      element<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>autoFocus<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>上面是個應用 callback ref 的小小範例，改寫自 react 官方文件，除了 component 第一次被 render 時會 auto focus 之外。當按下 refresh 時（ <code>useState</code> 這樣的用法可以在 <a href=\"https://zh-hant.reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\">React FAQ</a> 中看到），整個 component 重新 render 也會自動 focus 在 input 上面。</p>\n<p>callback ref 是什麼？從他的名字上面就可以知道他其實是一個 callback function，那麼會在什麼時候被執行？</p>\n<blockquote>\n<p>React will call the <code>ref</code> callback with the DOM element when the component mounts, and call it with <code>null</code> when it unmounts. Refs are guaranteed to be up-to-date before <code>componentDidMount</code> or <code>componentDidUpdate</code> fires.</p>\n</blockquote>\n<p><a href=\"https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\">文件</a>中裡面提到了， callback ref 會在兩種情況被呼叫。</p>\n<ul>\n<li>DOM element 被 mount 上 component 的時候：執行  <code>callbackRef(element)</code></li>\n<li>DOM element 被 unmount 的時候：執行 <code>callbackRef(null)</code></li>\n</ul>\n<p>在時機上，其實有點像 useEffect 的 callback 中 return 的 cleanup function，或者說是 componentDidMount 還有 componentDidUnmount 會更準確。</p>\n<p>不過在<a href=\"https://reactjs.org/docs/refs-and-the-dom.html#caveats-with-callback-refs\">文件</a>中有使用 callback ref 的注意事項：</p>\n<blockquote>\n<p>If the <code>ref</code> callback is defined as an inline function, it will get called twice during updates, first with <code>null</code> and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one. You can avoid this by defining the <code>ref</code> callback as a bound method on the class, but note that it shouldn’t matter in most cases.</p>\n</blockquote>\n<p>文件中提到如果使用 inline function 作為 callback ref 時，每次 rerender 都會呼叫兩次，一次是 callbackRef(null)，一次是 callbackRef(element)。原因是因為每次都會建立新的 function，所以要清理舊的 function 然後設定新的。</p>\n<p>雖然我自己沒有很清楚為什麼清理舊的 function 就必須執行 callback。但這個原因讓我們在使用 callback ref 的時候需要注意這種情形：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">InlineAutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>\t<span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"App\"</span><span class=\"token operator\">></span><br>\t  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>\t  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>如果像上面那樣是會報錯的，因為在 rerender 時第一次時 element 為 null，當然沒有 focus 給你用。</p>\n<p>隨後有提到一種解決方法，換成 class component，然後把 方法 bind 在 class 上面，<s>但沒有人會想要再回去寫 Class component</s>。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rerender <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rerender</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">rerender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">forceUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">focusRef</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  \tele<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span> <br><br>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>        <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>focusRef<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rerender<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>為什麼這樣就可以了呢？因為 callback ref 永遠指向同一個 function，也就是 <code>ClassComp</code> 產生的 instance 中的 <code>focusRef</code> 這個 function，而沒有建立新的，因此就不會發生 cleanup 的狀況。</p>\n<p>但即使是這樣，React  element 被 unmount 時還是會呼叫 <code>callbackRef(null)</code> ，這樣的狀況還是會找不到 <code>ele.focus</code> 而報錯。</p>\n<p>所以比較簡單，也比較保險的方式是這樣，加個 if 就好，這樣是 null 就會自動忽略：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">InlineAutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t  <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><br>\t\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>\t\t  <span class=\"token punctuation\">}</span><br>\t  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>\t  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br><span class=\"token punctuation\">}</span></code></pre>\n<p>值得一提的是，雖然文件上只提到 inline 的 callback function 會有這個問題，但其實在 function component 中，即使使用變數也會遇到一樣的問題，我們拿前面提到的例子。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">function</span> <span class=\"token function\">AutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">autoFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      element<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>autoFocus<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>因為 callback ref 一樣是在 function component 被 render 的時候才被建立的，每次被帶進去 input 時一樣是不同的 function。</p>\n<p>那想要在 function component 中也想要做到 class component 的效果要怎麼做？既然要保持相同，最直覺的作法就是 <code>useCallback</code> 了</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">function</span> <span class=\"token function\">AutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">const</span> autoFocus <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      element<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>autoFocus<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>除此之外，因為沒有用到 component 內部的屬性， 所以這樣處理也是可行的，把 callback ref 提到外層。提到外層後就永遠指向同一個 function 了，能夠避免在沒有 mount / unmount 也呼叫的問題。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">autoFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  element<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">AutoSelectInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>autoFocus<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>refresh<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"callback-ref-%E7%94%A8%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F\"><a class=\"direct-link\" href=\"#callback-ref-%E7%94%A8%E5%9C%A8%E5%93%AA%E8%A3%A1%EF%BC%9F\">#</a> Callback Ref 用在哪裡？</h3>\n<p>在剛剛的範例中，我們使用 callback ref 來讓 input 元素自動 focus，而除了這樣的用法之外，在 React 的<a href=\"https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\">文件</a>中也有提到可以用來拿取 DOM element 的元素資訊。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MeasureExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">,</span> setHeight<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">const</span> measuredRef <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">node</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>    <br>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>      <br>\t\t  <span class=\"token function\">setHeight</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getBoundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <br>\t  <span class=\"token punctuation\">}</span>  <br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>h1 ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>measuredRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> world<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>      <br>\t  <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>The above header is <span class=\"token punctuation\">{</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>px tall<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>自己對於 callback Ref 的理解是，父層能夠用 callback Ref 的方式，能夠在 DOM element 還是 React element，設定 mount / unmount 時的 callback function。在下面的範例中：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rerender\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"effect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"layout effect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cb1\"</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello Ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>input<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cb2\"</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>div<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cb3\"</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>click<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>PassRef<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cb4\"</span><span class=\"token punctuation\">,</span> ele<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>ClassComp<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ins</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cb5\"</span><span class=\"token punctuation\">,</span> ins<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"component-%E7%9A%84-ref\"><a class=\"direct-link\" href=\"#component-%E7%9A%84-ref\">#</a> Component 的 ref</h2>\n<p>剛剛提到的兩種用法是</p>\n<ol>\n<li>ref 綁定在 DOM element 上，可以使用\n<ol>\n<li>object</li>\n<li>callback</li>\n</ol>\n</li>\n<li>ref 作為不會 rerender 的 mutable object</li>\n</ol>\n<p>那 ref 可以綁定在 Component Element 上嗎？可以的。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>addCount <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addCount</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>\t<br>  <span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\t<br>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> ref<span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addConntFromParent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>Child ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addConntFromParent<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>add count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>透過 ref，我們可以拿到 <code>ClassComp</code>  的 instance 本身，而且還可以透過 instance 來操作 <code>ClassComp</code>，換句話說，我們可以在 Parent 操作 child component 內部的狀態。</p>\n<p>function component 也可以做到這點，但是要透過 <code>useImperativeHandle</code> 這個 API。如果用上面那個範例但是改成 function component 的話：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">const</span>  <span class=\"token function-variable function\">Child</span> <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>passRef<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>passRef<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function-variable function\">addCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\t<br>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> ref<span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addCountFromParent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>Child passRef<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addCountFromParent<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>add count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>因為 function component 本身不像 class component 一樣能夠產生 instance 儲存狀態，我在我們需要透過 useImperativeHandle，並透過第二個參數的 function 建立一個 instance 給 parent 的 ref。</p>\n<p>從這點就可以看到，我們可以自由決定需要公開的介面給 parent，這點比起 class component 完全公開 instance 內部的 property / method 來的更加安全，也帶有一點物件導向的味道。</p>\n<p>但是在上面的範例可以看到我們的 <code>Child</code> 接收的是 passRef 這個 props 而不是 ref。原因是如果直接使用 ref 的話在預設狀況是會如 class component 的行為一樣綁定 instance 到 ref 上面。但是 function component 和 class component 處理方式不同，在這個部分會報錯。</p>\n<pre><code>Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n</code></pre>\n<p>所以上面的範例才會使用 <code>passRef</code> 而不能直接使用 ref 來傳送進去 component。因此我們會需要 React .forwardRef 讓 function component 也能夠送 ref 進去。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function-variable function\">addCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br>\t<br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\t<br>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">const</span> ref<span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addCountFromParent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\tref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">.</span><span class=\"token function\">addCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>Child ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>addCountFromParent<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>add count<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使用了 forwardRef 這個 HOC 包住 function component 之後，就能用第二個參數來接收 ref，這樣我們可以把 ref 傳進去給 useImperativeHandle 使用了。</p>\n<h2 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> 總結</h2>\n<p>說實在這篇文章的內容幾乎都是文件上面有的東西，只是和 Ref 有關的 API 不少，再加上相關的資訊散佈再放在文件的各處，就對 Ref 比較難有全面的了解。</p>\n<p>這篇看起來落落長，不過對於 Ref 這裡這樣理解：</p>\n<ul>\n<li>是建立一個 mutable 的 object\n<ul>\n<li><code>React.createRef</code>：使用在 class component</li>\n<li><code>useRef</code>：使用在 function component</li>\n</ul>\n</li>\n<li>React element（包含 DOM、Function component 和 Class component）上的 ref 屬性\n<ul>\n<li>可以說是 component 在 mount / unmount 的 callback\n<ul>\n<li>在帶入 function時，會在 mount 時執行 <code>callbackRef(node)</code>，而在 unmount 時執行 <code>callbackRef(null)</code>。\n<ul>\n<li>如果 rerender 前後是不同的 callback ref function，會進行 cleanup 執行 callback function。</li>\n<li>DOM element 的 node 會是 element 本身</li>\n<li>Function component 的 node 會是 useImparativeHandle 第二個參數的 return 值</li>\n</ul>\n</li>\n<li>在帶入 object 時，會自動執行 <code>(ele) =&gt; {object.current = ele}</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E4%B8%80%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E7%99%BC%E7%8F%BE%E5%92%8C%E7%8C%9C%E6%83%B3\"><a class=\"direct-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E7%99%BC%E7%8F%BE%E5%92%8C%E7%8C%9C%E6%83%B3\">#</a> 一些奇怪的發現和猜想</h2>\n<p>在研究 ref 的時候做了些實驗，不過以目前對 react  的理解也還沒辦法解釋，或者有些東西目前只能做猜想沒辦法做證實（要證實只能看 source code 了，但目前看不太懂），所以就放在這邊，如果讀者們能夠解釋或者有想法的話歡迎提點或者是討論。</p>\n<h3 id=\"%E9%97%9C%E6%96%BC-callback-ref-%E5%92%8C-component-%E6%9C%AC%E8%BA%AB-lifecycle-%E7%9A%84%E9%A0%86%E5%BA%8F\"><a class=\"direct-link\" href=\"#%E9%97%9C%E6%96%BC-callback-ref-%E5%92%8C-component-%E6%9C%AC%E8%BA%AB-lifecycle-%E7%9A%84%E9%A0%86%E5%BA%8F\">#</a> 關於 callback ref 和 component 本身 lifecycle 的順序</h3>\n<p>我們把 給予 ref 的 Component 稱作 Parent，而接受 ref 的稱作 Child。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>\t\t<span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>\t\t\t<span class=\"token operator\">&lt;</span>FuncChild<span class=\"token operator\">/</span><span class=\"token operator\">></span><br>\t\t\t<span class=\"token operator\">&lt;</span>ClassChild<span class=\"token operator\">/</span><span class=\"token operator\">></span><br>\t\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>\t<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>我們都知道不管是 function component 還是 class component 本身都有所謂的 lifecycle / effect，會在 component 本身 render 結束之後被執行。自己蠻好奇說這些 lifecycle 和 callback ref 之間的執行順序是怎麼樣的，所以寫了下面這個實驗：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span>  FuncChild <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">fowardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func effect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token function\">useLayoutEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func layoutEffect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>\t<span class=\"token function\">useImperativeHandle</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'func useImperativeHandle'</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>FuncComp<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassChild</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class componentDidMount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>ClassComp<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div ref\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>ClassChild<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class ref\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>FuncChild<br>        ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func ref\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre><code>class componentDidMount\nclass ref\nfunc layout effect\nfunc useImpaertive\nfunc ref\ndiv ref\nfunc effect\n</code></pre>\n<p>首先比較可以理解的是各個 element 的 ref 被 print 出來的順序：</p>\n<ol>\n<li>class component</li>\n<li>function comonent</li>\n<li>div</li>\n</ol>\n<p>class component 在 function component 前，所以這個順序理所當然。而因為 div 在外層，所以會等 children 被 render 完之後才會被 mount 上去，在最後很合理。</p>\n<p>再來是 class component 的 ref 和 lifecycle 的順序。對於 class component 太不熟了，而且也蠻懶得去找資料，但可以理解的是會先執行完 component 內部的 lifecycle，然後才被 mount 上去 Parent component，所以才會是這樣的執行順序。</p>\n<p>最後是 function component。第一點是 useLayoutEffect 的執行會在 ref 前面，layoutEffect 會在 DOM paint 後執行，這個部分覺得蠻合理的，而且文件也有提到 useLayoutEffect 觸發的時間點和 componentDidMount 相同。</p>\n<p>最疑惑的是這點，useEffect 的觸發點在 callback ref 後面是可以預期的，會在 paint 之後。但這個結果代表說不只是在 component paint 之後，而是在整個 app 被重新 paint 之後（在 div ref 後面）。</p>\n<p>這個研究大概就到這邊了，關於 useEffect 的執行時機點，Child / Parent 被 render 還有 paint 的順序，甚至還有 hook 是在什麼時間被執行的，這些概念目前似乎都很模糊，還需要更多理解。</p>\n<h3 id=\"%E7%B4%94%E6%89%8B%E5%B7%A5-ref\"><a class=\"direct-link\" href=\"#%E7%B4%94%E6%89%8B%E5%B7%A5-ref\">#</a> 純手工 ref</h3>\n<p>我們真的需要 createRef / useRef？</p>\n<pre class=\"language-js\"><code class=\"language-js\"><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassComp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>      current<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> show<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printRef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">printRef</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">printRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> show <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> show<span class=\"token operator\">:</span> <span class=\"token operator\">!</span>show <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h1 ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token number\">123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><br>        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>print<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>        <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>toggle<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  current<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">FuncComp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>show<span class=\"token punctuation\">,</span> setShow<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token function\">setShow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">printRef</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token punctuation\">{</span>show <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">&lt;</span>h1 ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>h1<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>printRef<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>print ref<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>toggle<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>toggle<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>這兩個範例都是沒問題的，不論是在  <code>h1</code>  有沒有 show 的狀態都可以正常的表現 ref 為 element / null。那為什麼會需要這兩個 api？useRef 或者是 React.createRef 是不是有做一些其他的事情？可能需要再研究了。</p>\n<h3 id=\"%E4%B8%8D%E4%BD%BF%E7%94%A8-useinperativehandle-%E4%BE%86%E5%81%9A%E7%B6%81%E5%AE%9A%E7%9A%84%E8%A9%B1%E6%9C%83%E6%80%8E%E9%BA%BC%E6%A8%A3%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E4%B8%8D%E4%BD%BF%E7%94%A8-useinperativehandle-%E4%BE%86%E5%81%9A%E7%B6%81%E5%AE%9A%E7%9A%84%E8%A9%B1%E6%9C%83%E6%80%8E%E9%BA%BC%E6%A8%A3%EF%BC%9F\">#</a> 不使用 useInperativeHandle 來做綁定的話會怎麼樣？</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">forwardRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> ref</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> setState<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toggle</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>state<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">}</span><br>  ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> toggle<span class=\"token punctuation\">;</span><br>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func\"</span><span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">+</span> <span class=\"token string\">''</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>_<span class=\"token punctuation\">,</span> refresh<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">click</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ref <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">.</span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>Child ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>ref<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>refresh<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>rerender<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>click<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>toggle<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><br>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><s>到底是為什麼要一直不照文件的做</s>。用上面的作法，完全不使用 useImperativeHandle 這個 api，自己把 component 內的 setState 綁定到 <code>ref.current</code> 上面，這樣的用法也是沒問題的，不過也不清楚原因就是了。</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<p>其實也不過都是文件而已</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html\">Hooks API Reference</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\">How can I measure a DOM node?</a></li>\n<li><a href=\"https://reactjs.org/docs/react-api.html#reactforwardref\">React.fowardRef</a></li>\n<li><a href=\"https://reactjs.org/docs/refs-and-the-dom.html\">Refs and the DOM</a></li>\n<li><a href=\"https://reactjs.org/docs/forwarding-refs.html\">Forwarding Refs</a></li>\n</ul>\n",
      "date_published": "2021-09-27T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/deploy-and-cloud/",
      "url": "https://lavi-blog.vercel.app/posts/deploy-and-cloud/",
      "title": "從本地到雲端，淺談部署和各種部署姿勢",
      "content_html": "<h2 id=\"deploy-%E6%98%AF%E4%BB%80%E9%BA%BC\"><a class=\"direct-link\" href=\"#deploy-%E6%98%AF%E4%BB%80%E9%BA%BC\">#</a> Deploy 是什麼</h2>\n<p>如果拿 Server 來舉例（本篇主要講的內容也是指 server）， server 基本上就是一個程式，而這個程式運行之後其他人就可以透過網路連線到 Server 來拿資料。而 Deploy，也就是部署，可以視為將已經寫好的程式使其運行的過程。</p>\n<p>可以這樣想，你今天在工廠製造了一台飲料販賣機，把這台販賣機搬到它應該被使用的位置，可能是籃球場旁邊，或者是河濱公園。但你的任務並不只是把它搬過去而已，所以你可能還要找電源幫它插電，甚至第一次還會需要幫它補充飲料，做一些設定等等。這些流程都在部署的範圍。</p>\n<p>但是在軟體上面的部署不用插電，而是需要設定我們使用的電腦，像是安裝作業意系統等，並且在電腦上處理好執行軟體需要的一些設定、或者是執行環境，最後在電腦上執行自己開發的程式。</p>\n<h2 id=\"%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E7%9A%84%E5%BD%B1%E9%9F%BF\"><a class=\"direct-link\" href=\"#%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E7%9A%84%E5%BD%B1%E9%9F%BF\">#</a> 部署方式的影響</h2>\n<p>延續剛剛的比喻，你的飲料販賣機可能以不同的方式供電，<code>220V</code> 或者是 <code>110V</code>，甚至也可能可以吃直流電（比喻），但這些都不影響販賣機的功能還有提供的服務。不過不同的供電方式可能會帶來不同的優缺點像是攜帶性、經濟性等等。部署也一樣，不同的方式帶來的差異並不會影響 Server 的功能，但會影響到的會是：</p>\n<ul>\n<li>你的荷包或者說你老闆的荷包</li>\n<li>可擴充性</li>\n<li>部署的複雜度</li>\n<li>穩定度</li>\n<li>還有很多很多...</li>\n</ul>\n<p>而這些就是在選擇部署方式時需要去做的 Trade-off。那下面會簡單的介紹不同部署方式的一些特性，以及提一下有哪些產品屬於這些方式。</p>\n<h2 id=\"%E5%90%84%E7%A8%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E5%90%84%E7%A8%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F\">#</a> 各種不同的部署方式</h2>\n<h3 id=\"%E6%9C%AC%E5%9C%B0\"><a class=\"direct-link\" href=\"#%E6%9C%AC%E5%9C%B0\">#</a> 本地</h3>\n<p>簡單說就是部署在你自己的電腦，一台真正你看得到、摸的到，還要幫它插電插網路線的電腦。當然現在已經比較少人這麼幹，大家都丟在各種雲端服務上面，但這麼 old school 的方式還是有他永遠無法取代的特點。</p>\n<blockquote>\n<p>你擁有自己的程式，而不是掌控在別人的手上</p>\n</blockquote>\n<p>把自己的東西緊握在手中，難道不是一種浪漫嗎？</p>\n<p>當然，浪漫要付出的代價可不小，得處理很多問題：像最初需要面臨的就是固定 IP、找個不會被踢到的地方放你的電腦、穩定的供電來源等等。其實如果能解決，部署一些小型的服務像 Blog 等並不是太差的選擇，而且還可以真正的去學習如何去設定 Linux、安裝環境等。</p>\n<p>但如果你只是想要簡單弄一個部落格，甚至是有商業上的需求，這已經不是推薦的作法了。畢竟雲端部署已經方便的太多。</p>\n<h3 id=\"%E9%9B%B2%E7%AB%AF%E4%B8%BB%E6%A9%9F\"><a class=\"direct-link\" href=\"#%E9%9B%B2%E7%AB%AF%E4%B8%BB%E6%A9%9F\">#</a> 雲端主機</h3>\n<p>這就是很常聽到的 IaaS （Infrastructure as a Service，基礎建設即服務），基本上就是租電腦。你不用真正買一台電腦，選好自己需要的規格，像是 CPU 的核心數、記憶體的容量、硬碟的容量等，就能夠建立 instance（instance 就是我們租的電腦）。就像自己的電腦一樣，可以讓 server、資料庫或者是任何的程式在上面運行，雲端有很多好處：</p>\n<ol>\n<li>方便，你不用插電。辦個會員填個信用卡資料就好</li>\n<li>可靠性，你不會踢到插頭或者是機櫃</li>\n<li>便宜，同樣規格的主機你自己買起來至少也要破千</li>\n<li>彈性，想關就關、想擴充就擴充</li>\n<li>幫你弄好固定 IP，甚至還有 https</li>\n</ol>\n<p>而雲端主機的服務有：</p>\n<ul>\n<li>AWS 的 EC2（Amazon Elastic Compute Cloud）</li>\n<li>Google 的 Compute engine</li>\n<li>Azure Virtual Machined</li>\n<li>DigitalOcean Droplets</li>\n<li>Linode</li>\n</ul>\n<p>當然還有很多很多，族繁不及備載。</p>\n<p>雲端主機就像自己的電腦一樣。大部份的雲端主機都是會安裝好 OS 的，使用者可以透過 ssh 連線到 instance，然後使用 CLI 介面操作，來設定對應的執行環境，例如 node 等等。如果是當作網站的 Server 使用的話，還會需要設定像是防火牆，網路連線等等的東西才能夠讓外部網路連線雲端主機。然而這些設定並不容易，尤其是對於 Linux 生態不熟悉的使用者來說。</p>\n<p>除此之外，擴展性也是個問題，畢竟這就是一台電腦，就像如果你想要幫你的電腦換 CPU 或者是更大的 RAM，你就必須把主機關機，而雲端主機同樣的也需要主動的 terminate instance（終止實例，就是電腦關機），而關機就代表著無法提供 Server 的服務。（當然，可以透過多台電腦維持服務不中斷，不過不是這裡討論的範疇。）</p>\n<p>IaaS 雲端主機可以說是其他部署服務的基礎。在 IaaS 的基礎上，服務幫你多做一些事情，而想要建立下一個 Facebook 的你就可以少做一些事情，還能夠有更高的擴展性、更方便的佈署方式。這就是接下來的其他服務。</p>\n<figure tabindex=\"1\"><img src=\"https://azurecomcdn.azureedge.net/cvt-665f0680393306b6d0a912671748e5cca6b061d55ecee48d4f985eaa8e15e6bf/images/page/overview/what-is-iaas/iaas-paas-saas.png\" alt=\"\"><figcaption>Azure 的雲端服務類型</figcaption></figure>\n<h3 id=\"paas\"><a class=\"direct-link\" href=\"#paas\">#</a> PaaS</h3>\n<p>PaaS，Platform as a Service，平台即服務。設定環境真的很麻煩，我們都懂。有沒有一個地方能夠只讓我丟上去程式碼就可以執行，減少設定環境方面等等的事情？</p>\n<p>在 PaaS 服務裡面你不會需要親自去下載那些環境（例如 node），透過描述檔的方式來設定，而 PaaS 的服務就會依照你的描述檔幫你安裝環境，處理前面提到的網路連線等等的問題，並自動部署運行在前面提到的雲端主機上。</p>\n<p>環境的描述檔就像是這樣：</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># [START django_app]</span><br><span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python37<br><br><span class=\"token key atrule\">handlers</span><span class=\"token punctuation\">:</span><br><span class=\"token comment\"># This configures Google App Engine to serve the files in the app's static</span><br><span class=\"token comment\"># directory.</span><br><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /static<br>  <span class=\"token key atrule\">static_dir</span><span class=\"token punctuation\">:</span> static/<br><br><span class=\"token comment\"># This handler routes all requests not caught above to your main app. It is</span><br><span class=\"token comment\"># required when static routes are defined, but can be omitted (along with</span><br><span class=\"token comment\"># the entire handlers section) when there are no static files defined.</span><br><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /.*<br>  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> auto<br><span class=\"token comment\"># [END django_app]</span></code></pre>\n<p>此外因為服務會自動幫你執行，所以能夠作到自動擴展。在你的 Server 需要的記憶體不夠時，能夠從 2G 自動升級 4G，在過剩時又能夠降回 2G。可以作到以時間，甚至流量為分割粒度來設定需求。</p>\n<p>總而言之，你只是把你的程式「部署」（某方面來說，甚至可以看做是簡單的「上傳」）到服務上，並寫好環境的描述檔，服務就會幫你處理好一切，Magic～</p>\n<p>而這類型的服務有：</p>\n<ul>\n<li>GCP App engine</li>\n<li>AWS Elastic Beanstalk</li>\n<li>Azure App Service</li>\n<li>Heroku</li>\n<li>Vercel</li>\n<li>還有很多很多...</li>\n</ul>\n<p>但這種很方便的東西一定是有 trade-off 的，一個是這樣的服務能提供的環境類型有限，如果有一位大神用 C++ 寫 Server，那這樣冷門的環境服務就大部分沒辦法提供，再來環境類型有限也意味著控制程度有限，沒辦法作到更詳細的設定。</p>\n<p>面對這樣的問題，容器化技術（Containerization）正好可以解決這樣的問題，而目前最知名的就是大名鼎鼎的 Docker。那什麼是 Docker 呢？</p>\n<h4 id=\"%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93%E8%88%87-docker\"><a class=\"direct-link\" href=\"#%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E8%A1%93%E8%88%87-docker\">#</a> 容器化技術與 Docker</h4>\n<p>在過去，想要開一家餐廳就必須租一間店面、牽水電、弄灶台流理台櫃台、放置座椅等等。而如果我們的店要搬遷絕對是非常麻煩的事情，光設備就很有可能一台卡車搬不完了，更何況到新的店面還是需要牽水電、佈置電燈之類的。</p>\n<p>但如果只是要開一家小店，可能不用那麼累？我們都看過在路邊賣著漢堡而且讓你流口水的美式餐車，餐車可以使用發電機、攜帶水箱，還有使用攜帶式的爐灶。重點是，這些東西都被放在一台可愛的小卡車上，想去哪裡開店，就去哪裡開店。</p>\n<p>Docker 也是一樣的道理。我們可以把部署所需要的程式碼以及對應的環境，包含作業系統（ubuntu、Debian、Arch ...）、語言的執行環境（Node...）等等。通通包在一起丟到一個容器裡面，就像餐車把需要的設備通通放在卡車上一樣。有了這個容器，我們就不需要再設定環境了，想去哪台 server ，直接執行包好的容器就 OK 。</p>\n<p>這個概念特別適合 PaaS 的服務，原本 PaaS 只能提供特定環境，但有了 Docker，就可以脫離服務的限制，隨心所欲的將自己需要的環境包進 Docker，就能作到想幹嘛就幹嘛。</p>\n<p>大部分 PaaS 服務也除了內建的環境以外，都會提供使用 Docker 來作到更彈性的設定，像 GCP App engine 就可以使用下面的設定來使用 Docker。</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> flex</code></pre>\n<p>而 AWS 的 Elastic Beanstalk 也能夠設定<a href=\"https://docs.aws.amazon.com/zh_tw/elasticbeanstalk/latest/dg/create_deploy_docker.html\">使用 Docker Image 來部署</a>，如果想要更精準的控制容器像是停止、啟動等等，則可以使用 <a href=\"https://aws.amazon.com/tw/ecs/faqs/\">Elastic Container Service</a>。</p>\n<h4 id=\"kubernetes\"><a class=\"direct-link\" href=\"#kubernetes\">#</a> Kubernetes</h4>\n<p>Kubernetes，唸作哭ㄅ捏題絲，簡稱 K8s。講到 Docker 就會有人提到 K8s，然後就會有人說：</p>\n<blockquote>\n<p>You don't F**kin need Kubernetes</p>\n</blockquote>\n<p>沒有很了解說具體 K8s 能作到哪些，但簡單可以想像成管理多個 Docker 的工具。各大廠也提供了服務，能夠執行 K8s 的 CaaS（Container as a Service）服務。像是：</p>\n<ul>\n<li>Google Kubernetes Engine</li>\n<li>Amazon Elastic Kubernetes Service</li>\n<li>Azure Kubernetes</li>\n</ul>\n<h3 id=\"faas\"><a class=\"direct-link\" href=\"#faas\">#</a> FaaS</h3>\n<p>PaaS 還是有他的問題在。過去我們使用 Server 會讓 Server 運行，等待 Request 後再回傳 Response。但在沒有接收到 Request 時，就 Server 只是待命而已，並沒有實際的使用。但主機的錢還是照樣計算，要知道在雲端上，每一秒都是錢阿！</p>\n<p>於是就有了 FaaS （Function as a Service）的出現。這樣的服務同樣幫你做好環境了，也同樣只需要上傳程式碼。但不同的是，Function 並不是常時運行的。Function 能夠依照特定的事件（像是定時、或者是 Request 等）來去執行你設定好的程式。</p>\n<p>這樣的模式已經離和我們過去的方式大不相同了。過去我們有點像我們開一台機器持續的運轉，已經開好了，等待需要來就立即運作並提供需要的服務。而 FaaS 的方式就像每次需要的時候再開啟機器。這樣還是沒概念的話，平常使用的飲水機先把熱水燒好並且持續保溫，有需要就按下按鍵自動出水。但有一種瞬熱式飲水機，在有需要用熱水的時候才會瞬間加熱，並沒有常時的在保溫。</p>\n<p>這樣的模式會帶來什麼樣好處？</p>\n<ul>\n<li>相對便宜，畢竟有需要才會使用，執行的時間減少了。</li>\n</ul>\n<p>不過相對的也會帶來問題。每次都重新執行</p>\n<ul>\n<li>不適用於需要持久性連結的協議，例如 websocket</li>\n<li>每次的 function 之間是無狀態的，執行時的狀態（或者說資料）若不另外儲存，無法讓下一次的執行使用。</li>\n<li>Cold start：服務會有很高的延遲，因為每次執行時都是從頭開始執行，重新執行程式碼。</li>\n<li>畢竟是服務幫你設置環境的，所以控制權較低...？等等！</li>\n</ul>\n<p>環境控制權的問題有點既視感，沒錯，在 PaaS 也有同樣的問題，但這樣的問題也一樣能夠透過 Docker 來解決。</p>\n<p>這類型的服務有</p>\n<ul>\n<li>GCP cloud functions/ cloud run</li>\n<li>AWS Lambda / AWS Fargate</li>\n<li>Azure Functions Serverless Compute</li>\n</ul>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>這些不同的部署方式絕對不是越後面就越潮，什麼東西都用最潮 FaaS 服務來做絕對會非常痛苦（甚至根本做不出來）。在技術上的選用永遠是老話一句：選擇自己需求來決定說要使用哪些技術。</p>\n<p>消毒一下，這篇文章的解釋非常粗淺，要是希望用比較好懂的方式來解釋各種不同的部署方式還有雲端服務。還有舉例部份，並不代表完全列出該類型的服務，像是 FaaS 可能在 AWS 上不只有 Lambda 和 Fargate 這兩個服務，畢竟每家公司的產品五花八門，自己也沒有全盤的了解，沒辦法全部列出。</p>\n<p>如果解釋上有任何的問題，或者是舉例的錯誤也歡迎指出，會盡速做修改！感謝打給的收看～</p>\n<p>參考資料：</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=uEVmD6n8Il0&amp;t=1s\">7 Ways to Deploy a Node.js App</a>：簡單易懂解釋不同的 Deploy 方式</li>\n<li><a href=\"https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison\">Compare AWS and Azure services to Google Cloud</a></li>\n<li><a href=\"https://aws.amazon.com/cn/blogs/china/lambda-serverless/\">带您玩转Lambda，轻松构建Serverless后台！</a></li>\n<li><a href=\"https://cynthiachuang.github.io/Difference-between-IaaS-PaaS-SaaS-and-FaaS/\">雲端計算 IaaS、PaaS、SaaS 與 FaaS</a></li>\n<li><a href=\"https://azure.microsoft.com/zh-tw/overview/what-is-paas/\">何謂 PaaS？</a></li>\n</ul>\n",
      "date_published": "2021-08-12T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/redirect-status-code/",
      "url": "https://lavi-blog.vercel.app/posts/redirect-status-code/",
      "title": "[極短篇] 關於重新導向的 status code",
      "content_html": "<p>想想下面這個情境。</p>\n<p>假設你原本的網站叫做 <a href=\"http://old.com\">old.com</a>\n後來你換了一個域名，叫做 <a href=\"http://new.com\">new.com</a></p>\n<p>再轉換初期你一定是要兩個都保持，不然原本都用 <a href=\"http://A.com\">A.com</a> 連線的小朋友們不知道你連到 <a href=\"http://B.com\">B.com</a>，他們就不知你的網站到哪裡去了。就像你的店名原本叫台南牛肉麵，突然你想要愛逮丸一點，叫做台灣牛肉麵，但其他人只知道台南牛肉麵，一直問台南牛肉麵在哪裡，殊不知你已經改名子了（好啦，如果問人一定還是知道台灣牛肉麵就是以前的台南牛肉麵）。</p>\n<p>所以在換域名初期你會兩個域名都先保留，等大家都記住 <a href=\"http://new.com\">new.com</a> 的時候在把 <a href=\"http://old.com\">old.com</a> 關掉。\n但是大家都還是用 <a href=\"http://old.com\">old.com</a> 連怎麼辦？我們會把 IP 掛到 <a href=\"http://new.com\">new.com</a>，然後 <a href=\"http://old.com\">old.com</a> 用 redirect 的方式導到 <a href=\"http://new.com\">new.com</a>。</p>\n<p>那我們要怎麼 Redirect？我們可以透過下面幾種方式</p>\n<ul>\n<li>response header 的 location</li>\n<li>HTML 的 meta 元素 HTML 重新導向機制</li>\n<li>JS 的 <code>window.location = URL</code>。</li>\n</ul>\n<p>後面兩個可能比較不熟悉，這裡不詳細講這個東西，可以看這邊 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections#%E8%AE%BE%E5%AE%9A%E9%87%8D%E5%AE%9A%E5%90%91%E6%98%A0%E5%B0%84%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95\">設定重新導向的其他方法</a></p>\n<p>平常我們輸入 domain name 之後的流程是這樣的：</p>\n<pre><code>1. client: old.com =&gt; DNS server\n2. DNS server: IP =&gt; client\n3. client: IP =&gt; server \n4. server: response =&gt; client\n</code></pre>\n<p>當我們拿到 IP 之後，為了減少之後重新向 DNS server request，所以瀏覽器有 cache 會記錄 域名 還有 IP的對，減少向 DNS request 的次數。那如果平常重新導向，會是這樣的流程</p>\n<pre><code>1. client: old.com =&gt; DNS server\n2. DNS server: IP =&gt; client\n3. client: IP =&gt; server \n4. server: response(根據 domain name) redirect to new.com =&gt; client\n5. cient : new.com =&gt; DNS server\n6. DNS server: IP =&gt; client\n7. client: IP =&gt; server\n</code></pre>\n<p>在第四個步驟 <code>server: response(根據 domain name)</code> 有個很重要的點，就是 Status code 這會影響到瀏覽器重新導向的方式，簡單來說重導向需要考慮的點有幾個。</p>\n<h3 id=\"%E6%B0%B8%E4%B9%85%E9%82%84%E6%98%AF%E8%87%A8%E6%99%82\"><a class=\"direct-link\" href=\"#%E6%B0%B8%E4%B9%85%E9%82%84%E6%98%AF%E8%87%A8%E6%99%82\">#</a> 永久還是臨時</h3>\n<p>這個東西的影響層面跟瀏覽器還有搜尋引擎有關係。</p>\n<p>剛剛有提到說瀏覽器會用 cache 紀錄域名還有 IP，如果是永久導向，那麼瀏覽器就會修改紀錄，例如像剛剛的流程，假如我們是永久導向。</p>\n<pre><code>1. 使用者輸入 old.com\n2. 瀏覽器翻了 cache 發現這樣一筆紀錄 old.com: 3.444.555.666 了，指向到 3.444.555.666，直接向 3.444.555.666 發送 request。\n3. reponse 顯示：永久 redirect to new.com \n4. new.com 發現 cache 裡面沒有，所以向 DNS 找找，於是找到 3.444.555.666\n5. 瀏覽器發現說這個網頁已經永久導向了，所以修改剛剛的紀錄變成 old.com: new.com, new.com: 3.444.555.666。\n</code></pre>\n<p>所以之後如果我們要搜尋 <a href=\"http://new.com\">new.com</a> 就不會再找 DNS了，而且輸入 <a href=\"http://old.com\">old.com</a> 也不會再重新發 request 到 <a href=\"http://old.com\">old.com</a>，因為已經紀錄說 <a href=\"http://old.com\">old.com</a> 已經導向到 <a href=\"http://new.com\">new.com</a></p>\n<p>如果是臨時導向呢？就不會有改紀錄這個動作，還是會重複原本的步驟。</p>\n<p>要注意的是，並不一定 <a href=\"http://new.com\">new.com</a> 跟 <a href=\"http://old.com\">old.com</a> 都在同一個 server 上，也有可能在不同 server，像是短網址的服務，或者是你整個部落格也跟著搬 server 換 IP 也有可能。</p>\n<p>而決定永久還是臨時的就是靠 status code</p>\n<ul>\n<li>永久： 301, 308</li>\n<li>臨時： 302, 303, 307</li>\n<li>其他：\n<ul>\n<li>304 會被導到舊網頁</li>\n<li>300 用戶可以自己選</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E9%87%8D%E5%B0%8E%E5%90%91%E4%B9%8B%E5%BE%8C%E7%9A%84-request-method-%E9%82%84%E6%9C%89-body\"><a class=\"direct-link\" href=\"#%E9%87%8D%E5%B0%8E%E5%90%91%E4%B9%8B%E5%BE%8C%E7%9A%84-request-method-%E9%82%84%E6%9C%89-body\">#</a> 重導向之後的 request method 還有 body</h3>\n<p>還有一個問題是，如果發出的 request 不是 get 呢？例如說：你是發送表單，用的是 POST method，而且夾帶著 form data，結果 request 之後 method 變成 get，那就完全送不出資料了。</p>\n<p>所以另外一個考量點就是，redirect 之後的 request method 還有 body。\n有幾種選項</p>\n<ul>\n<li>GET 不變、其他 method 可能會變成 GET： 303</li>\n<li>method 跟 body 都不會變：307, 308</li>\n</ul>\n<p>為什麼沒有 301 跟 302 ？因為當初規範沒有講清楚這個東西，所以一個規範各表，變成有些有些有改、有些沒改。上面的 303, 307, 308 就是為了統一所以提出的新規範。</p>\n<p>關於 rediredct 的 status code 大概是這樣，感謝大家收看。</p>\n<p>參考自：</p>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/60669395\">HTTP 中的 301、302、303、307、308 响应状态码</a></li>\n<li><a href=\"https://medium.com/@dubiety/%E6%90%9E%E6%87%82-http-3xx-%E9%87%8D%E6%96%B0%E5%B0%8E%E5%90%91%E7%8B%80%E6%85%8B%E7%A2%BC-f1a288c1cd20\">搞懂 http 3xx 重新導向狀態碼</a></li>\n<li>使用情境可以看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Redirections#%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91\">這邊</a></li>\n</ul>\n",
      "date_published": "2021-07-15T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/react-batch-update/",
      "url": "https://lavi-blog.vercel.app/posts/react-batch-update/",
      "title": "React 的 batch update 策略，包含 React 18 和 hooks",
      "content_html": "<p>在面試時有一題讓自己印象深刻：</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>App<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Function Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>        counter: </span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://codesandbox.io/s/wild-platform-w801i?file=/src/App.js:39-424\">CodeSandbox 連結</a></p>\n<p>第一個問題是：上面的 code，即使點擊一次 button，<code>counter</code> 也只會 + 1，原因是什麼？</p>\n<p>我的回答是：</p>\n<blockquote>\n<p>因為 <code>setCounter(counter + 1);</code> 這段已經改變 state 了，所以當下 Component 就會被 rerender，那後面第二次的 <code>setCounter</code> 就不會被執行。</p>\n</blockquote>\n<p>後面緊接著第二個問題：如果上面的 Code 要改成 +2，你會怎麼做？</p>\n<p>自己是有回答的出來（有做到 +2 的需求），不過主管表示說解題的方向不對，這題主要是在考 batch update 的觀念。</p>\n<p>後來查了一下，回頭發現連第一題都回答錯了（慘爆）。了解之後就想寫篇文章分享這個觀念。</p>\n<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-batch-update\"><a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-batch-update\">#</a> 什麼是 Batch Update</h2>\n<p>在 React 裡面，不管是 state 或者是 props 的改變都會造成 Component 的 re-render，這點在使用 hook 或者是 class component 中都一樣。</p>\n<p>那如果當一個操作中多次改變了 state，是不是就會造成 component 多次 rerender 呢？那對應的就會造成資源耗損，所以這時候就會將所有的改變 state 的操作一次蒐集起來，再統一改變 state，這樣就只需要 re-render 一次就好了，這個就是 Batch update。</p>\n<p>那 React 的 Batch Update 是怎麼做的？我們可以看看 React 作者之一 Dan 的 <a href=\"https://overreacted.io/react-as-a-ui-runtime/#batching\">文章</a>中的範例，這邊擷取文章中的一部分範例以及原文。但個人還是推薦去閱讀 Dan 的真跡，每一篇文章都受益良多。</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      Parent clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times<br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Child</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"><br>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      Child clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times<br>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>當你在點擊 <code>Child</code> 中的 button 時，因為 <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#event_bubbling_and_capture\">event bubbling</a> 的關係，所以也會連帶觸發到 <code>Parent</code> 中 <code>div</code> 的 <code>onclick</code> 事件。如果在沒有 batch update 的狀況下，會是這樣 re-render 的</p>\n<pre><code>*** Entering React's browser click event handler ***\nChild (onClick)\n  - setState\n  - re-render Child // 😞 不需要的 re-render\nParent (onClick)\n  - setState\n  - re-render Parent\n  - re-render Child\n*** Exiting React's browser click event handler ***\n</code></pre>\n<p>Child 因為自己的 setState 而 re-render 一次，但又因為 Parent 的 state 改變而 re-render 第二次。</p>\n<p>但是在 React 中，對於 event handler 中的 update 有進行 batch update 的處理，所以實際上的方式會是這樣：</p>\n<pre><code>*** Entering React's browser click event handler ***\nChild (onClick)\n  - setState\nParent (onClick)\n  - setState\n*** Processing state updates                     ***\n  - re-render Parent\n  - re-render Child\n*** Exiting React's browser click event handler  ***\n</code></pre>\n<p>這樣就減少了一次 re-render 了！真棒！</p>\n<p>理解了 React 中 batch update 的觀念後就可以來看面試題了，這裡再放一次 code</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span> setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <br>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>App<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Function Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>        counter: </span><span class=\"token punctuation\">{</span>counter<span class=\"token punctuation\">}</span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"><br>      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Click me</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"><br>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>第一題：\n上面的 code，即使點擊一次 button，<code>counter</code> 也只會 + 1，原因是什麼？</p>\n</blockquote>\n<p>原因根本不是如自己說的，因為第一次的 setCounter 就已經觸發 re-render，所以第二次的 setCounter 就被忽略。雖然和 Dan 的例子不太一樣，但是在同一個 Component 中的 event handler 也是會進行 batch update 的。</p>\n<p>等等，那不就應該 +2 才對嗎？怎麼會是 +1？</p>\n<p>原因出在這段：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>當這段 code 被送出去時，state 的指向的是目前的這個狀態的 state（詳細可以看<a href=\"https://overreacted.io/zh-hant/a-complete-guide-to-useeffect/\">這篇</a> Dan 的文章，雖然很長），換句話說，這段可以看成這樣：</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>所以等於設定了兩次 <code>setCounter(0 + 1)</code>。檢查方法很簡單，在 eventHandler 後面 <code>print</code> 出一點東西就知道有沒有執行到最後了。</p>\n<p>那第二個問題：</p>\n<blockquote>\n<p>如果上面的 Code 要改成 +2，你會怎麼做？</p>\n</blockquote>\n<p>只要改成這樣就可以了</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">prevCounter</span> <span class=\"token operator\">=></span> prevCounter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>increase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span>increase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span></code></pre>\n<p>利用 setState 的 <a href=\"https://reactjs.org/docs/hooks-reference.html#functional-updates\">functional update</a>，那就會變成「前次值 + 1」，而不是指定數字。就能夠達到 +2 的需求了。</p>\n<h2 id=\"%E7%9B%AE%E5%89%8D%E5%A6%82%E4%BD%95%E8%A9%B2%E4%BD%BF%E7%94%A8-batch-update\"><a class=\"direct-link\" href=\"#%E7%9B%AE%E5%89%8D%E5%A6%82%E4%BD%95%E8%A9%B2%E4%BD%BF%E7%94%A8-batch-update\">#</a> 目前如何該使用 Batch Update</h2>\n<p>了解什麼是 batch update 後，可以開始了解說哪裡會進行這樣的處理。</p>\n<h3 id=\"react-%E4%B8%AD%E7%9A%84-batch-update\"><a class=\"direct-link\" href=\"#react-%E4%B8%AD%E7%9A%84-batch-update\">#</a> React 中的 Batch update</h3>\n<h4 id=\"event-handler\"><a class=\"direct-link\" href=\"#event-handler\">#</a> event Handler</h4>\n<p>Handler Batch 範例：<a href=\"https://codesandbox.io/s/romantic-sanne-e9hgs-e9hgs?file=/src/HandlerBatchSample.jsx\">https://codesandbox.io/s/romantic-sanne-e9hgs-e9hgs?file=/src/HandlerBatchSample.jsx</a></p>\n<p>可以看到不管是點擊 <code>add many local state</code>，還是點擊 <code>increace all State in Another Component</code>，render 次數都只會新增 1。只要是單次的 event 中的所有的 state change 都會被 batch 起來，即使在不同的 component、不同的元素也都會做 batching。面試題也屬於這個狀況。</p>\n<h4 id=\"useeffect\"><a class=\"direct-link\" href=\"#useeffect\">#</a> useEffect</h4>\n<p>Effect Batch 範例：<a href=\"https://codesandbox.io/s/affectionate-carson-2jovc?file=/src/EffectBatchSample.jsx\">https://codesandbox.io/s/affectionate-carson-2jovc?file=/src/EffectBatchSample.jsx</a></p>\n<p>同樣的 useEffect 中也會。範例中改變 toggle 後，useEffect 被觸發，進而其中多個 <code>setCounter</code>，但是卻沒有被 rerender 四次。證明說有進行 batch。</p>\n<p>那為什麼每次點擊之後 counter 都會 +2 呢？原因是因為，couter 的 useEffect 並沒有設置 dependency，所以會在每次 render 的時候被觸發，所以：</p>\n<ol>\n<li>第一次為 toggle 改變的時候被觸發</li>\n<li>第二次為 couter 改變的時候被觸發</li>\n</ol>\n<blockquote>\n<p>話說這裡有個問題，還有除了這兩種操作 State 以外的情境嗎...？</p>\n</blockquote>\n<h4 id=\"%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%92%8C-reactdom.unstable_batchedupdates()\"><a class=\"direct-link\" href=\"#%E9%9D%9E%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E5%92%8C-reactdom.unstable_batchedupdates()\">#</a> 非同步操作和 <code>ReactDOM.unstable_batchedUpdates()</code></h4>\n<p>再回頭看 Event Handler 的範例中，如果點擊 <code>async increase all state</code>，就會依照我們原本預期的重新 render 4 次（在其中操作 state 4 次）。React 在非同步的操作中並不會自動執行 batch State。</p>\n<p>但可以使用 <code>ReactDOM.unstable_batchedUpdates(callback)</code>，將操作包在 callback 裡面，那一樣會進行 batching。</p>\n<h3 id=\"redux-%E7%9A%84-batch\"><a class=\"direct-link\" href=\"#redux-%E7%9A%84-batch\">#</a> Redux 的 Batch</h3>\n<p>在 Redux 裡面也有 <a href=\"https://react-redux.js.org/api/batch\">batching</a>，可以使用 <code>batch</code> 這個 API 一次 dispatch 多個 action，避免多次的 rerender。</p>\n<h2 id=\"react-18-%E7%9A%84-batching\"><a class=\"direct-link\" href=\"#react-18-%E7%9A%84-batching\">#</a> React 18 的 Batching</h2>\n<p>Dan 在 <a href=\"https://link.zhihu.com/?target=https%3A//github.com/facebook/react/issues/10231\">Keep to single setState call？</a> 這份 issue 裡面有提到：</p>\n<blockquote>\n<p>There exists a temporary API to force batching. If you write ReactDOM.unstable_batchedUpdates(() =&gt; { this.fn1(); }); then both calls will be batched. But we expect to remove this API in the future and instead batch everything by default.</p>\n</blockquote>\n<p>是的！就是現在！<a href=\"https://github.com/reactwg/react-18\">react 18 </a> alpha 版釋出啦，其中就有實現上面提到的方式。可以參考其中一篇 <a href=\"https://github.com/reactwg/react-18/discussions/21\">discusstions：Automatic batching for fewer renders in React 18</a>，那這邊也稍做介紹</p>\n<p>在新的 React 18，所有的狀況都會預設進行 batching（原本在非同步的狀況不會進行）。而如果有需要即時更新 state 來讓 DOM 渲染的話，則可以使用新的 API <code>ReactDOM.flushSync()</code>，使用方法如下，範例<a href=\"https://github.com/reactwg/react-18/discussions/21\">來自</a></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> flushSync <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Note: react-dom, not react</span><br><br><span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">setCounter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> c <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token comment\">// React has updated the DOM by now</span><br>  <span class=\"token function\">flushSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token comment\">// React has updated the DOM by now</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>用法算是反過來，你想要剝離的操作，用 flushSync 包起來，而想要 batching 的操作就維持原狀。自己稍微測試的結果，<code>ReactDOM.flushSync()</code> 裡面的 state change 會先於 batching，不論在執行時的順序。不過這樣一來，原本的 <code>ReactDOM.unstable_batchedUpdates()</code> 就可以說是被棄用了。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>整個研究的過程蠻久的，從面試題完到現在寫完文章，有趣的是剛好搭上 React 18 更新也稍微研究一下 XD。</p>\n<p>Big guy is John，如果有任何問題或錯誤的部份歡迎留言或者是寄信，會超級感謝！！</p>\n<h2 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/78516581\">深入 react 细节之 - batchUpdate</a>有稍微提到 source code</li>\n<li><a href=\"https://medium.com/swlh/react-state-batch-update-b1b61bd28cd2\">React State Batch Update</a>，少數提到 useEffect 也有做 batching</li>\n</ul>\n<p>範例大部分參考自上面兩篇文章</p>\n<ul>\n<li><a href=\"https://overreacted.io/react-as-a-ui-runtime/#batching\">React as a UI Runtime</a></li>\n<li><a href=\"https://github.com/reactwg/react-18/discussions/21\">Automatic batching for fewer renders in React 18 #21</a></li>\n<li><a href=\"https://github.com/Rashomon511/MyBlog/issues/27\">react 的 BatchUpdate</a> 沒看完，太多 source code 有點吸收不下</li>\n</ul>\n",
      "date_published": "2021-06-09T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/about-writing/",
      "url": "https://lavi-blog.vercel.app/posts/about-writing/",
      "title": "關於寫文章的問題",
      "content_html": "<figure tabindex=\"1\"><img src=\"img/post/0__sZgbB3MlYIJ6kS8J.jpg\" alt=\"\"></figure>\n<p>雖然在今年年初的時候大言不慚的打了一篇文章（對，就是上一篇），列個幾個目標，其中一個目標是分享。</p>\n<p>「因為想要分享，所以自己會想要多打一些文章」這個想法看似沒有問題，自己也希望試著產出一些內容，有時候想到一些好像值得分享的主題就會想要寫成文章。自己剛當完兵，覺得這件事情應該算蠻值得分享得？所以想要打個心得。</p>\n<p>要打個「退伍心得」這件事情其實已經想了一段時間，退伍前就有在思考，直到今天（退伍是 4/19）都還沒寫完，於是想說晚上把這份心得打完。但是當我坐在電腦桌前面，不連上網路，只打開編輯器坐下來好好打文章時，卻想不太到寫什麼（甚至還有在營紀錄一些想法的筆記本也在旁邊）。卡了一兩個小時也怎麼打也不滿意。我是不是搞錯了什麼？</p>\n<p>一開始覺得問題可能在於打字，是不是自己在用螢幕面前難以有條理的思考並組織語言。這樣想的同時覺得自己只是暫時遇到了瓶頸，需要克服這樣的狀況，但當寫了一些東西時開始覺得越來越不滿意，打了一些內容又刪了一些內容，然後就拿起手機滑了起來，我很清楚那是自己逃避的生理反應。</p>\n<blockquote>\n<p>「自己為什麼要寫這篇文章？」</p>\n</blockquote>\n<p>這個問題浮現在腦海中，開始思考這個問題。</p>\n<p>當兵對自己而言是值得分享的事情嗎？有什麼獨特的觀點嗎？在思考的初期，好像覺得沒什麼好分享的，其實也只是退伍而已。但是當又滑了手機之後回頭想起來，其實也不是沒有值得分享的內容，在營區內觀察到的狀況，還有對於當兵的一些自己的想法，覺得都很值得去談看看。不過自己似乎沒有去整理這些想法，有點天真的想要憑著一點印象和零碎的內容就想要寫出一篇文章。</p>\n<p>想起來這也不是第一次，其實在寫履歷的時候有這樣的一個想法：</p>\n<blockquote>\n<p>「履歷的自我介紹應該寫些什麼？」</p>\n</blockquote>\n<p>當時的想法是這樣，履歷上自我介紹的內容能呈現的很有限，真正想要了解一個人當然還是得需要長期相處，那自我介紹的目的不該是介紹自己，那麼應該是什麼？那如果想要用書面介紹自己，有沒有什麼更好的方法？介紹自己應該要介紹到什麼程度？</p>\n<p>當時也是就想了一個主題，然後打開文字編輯器開始，和今天不同的就只是自己當時待在咖啡廳。後來那篇文章做罷了，過程跟今天很像。想不到要打什麼，開始思考為什麼要打這篇文章，然後覺得沒什麼好分享的，不一樣的是後來也覺得沒什麼好談，就忘記這個想法了。直到今天剛才，同樣的過程發生在另外一個主題上才又想起來。</p>\n<p>在完成了上上一段才又發現說，其實這個主題蠻有趣的啊（至少對我而言啦）？覺得應該有更多的想法可以提。</p>\n<p>等等，這麼相似的過程發生了兩次，想必是以共同的問題。到底發生了什麼？現在思考下來，有兩個問題：</p>\n<ol>\n<li>在寫不出東西的當下那種「好像沒什麼好寫的心情」，是真的沒什麼好寫的嗎？</li>\n<li>自己的寫作流程好像出了問題</li>\n</ol>\n<p>現在這樣看下來，那種心情似乎只是當下一種戰與逃的機制而已，在逃避那種認知失調的狀況，在逃避那種明明應該做些什麼卻因為挫折而不想做，明明應該繼續這樣的主題，但卻因為卡了很久而不想繼續。發現了洞見後，這樣自己騙自己的心理感覺很熟悉，很顯然這不是第一次？</p>\n<p>當下遇到的挫折後引起自己下意識的逃避，這樣的機制體現在自己身上。如果寫不出來，有些人會覺得是自己能力不夠，但我好像覺得自己的寫作能力還可以？不算到太差；就因為這樣，自己用了「這個主題沒什麼好寫的」這樣的方式來作為藉口。這樣回想起來，常用的藉口還有：</p>\n<ul>\n<li>環境不夠好，影響到我了，等我換一個環境就可以做到了。</li>\n<li>只是自己不願意努力而已，之後就會努力了。</li>\n</ul>\n<p>自己應該要建起「心理城牆」來圍堵自己的逃避，今天在寫作的狀況下，自己能力方面，恰好沒有漏洞可以鑽（或許其他狀況會有，運動之類的）。但在「貶低自己的目標（主題不好）」這方面可以說是自己的弱點，那就應該設法去 build the wall。可能可以這麼做：</p>\n<ul>\n<li>主題不好：等一段時間來看，還是覺得主題很差嗎？</li>\n<li>環境不夠好：換一個環境呢？</li>\n</ul>\n<p>能夠觀察然後思考自己心理逃避的流程意外的有收穫，如果之後又再度的逃避，這篇文章應該能帶來點幫助，理解這樣下意識逃避的流程之後好像更了解了自己一點。看來問題一解決了。那問題二呢？自己的寫作流程出了什麼問題？</p>\n<p>這樣兩次的狀況下來，自己的寫作流程是這樣的：</p>\n<ol>\n<li>想到主題覺得有趣</li>\n<li>腦袋有一些相關的想法可以寫</li>\n<li>打開電腦開始寫</li>\n</ol>\n<p>但很顯然的在這兩個主題都行不通。</p>\n<p>思考過後，目前覺得問題是少了紀錄和整理這個步驟，雖然有很多想法沒錯，但似乎沒有寫下來。還有自己並不是文章寫下來就可以直接思考的人（所以才會想多文章訓練），需要整理還有圖像思考。可能的猜想是，因為這兩個主題都不是我非常熟悉還有充分思考過得主題，在腦中沒有一個脈絡，所以沒辦法自然的組織成文章。</p>\n<p>這樣看來，自己寫文章的流程應該要是這樣：</p>\n<ol>\n<li>想到主題覺得有趣</li>\n<li>腦袋有一些相關的想法可以寫，<strong>要紀錄下來</strong></li>\n<li><strong>做個整理，歸類還有理清脈絡</strong></li>\n<li>打開電腦開始寫</li>\n</ol>\n<p>呃對，就是這麼簡單的問題，結果繞了一大圈。</p>\n<p>等等，還有一個問題啊，那兩篇文章呢？「退伍心得」 還有「履歷的自我介紹應該寫些什麼？」，呃很晚了下次啦（逃避中）。</p>\n<p>總之有個結論了，還有解決了兩個問題，然後也順便產出一篇廢文。不過今年的目標到底會不會達成呢？也還不知道，說到底 2021 還有七個月呢。</p>\n<p>Big Guy is John，然後天佑台灣。</p>\n",
      "date_published": "2021-05-01T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/about-2020-2021/",
      "url": "https://lavi-blog.vercel.app/posts/about-2020-2021/",
      "title": "關於 2020，還有 2021",
      "content_html": "<figure tabindex=\"1\"><img src=\"/img/0__6OMTc__Q68eLguzCu.jpg\" alt=\"\"></figure>\n<p>又到了 12 月底，自己覺得這是一年裡面最不由自主的一段時間，或者可以說季節？</p>\n<p>天氣冷到不行讓自己的意志力大打折扣（當然這並不代表夏天會比較好），想做什麼的那種企圖心的好像都會被棉被阻擋。還有北部的天氣嚴重影響了外出的規劃，想出門走走但看到下雨就會打退堂鼓。加上每年年底總是一堆購物促銷，衝動消費的機會真的大增。一堆原因讓我覺得好像十二月的所有規劃都沒有意義一樣。</p>\n<p>然後十二月又是了一年的結尾（格里曆，就是國歷），自己不是那種覺得跨年是有別意義的人，說到底如果只是需要一個週期性的節日，一年中的不管幾號都行吧？就像雙 11 或者是 雙 12 這種商人炒作出來的節日大家也是過得很開心。不過也知道話可不是這麼說，這種事情就有點像畢業典禮和入學典禮一樣，是一個結束於開始的概念。</p>\n<p>雖然剛剛這樣講，但我不認同的是慶祝這個概念，但別的意義，像是「檢視」、「回顧」、「展望」這些意義，我覺得還是很重要的。最近發現在 Twitter 上面看到很多人開始做一年的回顧和新年新希望，其實自己也有這樣的一個習慣或者說跟風。的確，相較人生其他部份，自己這一年的確有很多的不同，在各種意義上的不同，在這個時間做一個自己的回顧以及所謂的新年新希望的確對自己是有必要的。</p>\n<p>所以有點反主流的我也要跟上這個風潮了。先想想說 2020 自己發生什麼好了。</p>\n<h3 id=\"%E7%95%A2%E6%A5%AD%E4%BA%86\"><a class=\"direct-link\" href=\"#%E7%95%A2%E6%A5%AD%E4%BA%86\">#</a> 畢業了</h3>\n<p>是的，終於畢業了。</p>\n<p>其實對於自己的大學歷程一直都帶有一點自卑感，當有人提起這件事情時大部分都會用自嘲和打哈哈帶過，但現在畢業了，也是時候該面對這段大學生涯。</p>\n<p>自己大學總共讀了六年，第一二年是淡江大學化材系，大一時沒什麼在認真讀書，幾乎都在打球，大一下的時候進入社團，然後大二幾乎都在社團。記得自己高中剛畢業的時候很努力的拍了一部畢業短片，也是因為這部短片所以開始對影片拍攝有興趣，所以大二最後決定重考資傳系，不過也因為考上所以才讀六年。</p>\n<p>記得當初進入大學的時候就覺得即使延畢也沒關係，可以接受讀到五年，如今多了一年。現在回想起來當時的規劃，其實還是照著當初對於大學的想像走的，除了多了一年以外。但我現在的看法是，六年真的太久了，或者是我覺的這六年的收穫與花費的時間並不成正比吧。</p>\n<p>第三年是資傳系一年的的身份，這一年的重心放在社團還有系上的課業，是的，又是社團。不過其實這年有個重要的起點，我是在這一年第一次接觸到程式的，是在一個系上的一個叫做媒體的組織接觸的，當時雖然是大一但有去旁聽學長解上的課程。在真正接觸到程式之前一直覺得程式是一個很難的東西，可是又覺得自己在思考方面很適合寫程式，只是一直沒有機會接觸，不過當時還沒有想要專心走前端，反而一樣是對影片，還有行銷和廣告比較有興趣。</p>\n<p>直到第四年才決定要走前端，第四年才發現一見事情，就是我的學貸會是可觀的金額，到這個時候就大概知道自己會需要讀六年了，加上自己除了學費以外還有貸生活費（房租）。體悟到這點後理解到很重要的事情：</p>\n<blockquote>\n<p><em>自己對未來的工作有所要求，包含但不僅限於經濟層面</em></p>\n</blockquote>\n<p>想想這時候的技能樹點了什麼？這時自己的技能樹真的是亂的可以：平面設計、影片剪輯、前端、網頁設計、行銷等等的都略懂，但說實在的沒有一樣能夠見人的。</p>\n<p>我覺得就算是通才，也必須要在一個方面鑽研的深，顯然現在的我不是，什麼都碰，但什麼都不精。最後考慮到經濟上的需求，在第二次的大二下學期決定走向前端（總覺得每次大二下都得做出一些決定），不過這時候還沒有到非常上心，只是上 Udemy 找一些教材稍微看一看。直到大三下才開始算有規劃的學習（但其實也是跟課）。</p>\n<p>大三下有個特別的點，因為原本在學習程式時，就是從網頁設計開始學習的，所以對於 UI/UX 的了解比前端還要早。自己一直很喜歡 UI/UX 的一些理念，像是以人為本的思考方式，還有需要做實驗的精神，這對我而言比單純的視覺設計有趣太多。這是如果未來如果能力會想要深造的一個方向。</p>\n<p>最後終於到了大四，也就是大學的第六年。這年是我自己很迷惘以及煩躁的一年，可能每個人多少都會在大學生涯的最後一年感到迷惘吧？離開學校即將踏入社會，不知道自己要幹嘛，總歸一句話就是對未來的不確定性。加上系上又要做畢業製作，自己有個壞習慣，這個習慣困擾自己真的很久：總是想要幹一票大的。畢製一開始想了很多，但實現的卻沒有多少。大學的最後一年就在畢製的忙碌還有打工、實習下渾渾噩噩的過去了。</p>\n<p>如果要給自己一個大學一個分數，可能是 60 分？總之不會是太高的分數就是了，人難免會為一件事物打分數，但有趣的是當現在回頭看這段時間，與 10 年後回頭看大學這段時間一定會給自己不同的評價，或許這段時間有我現在還不能理解的收穫，又或許這段時間帶來我現在沒察覺的問題。不過有在人生的這段時間可以找到覺得能夠發展、自己也喜歡的志向也算是及格了；但也覺得自己為了這張畢業證書浪費了太多資源，如果不在乎這張證書的話，或許能在這段時間做更多事情？</p>\n<p>總之六年大學生活就到這裡了，當然有很多細節沒有提，排球、社團、還有很多事情，以及有很多需要感謝和需要說聲抱歉的人。不論這段時間我自己覺得如何，不可否認的是，這是我的人生很重要一個部份。如果說認知有四個階段。</p>\n<blockquote>\n<p>1. 不知道自己不知道<br>\n2. 知道自己不知道<br>\n3. 知道自己知道<br>\n4. 不知道自己知道</p>\n</blockquote>\n<p>在大學以前的我是 1. 那大學之後的自己應該算是進入 2. 了。</p>\n<h3 id=\"%E5%89%8D%E7%AB%AF\"><a class=\"direct-link\" href=\"#%E5%89%8D%E7%AB%AF\">#</a> 前端</h3>\n<p>自己大概是在大四上學期，才開始和身旁的人說自己未來方向是前端工程師，在之前並沒有和很多人提起這件事情。我沒有很清楚其他人對這件事情的看法，但感覺應該是帶著比較半懷疑的心態？畢竟自己也換過很多志向，而且工程師表面看起來自己的科系並沒有很大的關聯（非資工系），然後自己又是那種幹話他媽多的人。</p>\n<p>不過覺得真正的原因是自己還沒有自信吧？自己當時的水準在已經可以寫出一些簡單的東西，但基礎不穩。</p>\n<p>我覺得自學程式最難的地方會在這裡，其實網路上有很多 roadmap 可以跟，要到可以就業的程度並不難，可是基礎的部份如果沒有人指導，你會處於一個<strong>不知道自己不知道</strong>的狀態，直到你進入職場之後才會了解。</p>\n<p>自己大概認真投入了六七個月左右（應該是 19 年的七月開始到 20 年初），然後看到<a href=\"https://blog.huli.tw/2019/08/21/real-front-end-learning-path/\">這篇照妖鏡</a>就懵了，自己的基礎真的太薄弱。如果你一樣是自學學了一年半載，不確定自己在這路上走了多長時，建議可以看看。</p>\n<p>看完之後思考了一下就報名第四期的程式導師實驗計畫了（後面簡稱 MTR）。</p>\n<p>這項計畫對於自己的 2020 絕對佔有一席之地。計畫的目標是讓學成轉職成為一位合格的工程師，這樣我應該算符合吧？從學生變成工程師某方面也算轉職，但是在學員有學過程式的比例不算多，所以我算有點偷跑但也不算太多？畢竟也有幾個是已經在工作的工程師 XD。</p>\n<p>還有就是這個計畫要求兩個禮拜至少要 PO 十篇每日心得，以及要求說一個要投入至少 30 個小時計畫上。這兩點對我來說不算是個問題，反正我本來就是無業遊民。</p>\n<h4 id=\"%E7%A8%8B%E5%BC%8F%E6%96%B9%E9%9D%A2\"><a class=\"direct-link\" href=\"#%E7%A8%8B%E5%BC%8F%E6%96%B9%E9%9D%A2\">#</a> 程式方面</h4>\n<p>從程式開始講起好了，我想最大的收穫應該是自信。這感覺就像你知道自己應該是蠻會跑步的，因為在學校的運動會都名列前茅，甚至還常常破大會紀錄，但是你不知道自己在整個縣級或者是全國運動會的表現怎麼樣。</p>\n<p>可惜我並不是那個名列前茅啊，進來之後也是補上了很多之前不懂的基礎，但整個六個月的課程跟完之後，不確定感少了很多。我認為信心這件事情對為了工作或者說轉職而自學的人會比想像中的大，尤其是在談薪水還有對工作的要求方面，有信心會讓你更願意找一份好工作。</p>\n<p>再來是技術方面，自己收穫最多的部份絕對不是前端，而是後端。大概碰了一點 PHP，還有 node 跟 express。在上課之後對於框架還有工具的理解也更深，包含但不限於：React, webpack 等等。其實蠻想提說自己對於前端工程師學後端的看法，不過畢竟這篇是個回顧，有機會再生一篇來提這件事情。</p>\n<p>還有對於一些基礎的東西也更加扎實，尤其是資安、JS 底層、還有瀏覽器方面的問題，其實我覺得這是很容易漏掉，但如果想走更遠一定不能放過得部份。</p>\n<p>在程式的部份來說，最後應該是眼界吧，在 MTR 之前覺得自己缺的很多，上完之後更多了，也希望未來可以在這個領域達到一定的程度。</p>\n<h4 id=\"%E5%92%8C%E7%A8%8B%E5%BC%8F%E7%84%A1%E9%97%9C%E7%9A%84%E6%9D%B1%E8%A5%BF\"><a class=\"direct-link\" href=\"#%E5%92%8C%E7%A8%8B%E5%BC%8F%E7%84%A1%E9%97%9C%E7%9A%84%E6%9D%B1%E8%A5%BF\">#</a> <strong>和程式無關的東西</strong></h4>\n<p>我想是 Huli 老師的個人特質吧，記得在課程中的 podcast （沒錯，這個計畫有個內部週更的 Podcast，小弟是忠實聽眾）有提到說 Huli 很佛系，雖然我沒有很清楚說佛系是什麼，至少我覺得那種「不ＸＸ，不ＸＸ，自然就ＸＸＸ」、或者是什麼都漫不在乎的個性應該不是佛系，我的覺得比較像這樣：「只專注在自己和目標上，不做其他比較。」</p>\n<p>似乎是第一次認識這樣的人？其實蠻羨慕這樣的性格的，在 MTR 這段期間，很多次都在思考自己究竟是什麼樣的個性，然後這些個性導致了自己常犯下什麼樣的問題。一直覺得自己在個性上有所缺陷，所以有一段時間自己很嚮往這樣的性格，畢竟自己的性格就是很愛比較，然後很多事情總覺得不夠好。在這次的計畫更覺得這是自己的一個問題，追求好不是問題，但鑽牛角尖就是了。工程師在優化方面有一句話很有名：</p>\n<blockquote>\n<p><em>Premature optimization is the root of all evil.<br>\n過早最佳化是萬惡的根源</em></p>\n</blockquote>\n<p>好應該是逐步追求的，而不是在每個環節都要求到最好，只會逼死自己而已。</p>\n<p>自己想變成那種佛系的人嗎？我也不太確定，但是讓我知道說：「喔，原來還可以保持這樣的一種心態」對我而言就是個收穫了，不用一直保持那種汲汲營營的態度，走著走著也可以走得很遠，而不是得一直用力的跑。</p>\n<p>除了這點之外，在上完課程之後才真正覺得這是一個有趣的領域，會想要再深入的去研究還有理解更深的內容。這可能也是過去一直學不好的一點之一，過去學習的過程有點太功利了，就只是為找一份工作而已。這樣的想法並沒有錯，但一個領域的興趣會讓你走得更遠。</p>\n<h4 id=\"%E8%A8%88%E7%95%AB%E7%9A%84%E6%9C%80%E5%BE%8C\"><a class=\"direct-link\" href=\"#%E8%A8%88%E7%95%AB%E7%9A%84%E6%9C%80%E5%BE%8C\">#</a> <strong>計畫的最後</strong></h4>\n<p>整個計畫真的過得蠻快的，說自己已經成為工程師嗎？沒有，畢竟還沒找到工作，不過就算真的找到工作，短期內我也不敢說自己是工程師，至少我還不是一個我自己認可的工程師，這次課程之後了解到自己還欠缺太多。而且自己也不太喜歡那種聽起來就很厲害名稱。</p>\n<p>大概是這樣吧，當然既然這裡提到收穫，那就是提一些比較算是優點的東西，一些想法或者是改變什麼的就沒有提了，而且這篇也不是整個 MTR 的心得。MTR 的心得的話應該之後再打一篇，我想會是在找到工作之後，畢竟自己還有四個月的役期。</p>\n<p>總之，今年總算在技能上自己覺得有一點信心了，明年就是驗證今年學習成果的一年了。</p>\n<h3 id=\"%E6%B1%BD%E8%BB%8A%E9%A7%95%E7%85%A7\"><a class=\"direct-link\" href=\"#%E6%B1%BD%E8%BB%8A%E9%A7%95%E7%85%A7\">#</a> <strong>汽車駕照</strong></h3>\n<p>是的，終於考到汽車駕照了，雖然因為上坡起步重考了一次。一直覺得考到汽車駕照就像獵人執照，拿到之後有一種真的步入社會的感覺，而且要做什麼都方便很多，像是搬家之類的。對我這種提不起面子去求人的個性真的是必需品。</p>\n<p>而且開車之後就會開始在意車子的品牌還有車子，甚至有開始想要買車的念頭。太可怕了，不過之後在台北還是別想了。自己的夢想應該是開著小皮卡載著越野車去騎 Enduro 吧。在沒人的荒郊野外把車放下來之後開始狂飆，然後騎到累再就搭帳篷休息，光想就很爽。</p>\n<h3 id=\"%E7%95%B6%E5%85%B5\"><a class=\"direct-link\" href=\"#%E7%95%B6%E5%85%B5\">#</a> <strong>當兵</strong></h3>\n<p>其實還沒當兵啦，入伍是 2021 年初。在沒有當兵之前，也不覺得自己真正踏入了社會，等真正當完兵才有一種自由的感覺，不過這也是大部分男性都要經歷過得一段時期。但其實我對當兵還蠻反感的，覺得這段時間可以更有意義，當初為了拼看看免役還去醫院自費複檢。而且我自己就已經比別人還要晚進入職場，想要還要花這四個月就覺得很沒必要。</p>\n<p>不過該來的還是要來，躲不掉。不過蠻幸運的是自己在整個 MTR 結束之後才入伍，也讓我在找工作之前可以有一段時間再進修，而且能夠有個時間可以沈澱一下也不錯。不過很怕這幾個月上的東西退伍之後全部忘光光啊…</p>\n<h3 id=\"%E6%94%9D%E5%BD%B1\"><a class=\"direct-link\" href=\"#%E6%94%9D%E5%BD%B1\">#</a> <strong>攝影</strong></h3>\n<figure tabindex=\"2\"><img src=\"/img/1__YxHwC1q1jHaBye9IbdNrqw.jpeg\" alt=\"\"></figure>\n<p>自己今年有在嘗試開始攝影，然後丟上 IG。不過主要是在上半年的時候，下半年回到宜蘭就沒有了。主要是因為發現說自己之前的 GH4 一直沒有在用（之前買 GH4 主要就是為了拍攝影片），後來就把 GH4 賣掉，不過自己還是有會想要拍照的時候。這時候為了說自己要買哪一台相機其實想了很久，後來買了 GRII。</p>\n<p>GR 真的是一台會讓你很想帶出去的相機，而且帶著的感覺很自在，不會有遷就相機的感覺，之前的 GH4 帶起來就有點重，還有帶一個相機包出門是一件很累的事情。</p>\n<p>GR 也不會有害怕其他人眼光的問題，自己臉皮蠻薄的，不太喜歡那種被人注目的感覺，帶著一台相機在路上感覺很招搖，GR 拿在手上就自在許多。</p>\n<p>也是因為 GR 讓我想試著開始認真一點拍照看看，也開始覺得攝影是件有趣的事情，買了幾本書想更深的了解有關攝影的事情，也開了帳號把自己作品丟上去試看看。</p>\n<p>不過回來宜蘭之後就沒有繼續了，蠻妙的，我也不知道為什麼，就是沒有那種想要探索的心情，可能跟淡水比較有感情吧。自己待了六年，而且是一個自己真正從陌生到熟悉，然後自己也在這裡成長現在的模樣，對淡水有種很不一樣的感情。</p>\n<figure tabindex=\"3\"><img src=\"/img/1__WU7Z6RmuwRaSXBO4G8TmbQ.png\" alt=\"\"></figure>\n<p>之後到台北工作應該會繼續攝影，不過題材就不一定了。目前蠻喜歡街拍的感覺，喜歡從不起眼的事物找出讓自己為之一亮的畫面，而且算蠻符合自己的個性。攝影可能不會是我的工作，我也不知道會不會變成我人生中重要的一部分，反正覺得有趣，就繼續下去吧。</p>\n<h3 id=\"podcast\"><a class=\"direct-link\" href=\"#podcast\">#</a> <strong>Podcast</strong></h3>\n<figure tabindex=\"4\"><img src=\"/img/0__396I__JTqqgJBPk5c.jpg\" alt=\"\"></figure>\n<p>這點是突然想到的，自己好像今年開始聽 Podcast 了！！其實去年就有開始聽了啦，不過去年根本沒有做回顧，所以就當作今年吧。一開始開始聽得契機是因為開始實習，當時還在住淡水的我要到善導寺去實習，大概 50 分鐘的路程（包含到捷運站還有走到公司）如果沒有一點消遣真是太痛苦了。</p>\n<p>講到捷運上面的消遣，我自己通常是看漫畫。可是看漫畫如果看到尺度比較大的畫面（但也不是限制級，而且你自己也沒有預期會出現的那種）時旁邊很多人就整個很尬，尬到爆。但是我又不在捷運上看影片，自己的喜好一覽無遺，然後自己的反應又赤裸的放在大眾面前，這真的超恥的。還有也有試過看文章，不過…在車上的意志力真的很低啊，尤其是回家的時候。</p>\n<p>Podcast 就不錯，隱私性上因為是用耳朵聽的，所以也不會被別人聽到什麼，雖然自己的反應也是很赤裸啦，不過至少別人不知道自己在聽什麼。而且也比漫畫還有意義很多阿，自己算有聽的幾個頻道是：<a href=\"https://drinkwithmario.thenewslens.com/\">馬力歐陪你喝一杯</a>、<a href=\"https://blog.justfont.com/category/%E5%AD%97%E5%9E%8B%E8%85%A6%E8%A3%9C/\">字型腦補</a>、<a href=\"https://www.youtube.com/channel/UCzFfSrF6-v3Ey5i95w48noQ\">頂樓加蓋</a>。像馬力歐自己就蠻喜歡挑幾個自己好奇的來賓來聽，像分享各種不同職業的的一些心路歷程，而且很多都是領域中蠻資深的前輩，聽下來也是了解蠻多東西的。</p>\n<p>字型腦補就不提太多了，這個比較偏自己的興趣吧，設計相關的可以了解看看，不過內容算是比入門再更深一些。頂樓加蓋最近才開始聽，因為也是軟體開發領域和創業的 Podcast，而且 MTR 計畫的助教推薦，整個 Podcast 都可以聽到濃濃的幹話，很像自己在朋友聊天一樣，。</p>\n<p>其實現在我也不是每週都會固定聽的那種，畢竟現在也沒有在實習，而且目前的通勤期間也不適合聽 Podcast（騎車時請不要戴耳機），但是在通勤或者是做一些比較不需要的思考事情時聽 Podcast 真的超棒的，而且和其他的消遣時間方式算比較不會那麼累，而且又還算有意義。整體下來算是蠻推薦的，不過需要專心的時候還是拔掉耳機好好處理事情就是。</p>\n<h3 id=\"2020-%E6%80%8E%E9%BA%BC%E6%A8%A3%EF%BC%9F%E9%82%84%E6%9C%89-2021-%E5%91%A2%EF%BC%9F\"><a class=\"direct-link\" href=\"#2020-%E6%80%8E%E9%BA%BC%E6%A8%A3%EF%BC%9F%E9%82%84%E6%9C%89-2021-%E5%91%A2%EF%BC%9F\">#</a> <strong>2020 怎麼樣？還有 2021 呢？</strong></h3>\n<p>目前比較想得到的就這幾點，但自己真的是一個很不容易想起事情的人，很多事情自己也沒有忘記，但就是想不起來，就會需要一個點去幫我勾起那個回憶。想不起來的事情就是不重要的事情嗎？不對，很多都是超重要的，但是想不起來也沒辦法阿，就算了吧。</p>\n<p>會想在這個時間寫這樣的一篇，也是因為這年對我而言很不一樣，真正的脫離了學校，進入了人生的另一個階段。在大學時期有很多的限制，有很多事情想做的礙於自己是學生，經濟等因為沒辦法完成。這是實現自己人生的第一步嗎？不太喜歡這種很直銷的說法，但的確是個開始沒錯，而且站上這個起點也讓自己覺得蠻興奮的。</p>\n<p>不過也只是起點而已，自己很常犯的問題就是樂極生悲了，想的很多結果只想當個 couch potato 這才是一直以來的狀態。</p>\n<p>那 2021 年呢？就像剛剛講的 2021 會是蠻不一樣的一年。</p>\n<p>頭四個月，自己會在金六結度過。1/7 號入伍，預計 4/16 退伍吧。目前預計說這段時間慢慢複習面是的內容，發現還有挺多東西需要準備的，像履歷之類的東西。</p>\n<p>退伍之後會開始找工作，目前看下來這個過程可長可短，短則兩週（真的會這麼短…嗎？），長則兩個月吧？等等，這是我自己給我的一個 deadline 嗎？如果真的拖到兩個月的話，可能會跟畢業生一起競爭工作，這到底算是好還是不好。</p>\n<p>而且自己真的是很挑工作的一個人欸，前面好像沒有提到，回宜蘭之後就換了大概 4, 5 個工作吧，不過都是打工，而且前面幾個離職的都是餐飲業（我真的要在這裡重申，絕對不會再去餐飲業了）。</p>\n<p>剛回來的時候原本想要租房子在宜蘭市，然後找一份工作繳租金跟學費。結果真的想的太美了，現實生活就是給我一個當頭棒喝：「自由與有時間學習兼顧是它媽無法兼顧的」，好啦，是我自己無法兼顧。後來一個月錢燒完之後，我就回老家住了。</p>\n<p>欸不是，當兵完會不會這樣啊，老實講很有可能欸。自己真的是挑工作到不行的人欸，大學打過得工還不少，不過離職過得店更多，尤其是連鎖餐飲，有機會的話蠻想寫一篇打工心得的，畢竟自己也算是打過不少的工，應該來分享一下心得才對。</p>\n<p>好像有點離題了，但自己對於工作…真的是蠻要求的。完蛋，還沒找工作，辣個完美主義又出現啦啦啦啦啦。我自己現在猜猜看到時候會有什麼情形出現：</p>\n<ul>\n<li>找到工作，可是兩個禮拜內又覺得這間公司真的不是自己想待的。</li>\n<li>應該會拿到 2, 3 個 offer，但是在選擇哪一個 offer 時非常的猶豫不決。</li>\n</ul>\n<p>這兩個覺得蠻有可能會出現的。不過誰知道呢，總要先有個工作才知道自己幾兩重吧，自己現在就沒有工作經驗嘛，自己就是那麼菜有什麼辦法。寫在這邊的這句話希望到時候找工作的自己可以看到 XD</p>\n<p>總之要說的是，自己退伍後可能會有大概兩三個月左右很不穩定的時間，當然這個時間也是可長可短。包含要找工作、習慣工作、搬家等等的，可能到年末才會是比較穩定的狀態吧。這樣想下來，距離那個真正踏入社會的自己還是蠻遙遠的，很可能也是七月後的事了。</p>\n<h3 id=\"%E6%9C%89%E9%97%9C%E6%96%BC%E6%96%B0%E5%B9%B4%E7%9A%84%E7%9B%AE%E6%A8%99\"><a class=\"direct-link\" href=\"#%E6%9C%89%E9%97%9C%E6%96%BC%E6%96%B0%E5%B9%B4%E7%9A%84%E7%9B%AE%E6%A8%99\">#</a> <strong>有關於新年的目標</strong></h3>\n<p>每一年好像大家在總結完自己的一年之後，好像都會立個新年新希望之類的東西。既然是要踏出社會的一年，那麼也應該要有一個和過去不一樣的作法，在想新年目標之前，那到底什麼是新年目標？</p>\n<p>新年目標，據我自己的理解，應該就是一個希望明年可以做到的事情吧，既然立了，就應該理所當然要做到？</p>\n<p>後來發現自己一直以來立新年目標好像幾乎就是把還沒做的事情列出來，或者是想做的事情列出來。其實在寫這篇文章時自己也有列新年願望，然後列了 20 幾個吧。然後：</p>\n<p>不用到年末我就知道我會失敗。</p>\n<p>從 24 年的經驗來看，我會失敗。在生活的藝術這本書有看到類似這個意思的一句話的話：「我們總是把未來的自己想成完美的自己」。就好像今年的自己是那種很糟的 PM，明年的自己是工程師，但這位 PM （現在的自己）完全不在乎工程師的資歷、狀況，瘋狂發 ticket，完全沒有 Priority。</p>\n<p>然後明年的工程師就因為這位 PM 弄的工作很沒自信，然後就<s>離職了</s>（拜託，先不要從人生離職）很不開心的在工作。那工程師的鬱鬱寡歡也不是因為他的能力不好，是 PM 的問題，PM 可能應該先和工程師溝通一下再開 ticket。</p>\n<p>不過今年的自己也沒辦法和未來的自己溝通，甚至連自己未來的狀況真的很難說，人生就是這麼無常。想對現在的自己說的是，那種想到什麼就放進新年目標的方式很明顯不合理，不過自己又能自己什麼樣的期許和目標呢？因為不知道未來的狀況怎麼樣，所以沒辦法給未來的自己一個目標，但是新年目標就是一個未來要完成的事情，那新年目標本身是不是就是一個悖論？</p>\n<p>好像扯太遠了，單純點吧，什麼看完 ES3 的文件，還有學會 typescript 這些東西我想都不適合放在這個新年目標中？新年目標應該要是：「不論發生什麼狀況，這一年都必須要達成的東西」，目標必須符合這個條件，才能解決上面的問題才是。</p>\n<p>經過上面的條件，然後思考之後，自己給自己四個 2021 年的目標：</p>\n<p>1. 找回專注力</p>\n<p>2. 給自己一套專案管理的方法</p>\n<p>3. 分享</p>\n<p>在這裡描述一下說為什麼會有這三點，也是給未來的自己一個備忘錄</p>\n<h4 id=\"%E6%89%BE%E5%9B%9E%E5%B0%88%E6%B3%A8%E5%8A%9B\"><a class=\"direct-link\" href=\"#%E6%89%BE%E5%9B%9E%E5%B0%88%E6%B3%A8%E5%8A%9B\">#</a> <strong>找回專注力</strong></h4>\n<p>今年的專注力一直蠻不好的，尤其是回來宜蘭之後，有一個蠻明顯的原因是因為畢竟不是自己的房間，有蠻多東西可以讓自己分心的，已經有點嚴重到說回家做事的效率大打折扣。常常分心到去看漫畫還有 youtube，讓自己生產力超級低下。當然也不是說不能看，但是那種睡前看到睡著就不太好了。當晚就算睡覺睡眠品質也很差，隨著年齡增長睡眠品質真的越來越重要，有沒有睡好大大影響隔天腦袋的清醒程度。</p>\n<p>還有自己一遇到比較需要思考，或者是比較困難的部份，就會開始不由自主的想要滑手機。分心已經變成自己潛意識中一種戰與逃的反應，遇到困難時候就會想要滑一下安撫緊張的情緒。</p>\n<p>總之希望找回自己的專注力，不過其實這只是一個蠻大方向的目標而已，要完成這個目標也需要很多實際的行動，目前想到幾點：</p>\n<ul>\n<li>幫自己搭建一個不容易分心的環境</li>\n<li>察覺自己分心的過程，並記錄下來</li>\n<li>冥想練習</li>\n<li>改變飲食習慣</li>\n<li>運動</li>\n<li>蕃茄鐘工作法</li>\n</ul>\n<p>依照到時候的環境不同，能執行的方式也蠻不同的，像當兵就絕對不可能去建立一個自己的環境，但是運動就可以。當然方法也不只上面幾種，在 2021 年，用盡各種嘗試或者方法讓自己專注。</p>\n<h4 id=\"%E7%B5%A6%E8%87%AA%E5%B7%B1%E4%B8%80%E5%A5%97%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95\"><a class=\"direct-link\" href=\"#%E7%B5%A6%E8%87%AA%E5%B7%B1%E4%B8%80%E5%A5%97%E5%B0%88%E6%A1%88%E7%AE%A1%E7%90%86%E7%9A%84%E6%96%B9%E6%B3%95\">#</a> <strong>給自己一套專案管理的方法</strong></h4>\n<p>主要是因為自己很容易忘記事情，像是繳停車費之類的瑣事常常會忘記。關於這點我會覺得是因為今年不夠忙碌，所以還不需要一個系統來幫自己管理這些待辦事項。但會覺得不夠忙碌一方面也代表說自己還有更多時間可以利用吧？</p>\n<p>再來是有很多需要找一個地方放的想法，或者是可以做參考的資料，或者是想要之後再讀的內容常常沒有一個地方放，最後就消失在腦袋還有電腦中。這些日常生活累積的東西真的很珍貴，就這樣不見覺得這蠻可惜的。</p>\n<p>後來想想自己應該要有一套管理專案還有代辦事項的方法。其實 2020 有稍微了解一下 GTD 的內容，感覺也很不錯，不過沒有更深入的認識。目前想到的實際行動有</p>\n<ul>\n<li>找 GTD 相關的書來看</li>\n<li>培養一套紀錄的習慣</li>\n</ul>\n<p>其實想到方法也沒有很多，覺得要再研究一下。在 2021 希望可以熟悉以及內化一套方法，讓自己更好的管理需要執行的專案以及日常碰到的想法。</p>\n<h4 id=\"%E5%88%86%E4%BA%AB\"><a class=\"direct-link\" href=\"#%E5%88%86%E4%BA%AB\">#</a> <strong>分享</strong></h4>\n<p>會想開始分享一些自己的想法，有一部分也是受到 Huli 還有課程的影響。這幾天回頭看一下自己的寫的作業，有些東西真的整理的很好，自己對於品質還有內容也為之驚嘆。而且當忘記的時候回過頭來看，也比較容易勾起記憶。這樣寫下來發現說寫成文章有幾個好處：</p>\n<p>一個是因為想對自己的思考有所要求。常常想東西會覺得：「喔～原來就是這樣，那我懂了」，對自己的理解好像只有「大概懂」的程度。如果可以把自己的理解打成文章，或者是可以呈現的形式，我想應該會有更深的理解，也可以在寫文章的過程中找到更多的問題？</p>\n<p>再來打成文章會強迫自己整理自己的內容，整理成「其他人方便看的」形式，而這樣的形式通常自己會看得懂。自己很常發生一件事是自己的筆記自己看不懂，記筆記的當下通常會比較趕，只想做個紀錄，後來沒有整理很快就會忘記了，如果寫成文章等於又重新整理了一次自己腦袋裡面的記憶，也更不容易忘記。</p>\n<p>但是寫文章這件事情就是很需要動力的一件事情，我想分享的虛榮心應該是個很好的動力。還有另一方面自己很容易忘記東西放在哪，有個網站放自己的文章就比較不會有這個問題，而且隨時可以看，所以與其說是部落格<strong>不如說是備忘錄</strong>吧。經營個人品牌什麼的自己倒不是很在乎，現在好像每個人都在做這件事情，對剛起步的自己而言，還是先開始寫一些東西就好。</p>\n<p>分享還有想到一點，也不只說分享一些技術層面的內容，可能也會分享一些自己的思考或者是一些遇到的狀況。想試著藉由分享這些內容，來更了解自己，以及抱持自己的公開還有透明，這點是自己在原則這本書中所看到的。當然也不是所有的隱私都會公開，但我覺得在一些思考還有應對上，保持透明的心態可以讓自己進步的更快，也更容易去接納不同的看法和建議。</p>\n<p>想到的實際行動：</p>\n<ul>\n<li>把 Blog 整理一下，調整一下版面變成自己的形狀</li>\n<li>自己的之前產出的內容可以先丟到 Medium 上面</li>\n<li>做專案、學習新的東西時，試著把筆記整理成比較完整的文章</li>\n<li>作筆記（沒錯，自己目前大部分都是靠腦袋記的，很不牢靠）</li>\n</ul>\n<p>與其說目標是分享，其實把內容整理成文章才是自己想達到的目標。自己目前寫文章的速度還很慢（也可能是自己太拖延啦…），也還沒找到一個好的內容形式還有習慣的生產方式，可能多寫就會有了吧？總之也是且戰且走。</p>\n<p>第一次這麼仔細的去思考這些關於新年新希望的問題，不過難道分析這麼多，自己的願望就會達成嗎？完全不一定，搞不好和過去一樣完全無法答標也說不定。還有雖然上面列的是新年目標，但也不代表 2021 只完成這些目標而已，反而這些目標優先度會比求職、提昇技能優先順序來的更低。</p>\n<h3 id=\"%E7%B8%BD%E7%B5%90\"><a class=\"direct-link\" href=\"#%E7%B8%BD%E7%B5%90\">#</a> <strong>總結</strong></h3>\n<p>關於 2020 的一個總結，還有 2021 的期許也差不多到這邊了。2020 對我而言算是一個轉捩點，不過 2021 更像是一個起點，像進入下一個樂章的感覺。對於 2021 ，就先走走看再說吧。</p>\n<p>Big guy is john，祝大家新年快樂。</p>\n",
      "date_published": "2021-01-02T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/mini-jsonp/",
      "url": "https://lavi-blog.vercel.app/posts/mini-jsonp/",
      "title": "[極短篇] JSONP",
      "content_html": "<h2 id=\"%E4%BB%80%E9%BA%BC%E6%98%AF-jsonp\"><a class=\"direct-link\" href=\"#%E4%BB%80%E9%BA%BC%E6%98%AF-jsonp\">#</a> 什麼是 JSONP</h2>\n<p>瀏覽器的同源政策讓我們沒辦法輕易地使用非同源的 response，但是其實 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin\">有些元素</a>是不受這個限制的。想想我們可以很自由的嵌入外界的圖片、 library 或者字體嗎？像是 <code>&lt;img&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;img&gt;</code>（原因可能這些東西本來就很常存取外部資源？），所以我們就可以利用這些 tag 來繞過瀏覽器的 CORS 接收非同源的 reponse。那要怎麼做呢？</p>\n<h2 id=\"%E6%80%8E%E9%BA%BC%E7%94%A8-jsonp\"><a class=\"direct-link\" href=\"#%E6%80%8E%E9%BA%BC%E7%94%A8-jsonp\">#</a> 怎麼用 JSONP</h2>\n<p>如果 <code>index.html</code> 裡面有這麼一段程式碼，那會跑出什麼東西？</p>\n<pre><code>// index.html\n&lt;script&gt;\n    console.log({name: 'John', age: 14, birth: 1993});\n&lt;/script&gt;\n</code></pre>\n<p>當然就是在 console 裡面 print 出 <code>{name: 'John', age: 14, birth: 1993}</code> 這段內容，非常之直覺又簡單。那如果是這樣呢？</p>\n<pre><code>// index.html\n&lt;script src=&quot;cross-origin.com/jsonp.js&quot;&gt;\n</code></pre>\n<pre><code>// cross-origin.com/jsonp.js\nconsole.log(`{name: 'John', age: 14, birth: 1993}`);\n</code></pre>\n<p>我們在 index.html 中引入 <code>cross-origin.com</code> 中的 <code>jsonp.js</code>，引入之後會執行 <code>console.log({name: 'John', age: 14, birth: 1993});</code> 。所以做的事情其實和上一段基本上是一樣的。唯一不一樣的是，我們 print 出來的內容是從另外一個網域拿到的，而且 <code>console.log()</code> 這個指令也是在引入的 <code>jsonp.js</code> 所呼叫的。</p>\n<p>好，這樣就有點 JSONP 的味道出現了。接下來是重頭戲，下面這樣的程式碼會做甚麼事情？</p>\n<pre><code>// index.html\n&lt;script&gt;\n    function print(content) {\n        console.log(content)\n    }\n&lt;/script&gt;\n&lt;script src=&quot;cross-origin.com/jsonp.js&quot;&gt;\n</code></pre>\n<pre><code>// cross-origin.com/jsonp.js\nprint(`{name: 'John', age: 14, birth: 1993}`);\n</code></pre>\n<p>一樣是 print 出 <code>{name: 'John', age: 14, birth: 1993}</code> 沒錯。但是 jsonp.js 裡面所呼叫的 print 指令卻是是我們自己定義的 function。這個基本上就是 JSONP 運作的方式了，做了兩件事情：</p>\n<ol>\n<li>透過 <code>&lt;script&gt;</code> 引入外部 Server (另一個網域) 的程式碼</li>\n<li>外部 Server 的程式碼中<strong>執行本地的處理資料的 function</strong>，但在 function 中<strong>放入外部的資料</strong>。</li>\n</ol>\n<p>JSONP 就是利用這樣的方式繞過瀏覽器的同源政策，不過我們也發現，整個 JSONP 的精髓都在那個引入的 js 檔案裏面的，要放入我們需要的資料，還需要執行我們本地的 function。</p>\n<p>所以重點就變成：外部的 Server 要怎麼去產生執行的 function？也就是我們剛剛的：</p>\n<pre><code>// cross-origin.com/jsonp.js\nprint(`{name: 'John', age: 14, birth: 1993}`);\n</code></pre>\n<p>這點我們通常透過 url 來解決，可能是在後面放上本地中處理資料 function 的名子，像是這樣：</p>\n<pre><code>src=&quot;cross-origin.com/?jsonp=callback\n</code></pre>\n<p>當 url 設定成這樣，Server 就可以動態產生 js 檔案（也就是依照你的 url 後面的參數去量身訂做一個屬於你的 js 檔案，這對後端來說輕而易舉）。</p>\n<h2 id=\"jsonp-%E5%B0%8F%E8%88%89%E4%BE%8B\"><a class=\"direct-link\" href=\"#jsonp-%E5%B0%8F%E8%88%89%E4%BE%8B\">#</a> JSONP 小舉例</h2>\n<p>最後，在舉個例子，我們看看 <a href=\"https://dev.twitch.tv/docs/v5#json-and-jsonp\">Twitch API</a> ，除了使用 AJAX，要怎麼用 JSONP 來獲取資料：</p>\n<blockquote>\n<p>All API endpoints support JSONP by providing a callback parameter with the request:</p>\n<p>curl -i <a href=\"https://api.twitch.tv/kraken?callback=foo\">https://api.twitch.tv/kraken?callback=foo</a></p>\n</blockquote>\n<p>恩，就在 url 的後面加上 <code>callback=foo</code> ， <code>foo</code> 就帶入自己處理資料的 function 名稱。 url 寫好之後在放入 <code>&lt;sciprt src=url&gt;</code> tag 中就行。</p>\n<p>話說，一開始看 docs 上面， web API 都會寫 curl ，都不知道那是啥，一點也不像 JS，不過後來才知道那只是用 curl 來做 request 的範例而已...</p>\n<p>Big Guy is John，感謝大家。</p>\n",
      "date_published": "2020-09-27T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/inside-look-modern-browser/",
      "url": "https://lavi-blog.vercel.app/posts/inside-look-modern-browser/",
      "title": "Inside look at modern web browser",
      "content_html": "<!-- summary -->\n<!-- 看完 inside-browser 系列文，整理後的筆記，簡單記錄下重點。 -->\n<!-- summary -->\n<p>大概看完了<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\">這個</a>系列，想寫一下筆記，現在這個程度看這個文章資訊量還對我來說還是蠻驚人的，雖然 Huli 會說當作科普來看就好，但還是做個筆記吧 XD。不然自己一定會忘記的。</p>\n<p>先概覽一下四個章節分別在講什麼：</p>\n<p>Part1 會講解說 CPU/GPU 各自的功用，還有講解 Process / Thread 之間的差異，而講解這些是為了理解說 chrome multi Process 的設計以及各個 Process 的分工。</p>\n<p>Part2 跟 Part3 會講到我覺得比較重要的部分。Part2 是從輸入瀏覽器到拿到 response 渲染前（這個階段稱作 navigation），Part3 則是從渲染。</p>\n<p>Part4 主要是提到說事件的觸發跟處理，瀏覽器怎麼樣對事件做優化，還有一些在事件上我們可以做的優化部分。</p>\n<p>大概是這樣，了解一下大概的架構，可能會比較好理解自己在哪裡還有在講什麼，比較有安全感，人總是會對未知感到恐懼。</p>\n<h2 id=\"part1-%E5%BA%95%E5%B1%A4%E8%99%95%E7%90%86%E4%BB%A5%E5%8F%8A%E7%80%8F%E8%A6%BD%E5%99%A8%E6%9E%B6%E6%A7%8B\"><a class=\"direct-link\" href=\"#part1-%E5%BA%95%E5%B1%A4%E8%99%95%E7%90%86%E4%BB%A5%E5%8F%8A%E7%80%8F%E8%A6%BD%E5%99%A8%E6%9E%B6%E6%A7%8B\">#</a> Part1 底層處理以及瀏覽器架構</h2>\n<h3 id=\"cpu%2Fgpu%2C-process%2Fthread\"><a class=\"direct-link\" href=\"#cpu%2Fgpu%2C-process%2Fthread\">#</a> CPU/GPU, Process/Thread</h3>\n<p>CPU 跟 GPU，常玩電腦組裝的應該蠻了解的。</p>\n<ul>\n<li>CPU 可以處理任何計算，但是單次處理量較少</li>\n<li>GPU 只能處理特定簡單的運算，但是處理量很大</li>\n</ul>\n<p>在網路上有看到有趣的比喻：</p>\n<blockquote>\n<p>GPU是一群小学生，扎堆算加减法；CPU是一个老教授，能解微积分。CPU的核比GPU复杂得多呢。</p>\n</blockquote>\n<p>這裡要理解的是 CPU 跟 GPU 各有所長，而瀏覽器也會利用他們不同的特性來做不同的運算。接下來我們要理解 Process （程序） 跟 Thread （執行緒）的差異。</p>\n<p>Process 裡面會有很多 Thread。OS 會分配資源給 Process，而 Process 裡面的 thread 可以共享這些資源以及共享彼此間的資訊，但 Process 間的資訊交換就必須透過 IPC (Inter Process Communication)</p>\n<p>上面這些都是關於電腦運作比較底層的基本知識，也必須要先知到這些才有辦法了解 chrome 瀏覽器的運行架構。</p>\n<h3 id=\"chrome-%E7%9A%84%E9%81%8B%E8%A1%8C%E6%9E%B6%E6%A7%8B\"><a class=\"direct-link\" href=\"#chrome-%E7%9A%84%E9%81%8B%E8%A1%8C%E6%9E%B6%E6%A7%8B\">#</a> Chrome 的運行架構</h3>\n<p>chrome 採 multi Process 架構。一個瀏覽器會有很多不同的任務，像是網路連線、UI、儲存還有每個 site 畫面的 render 等等的。而 Chrome 將這些不同的任務交給不同 Process 處理。這樣做的優點是當一個 Process 出問題時，直接關掉那個 Process 就可以，不會影響到其他 Process，舉例來說，Chrome 本身一個網頁的 render 就會作為一個 process，假設其中一個分頁當機了，就算關掉也不會造成影響。</p>\n<p>另一個好處是安全性，Process 間沒辦法輕易地共享資料，將分頁獨立出來可以防止讀取到其他分頁的資料。而這也是 chrome 本身使用 site Isolation 的原因，render Process 是以 site 也就是網頁為單位，如果頁面裡面有 iframe，那iframe 也會獨立成另一個 Process ，這樣可以防止 iframe 的 site 存取到頁面的資料。</p>\n<p>採 Multi Process 的缺點也是顯而易見，就是耗費資源（也是全世界都在詬病的點），尤其是 renderer Process，每一個 Process 都需要一具 V8 engine 才有辦法運行（不是汽車的 V8）。當硬體資源有限的時候，chrome 會把同一個 來源但不同分頁的 site 放進同一個 Process，用來兼顧安全性以及資源。</p>\n<p>除此之外，chrome 也可以透過將 Process Servicification（服務化），可以讓 Process 變成 thread 再組合成一個 process 來節省資源。</p>\n<h2 id=\"part2-navigation\"><a class=\"direct-link\" href=\"#part2-navigation\">#</a> Part2 Navigation</h2>\n<p>先講講說大家對於瀏覽器平常的認識。把網址輸入 address bar，像是 <code>www.google.com</code>，然後瀏覽器 tab 上面的 icon 會先轉轉轉，然後跳出頁面之後，就轉好了。</p>\n<p>上面是一般人的理解，身為前端工程師一定要知道的多一點。</p>\n<p>我們知道說當我們輸入 <code>www.google.com</code> 之後會先送到 DNS server 拿 IP，然後我們再用 IP 連到 server，並且送出 request。等我們收到 server 的 response 之後，瀏覽器會把我們收到的 response（先假設是 html） 解析成我們看到的網頁。</p>\n<p>不過還有一點是，現在 address bar 也可以當作 search bar，當你直接打 <code>google</code> ，就會跑出 <code>google</code> 的 google 搜尋結果，不過道理跟上面一樣，只是瀏覽器會幫你連到 google 的搜尋結果而已。</p>\n<p>現在可以了解更底層的東西，就是瀏覽器幫我們做了什麼，然後是瀏覽器的哪個部分去處理的，然後是這些部分是怎麼樣交換訊息。</p>\n<p>我們可以先把 Navigation 這個階段大概切成幾個步驟，但是這幾個步驟不一定是先後關係，有些可能是平行的。</p>\n<ul>\n<li>處理 adress bar 的 Input</li>\n<li>檢查 Input 有沒有對應的 cache 或者是 service worker</li>\n<li>送出 request</li>\n<li>初始化 renderer Process</li>\n<li>確定 type 並檢查 Body</li>\n</ul>\n<h3 id=\"%E5%88%A4%E6%96%B7-input\"><a class=\"direct-link\" href=\"#%E5%88%A4%E6%96%B7-input\">#</a> 判斷 Input</h3>\n<p>一樣的開始：輸入網址列。網址列本身是由 Browser Process 裡面的 UI thread 所處理的。Browser Process 處理網頁畫面（渲染）以外的所有東西，像是前面講到的瀏覽器 UI、儲存、網路等等...</p>\n<p>UI thread 會讀取你的 input，然後看你輸入的是不是 url，然後開始轉圈圈，接著他會初始化一個 network call，選擇適合的 protocal，接著就把資料丟到 network thread 去處理（這裡詳細的分工可能還是要看一下 docs 或者是 source code）。</p>\n<h3 id=\"%E6%B1%BA%E5%AE%9A-body-%E7%9A%84%E8%99%95%E7%90%86%E6%96%B9%E5%BC%8F\"><a class=\"direct-link\" href=\"#%E6%B1%BA%E5%AE%9A-body-%E7%9A%84%E8%99%95%E7%90%86%E6%96%B9%E5%BC%8F\">#</a> 決定 body 的處理方式</h3>\n<p>server 端的事情不講了，當我們收到 reaponse 之後，有一個東西會決定 response body 要清蒸還是要紅燒，那就是 content-type。瀏覽器會根據 response header 裡面的 content-type 還有 body 的內容（因為 content-type 可能會不見或者是出問題，還是要自己判斷 body 比較準\n）來<a href=\"https://source.chromium.org/chromium/chromium/src/+/master:net/base/mime_sniffer.cc;l=131\">判斷</a>說要怎麼處理，像是圖片的就會跑出圖片、檔案就會進行下載，不同的格式會有不同的處理方式。chromium 相較於各<s>小</s>大瀏覽器比較晚出現，因此這方面也參考了前人的做法，但最後只有 html 的內容才會被進行 render。</p>\n<h3 id=\"%E5%AE%89%E5%85%A8%E6%AA%A2%E6%9F%A5\"><a class=\"direct-link\" href=\"#%E5%AE%89%E5%85%A8%E6%AA%A2%E6%9F%A5\">#</a> 安全檢查</h3>\n<p>值得注意的部分，在這個階段也會檢查 body 有沒有連到怪怪的檔案或者是連到惡意的連結（應該是會有一個 black-list），並且會執行 <a href=\"https://www.chromium.org/Home/chromium-security/corb-for-developers\">CORB</a>（目前看下來這個功能是擋掉一些可疑的 request 方式跟 content-type 還有 body 格式的組合），在想這個部分做的可能不只這些，像是 CORS 的檢查可能也是這部分處理的，真的沒問題才放 response 通過。</p>\n<p>通過之後，network thread 通知 UI thread，而 UI thread 會開啟一個 renderer process，這裡有一種 UI thread 像是主控的感覺？不過我不清楚說是不是在架構設計裡就應該要以 UI 作為整個程式的主控，對 design pattern 還不熟。這裡有一個可以優化的點，Renderer Process 可以在 request 被送出去的時候就同步初始化，先處理一些不需要 response 的部分，等 response 到了之後就可以直接處理 Response。</p>\n<p>當 renderer Process 跟 Response 都 OK 之後就可以 GOGO 了，但是要要記得資料還在 Browser Process 裡面阿，所以要透過我們一開始有提到的 IPC 去傳遞資料給 renderer Process，然後就開始解析囉。</p>\n<h3 id=\"%E5%85%B6%E4%BB%96-browser-process-%E6%9C%83%E8%99%95%E7%90%86%E7%9A%84%E6%9D%B1%E8%A5%BF\"><a class=\"direct-link\" href=\"#%E5%85%B6%E4%BB%96-browser-process-%E6%9C%83%E8%99%95%E7%90%86%E7%9A%84%E6%9D%B1%E8%A5%BF\">#</a> 其他 Browser Process 會處理的東西</h3>\n<p>這裡還有幾個小細節：想一想自己的經驗，假設說網頁跑不出來一直轉，有時候我們會按上一頁返回到上一個頁面。所以我們就可以確定說，歷史紀錄是在 network 拿到 response 之前就確定好的，雖然文章沒有提到，但是我在猜說應該是在初始化 renderer Process 的時候就會處理好歷史紀錄的東西。</p>\n<p>還有當網頁載入完的時候，renderer Process 也會通知 Browser Process，要把網頁的 favicon 顯示出來。</p>\n<p>最後我們不要忘記當我們關閉分頁（site）的時候，Browser 會把我們的網頁放進歷史紀錄裡面做 cache，下次在拜訪這個網頁就可以直接跳出來。</p>\n<p><code>beforeunload</code> 這個事件會在從一個網址導向另一個網址時被觸發，文章裏面有提到，但是覺得沒有很困難，感覺像是小補充而已。</p>\n<h3 id=\"service-worker\"><a class=\"direct-link\" href=\"#service-worker\">#</a> Service worker</h3>\n<p>每次在 Navigation 的時候都會檢查 url 有沒有對應的 Service worker（後面簡稱 SW，讓網頁可以在被關閉的時候也能夠執行程序的東西，推薦<a href=\"https://medium.com/@kosamari/service-worker-what-are-you-ca0f8df92b65\">這篇</a>），有的話就會先執行 SW，因為可能 SW 裡面就有 cache 可以用了，沒有才進行 request。</p>\n<p>但如果 SW 早就決定說不要了怎麼辦，這樣不就會慢了一點嗎？尤其是 SW 又很複雜的時候，所以 FB 就不爽了，直接跟 chrome 說你想個辦法讓 SW 不會影響到 request 送出的速度（超兇的），就這樣有了 <a href=\"https://developers.google.com/web/updates/2017/02/navigation-preload\">Navigation Preload</a> 這個東西，人還是要有靠山說話才能夠大聲啊。</p>\n<h2 id=\"part3-render-pipeline\"><a class=\"direct-link\" href=\"#part3-render-pipeline\">#</a> Part3 Render Pipeline</h2>\n<p>這部分覺得蠻複雜的。但我覺得會是這幾個 Part 裡面最重要的部分，這會大大關係到網頁的效能，你的網頁跑起來卡卡的會跟這部分有很大的關係。</p>\n<p>Render 的中文又叫渲染，自己覺得這個翻譯蠻彆扭的，這個部分會將程式碼（就是 html, css, js）轉化成人類看得懂的文字還有畫面，這個部分分幾個階段，跟上一個 Part 不一樣，有<strong>嚴格的前後關係</strong>，這個步驟會稱作 Render Pipeline。</p>\n<ol>\n<li>Parsing</li>\n<li>Sytle Compute</li>\n<li>Layout</li>\n<li>Paint</li>\n<li>Composite</li>\n</ol>\n<p>首先是 Parsing 解析。這裡的大方向是把 html 的內容解析成 DOM tree，瀏覽器的入口點都是 html 檔案，而瀏覽器會將 html 轉化成瀏覽器還有我們可以操作的形式，那就是 DOM（document object model）。</p>\n<p>tag 有很多種，但是有幾種會影響到我們的 DOM tree，分別是 <code>&lt;script&gt;</code> 還有 <code>&lt;link&gt;</code> 跟 <code>&lt;img&gt;</code> （可能還有其他的）。這些東西會加載其他資源。加載資源要時間的！遇到這種要 request 的東西有個概念：提早做，放旁邊，好了在叫你。在 Navigation 中也是初始化 renderer Process 跟 Request 並行。所以 preload scanner 會先看看有沒有這些 tag，有的話就先交給 browser process （裡面的 network thread）去加載。</p>\n<p>除此之外，<code>&lt;script&gt;</code> 還可能會執行 JS。JS 有可能會改變先前的 DOM tree，所以這裡會先處理 JS 裡面的內容。</p>\n<p>這個部分會影響整個網頁的加載速度很大，若 JS 裡面並沒有會影響 DOM 的內容，可以使用 <code>async</code> 跟 <code>defer</code> 來優化。加載資源也可以透過 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content\">preload</a> 的 tag 屬性來指定什麼資源要先行加載。</p>\n<p>接下來是 style compute，可以先想一下說 CSS 到底是什麼？ CSS 是一堆規則，他指定了</p>\n<ol>\n<li>套用的範圍</li>\n<li>套用的樣式</li>\n</ol>\n<p>但是 CSS 沒有指定每個 element 要什麼樣式。</p>\n<p>這是視覺化的第一個步驟，計算每個 element 身上要套哪些 CSS（可以從 devtoole 的 compute 看到，有時後會比看 CSS 好用很多）。這部分還會把瀏覽器預設的 CSS 也加上去。</p>\n<p>從這一個步驟開始就是瀏覽器渲染引擎的工作了，想了解更多可以看看<a href=\"https://lauviah.coderbridge.io/2020/09/26/1-%E5%80%8B-div-%E5%92%8C-4-%E8%A1%8C-css-%E5%B0%B1%E8%83%BD%E6%9B%B4%E4%BA%86%E8%A7%A3%E7%80%8F%E8%A6%BD%E5%99%A8%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/\">小弟之前的文章</a>有提到。</p>\n<p>第二個步驟是 Layout，我會覺得這個步驟很像畫草稿，把所有的元素定位，不需要定位的去掉，額外要定位的東西加進來，而這個部分的結果叫做 Layout tree。</p>\n<p>什麼是不需要的跟另外要定位的？</p>\n<p>像是 <code>display: none</code> 就完全不會在畫面上出現，所以會在這部份去掉，只會留在 DOM 裡面，而偽元素就是 html 上面原本沒有的，就需要額外加上去。</p>\n<blockquote>\n<p>其實自己對這個東西蠻有興趣的，做個註記以後可以看<a href=\"https://www.youtube.com/watch?v=Y5Xa4H2wtVA\">BlinkOn 会议的一些访谈</a></p>\n</blockquote>\n<h3 id=\"paint\"><a class=\"direct-link\" href=\"#paint\">#</a> Paint</h3>\n<p>打好草稿，那下一個步驟當然就是就是塗色了。不，代誌不是像憨人想的那麼簡單，你忘了考慮分層。剛剛我們定位出了每個元素的 2D 位置，但是每個元素就像紙張一樣，上層會遮蓋掉下層。我們必須要處理這個問題才能夠塗色。</p>\n<p>所以瀏覽器會再遍歷一次 Layout tree，看看那些元素屬於上層那些屬於下層，然後得出說：先畫 A, C 再畫 B, D, E 這樣的順序，然後才開始繪製。有點像是一個一個的指令，告訴瀏覽器說先畫出什麼，再畫出什麼，這樣的指令稱作 Paint Record，這也是 Paint 產出的東西。</p>\n<p>這裡的 Paint 我的理解比較不像是開始繪製，而是制定一個繪製的順序。</p>\n<h3 id=\"composite\"><a class=\"direct-link\" href=\"#composite\">#</a> Composite</h3>\n<p>再理解這個步驟之前要先了解一個東西，叫做 Raster（光柵化），</p>\n<p>Chromium 會把所有的元素先分層然繪製出來。接著在合成 viewport 內的內容（這部分建議看文章，或是文章裡的這個<a href=\"https://developers.google.com/web/updates/images/inside-browser/part3/composit.mp4\">動畫</a>，用講得實在是很抽象），就像把整個內容全部都擺好，然後再用一個框來取景。這樣可以讓滾動更加滑順，因為內容都已經擺擺好了，只需要重新合成框框裡面的內容就好了。Composite 裡面又可以分為三個步驟。</p>\n<ol>\n<li>分層</li>\n<li>光柵化</li>\n<li>合成</li>\n</ol>\n<p>第一是分層。這個步驟 rederer Process 的 Main thread 會上一個步驟的 Layout tree 轉化成不同層的 Layer tree，也就是決定說那些東西要畫在同一層。我們可以透過 <code>will-change</code> 這個屬性，來強制幫元素分層，如果是舊的瀏覽器可以使用 <code>translateZ(0)</code>。文中是沒有特別提到說除了上面兩個 CSS 屬性以外有沒有其他分層的依據，不過我猜應該是有，除了強制分層應該也是會有一些基本的分層方式。</p>\n<p>有了 Layer tree 之後，Main thread 會把 Layer tree 的內容交給 composite thread，而 composite thread 會在把每一層的畫面切分之後，再交給 raster thread 進行 raster。</p>\n<p>這部分也會涉及優化，整個 Layer 很大，可能跟網頁一樣大。瀏覽器會優先處理比較靠近視窗的部分（接下來可能會瀏覽到的部分）。而且再切分時還會考慮到使用者可能會放大縮小，會把整個畫面切分成不同的大小再進行 raster。</p>\n<p>Raster 是啥？我們都知道說螢幕是由很多像素所組成的，但是瀏覽器裡面的資料會像這樣：</p>\n<pre><code>from 1,1  \nto 10,1\nto 10,10\nto 1, 10\nend 1, 1\n</code></pre>\n<p>螢幕是看不懂這個東西的，他只知道什麼座標的像素要呈現什麼顏色。把向量的內容變成螢幕可以呈現的點陣圖像就是 Raster。</p>\n<p>當瀏覽器會每一層都 Raster 好之後，就會開始合成。合成的概念跟 Photoshop 的影像平面化的概念很像，前面我們已經把每一層都 Raster 成點陣影像像這樣：</p>\n<pre><code>                 viewport    \nLayer 1     |          ccc     |\nLayer 2     |      bbbbbbbbbbbb|bbbb\nLayer 3  aaa|aaaaaaaaaaaaaaaaaa|\n</code></pre>\n<p>接下來我們只取 viewport 裡面的畫面，然後再把所有 Layer 合成一個畫面，就變成下面這樣：</p>\n<pre><code>composite   |aaaaaaaaaacccbbbbb|\n</code></pre>\n<p>到這裡我們就把一個 frame 處理好了，但只是一個。平常我們看影片的大概是一秒 30 張圖？電腦的操作必須要到一秒 60 幀（前面的&quot;張&quot;就是&quot;幀&quot;的意思）才夠滑順，當我們在滾動畫面的時候其實網頁是不斷地執行最後這個 composite 這個動作。但如果你有改變網頁中的元素，那就會需要重新 Parse，然後重新 render 了。</p>\n<h3 id=\"%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96\"><a class=\"direct-link\" href=\"#%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96\">#</a> 效能優化</h3>\n<p>就像剛剛提到的，如果 JS 導致畫面上新增元素，或者是有動畫呢？我們可以從頭檢視 render 的步驟（詳細屬性是甚麼可能要再查詢，這邊只是大致分而已）</p>\n<ol>\n<li>Parsing：html ,JS</li>\n<li>Sytle Computed：CSS seletor</li>\n<li>Layout：layout property</li>\n<li>Paint：Paint property</li>\n<li>Composite： Compositor-Only Properties\n<ol>\n<li>分層</li>\n<li>raster</li>\n<li>合成畫面</li>\n</ol>\n</li>\n</ol>\n<p>JS 會在最一開始被解析，而不同的 CSS 的屬性會在 render pipeline 的不同階段實現，當我們在利用 JS 新增元素時，Layout 跟 Paint 都需要重新執行（style computed 可能不用，看新增的元素有沒有 CSS）。</p>\n<p>而且從 Parsing 到 Paint的步驟都是在 renderer Process 的 Main thread 處理的，這是一個同步的過程（前面做完後面才能繼續執行）。假設這一個整個 render 畫面的流程超過 1/60 秒呢，尤其是 JS 執行的時間很容易就超過這個時間（JS 會在 Parse 階段就被解析執行）。剛剛有說過要一秒 60 幀我們肉眼才會覺得畫面滑順，如果網頁上有動畫，但 render 的運算速度超過 1/60 秒，那就會造成卡頓。</p>\n<p>要避免 JS 的執行阻塞到 render，理論上可以把 JS 切開來執行，或者是用 web worker 讓 JS 獨立到另外一個 thread。至於純粹 CSS 的 animation 或者是 transition ，大方向是不要影響到大部分流程的重繪，像是可以使用 Compositor-Only Properties：transform 、Opacity來處理動畫，就比使用 top, bottom 等 Layout property 來的節省資源。</p>\n<blockquote>\n<p>在想 render 的步驟可能跟計算機圖學有關，後來發現 illustrator 的輸出也有類似的方法。</p>\n</blockquote>\n<h2 id=\"part4-input-%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A7%B8%E7%99%BC\"><a class=\"direct-link\" href=\"#part4-input-%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A7%B8%E7%99%BC\">#</a> Part4 input 事件的觸發</h2>\n<h3 id=\"%E6%88%91%E5%80%91%E7%9A%84%E6%93%8D%E4%BD%9C%E6%80%8E%E9%BA%BC%E8%A7%B8%E7%99%BC-event\"><a class=\"direct-link\" href=\"#%E6%88%91%E5%80%91%E7%9A%84%E6%93%8D%E4%BD%9C%E6%80%8E%E9%BA%BC%E8%A7%B8%E7%99%BC-event\">#</a> 我們的操作怎麼觸發 event</h3>\n<p>接下來要提 input，input 不只是輸入東西而已，所有對網頁的操作對瀏覽器而言都是 input。前端當然很了解哪些東西是 input，畢竟每個學 JS 都會知道  <code>addEventListener</code>。那從瀏覽器的角度看，我們的操作是怎麼觸發 EventListener 的？</p>\n<p>我們可能會以為是某個按鈕的範圍可以接收到我們的 click，錯，這就是菜鳥工程師的自私想法，一點都沒有顧慮到瀏覽器。</p>\n<p>當你進行某個操作時，操作的到的是 Browser Process。也就是你到的是瀏覽器，不是網頁。 Browser Process 會把你點擊到的座標以及事件傳給 Renderer Process。那 Render Process 會怎麼處理呢？</p>\n<p>這裡先等等，我們先看看 Event Listener 是怎麼加進去的。</p>\n<p>當你為 element 加上 Event Listener 之後，Composite thread 會把 element 的範圍登記為 non-fast scrollable region。</p>\n<p>當座標傳進 Render Process 之後會經歷以下步驟</p>\n<ol>\n<li>這個座標是不是在 non-fast scrollable region 裡面</li>\n<li>會透過 Paint Record，查找說這個位置有繪製甚麼元素</li>\n<li>觸發事件</li>\n</ol>\n<p>若 1. 的步驟成立，Compisite thread 就會把 event 丟到 Main thread 處理。所以才會稱作 non-fast scrollable region （非立即滾動區），因為當這個區域中發生事件之後，就必須處理完事件還有 callback 才能夠繼續 render 畫面（還記得 JS 的執行是在 Parse 階段，導致阻礙到後面事件的執行），但是這樣就會造成卡頓，可以加上 <code>passive:true</code> 來讓 callback 不要阻礙到後面程序的執行。</p>\n<p>這邊自己在想說是不是就是讓 callback 變成非同步的意思，讓 render 後續的程序跟 callback 並行執行。我想這應該不是完全沒有風險，還有想到一個情況是有可能還沒 render 好，callback 就跑好，但是又影響到 DOM， 那就又需要重新 render，這樣就會造成浪費資源。</p>\n<h3 id=\"passive%3Atrue-%E5%B8%B6%E4%BE%86%E7%9A%84-preventdefault()-%E5%BB%B6%E9%81%B2%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#passive%3Atrue-%E5%B8%B6%E4%BE%86%E7%9A%84-preventdefault()-%E5%BB%B6%E9%81%B2%E5%95%8F%E9%A1%8C\">#</a> passive:true 帶來的 preventDefault() 延遲問題</h3>\n<p>文中還有提到一個狀況是說，如果你將 callback 和 render 同步運行。那麼在 callback 還沒執行到 preventDefault() 時，預設的事件可能就已經送出了，文中的是用橫向的 pointermove（觸控螢幕的滑動） 來舉例。</p>\n<pre><code>document.body.addEventListener('pointermove', event =&gt; {\n    if (event.cancelable) { //cancelable 只是為了確認說這個 event 能不能取消\n        event.preventDefault(); // block the native scroll\n        /*\n        *  do what you want the application to do here\n        */\n    }\n}, {passive: true});\n</code></pre>\n<p>為了不讓預設的垂直滾動運行，我們會執行 preventDefault()，而且又為了可以讓橫向滾動更滑順而加了 <code>passive: true</code>。但卻因為 <code>passive: true</code> 的關係，不會等待 JS 運行，導致說 JS 可能還沒運行到 event.preventDefault()，來阻止預設的垂直滾動行為，就先進行後面 render 的步驟，viewport （畫面）就會先向下滾動。</p>\n<pre><code>原本的狀況\n|---------preventDefault()--------||----scroll-----|\nJS                                  後面的 render步驟\n\npassive:true\n|----scroll-----|\n|---------preventDefault()--------|\nscroll 先被觸發了，才進行進行 preventDefault()\n</code></pre>\n<p>要解決這樣的狀況，可以直接使用 <code>touch-action: pan-x</code> 直接禁止掉橫向移動。其他事件也是同樣道理，可以找到禁止 event 的 CSS。</p>\n<h3 id=\"event-delegation-%E7%9A%84%E6%95%88%E8%83%BD%E5%95%8F%E9%A1%8C\"><a class=\"direct-link\" href=\"#event-delegation-%E7%9A%84%E6%95%88%E8%83%BD%E5%95%8F%E9%A1%8C\">#</a> event delegation 的效能問題</h3>\n<p>另外一個要知道的是 event delegation。如果你在母元素上加上 listener，相當是把整個母元素都變成 non-fast scrollable region。就變成要隨時監聽母元素的 event，但範圍太大（你把 body 設為 delegation），就會非常的耗費資源。</p>\n<h3 id=\"%E9%80%A3%E7%BA%8C%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%AF%80%E6%B5%81\"><a class=\"direct-link\" href=\"#%E9%80%A3%E7%BA%8C%E4%BA%8B%E4%BB%B6%E7%9A%84%E7%AF%80%E6%B5%81\">#</a> 連續事件的節流</h3>\n<p>像是滑鼠滾動、移動等等的事件，滑鼠一秒會觸發大概一百次，這些是見我們稱為 continuous events（連續事件） ，這個數字超過我們螢幕更新的頻率，為了節省資源，瀏覽器會把 1/60 秒內的事件合併成一次，這種把一定時間內的觸發事件合併成一次來節省資源的模式稱作 throttle（節流）。</p>\n<p>但節流不一定是好的，假設我們在做一些繪圖軟體，反而會因為觸發事件被合併，而忽略了一些細節，在 event 中，我們可以用 event.getCoalescedEvents() 來獲得原始的數據：</p>\n<pre><code>window.addEventListener('pointermove', event =&gt; {\n    const events = event.getCoalescedEvents();\n    for (let event of events) {\n        const x = event.pageX;\n        const y = event.pageY;\n    }\n});\n</code></pre>\n<p>從這個 API 看來，每一次的 event 其實都會被監聽到，但是會有一個 throttle 來降低觸發的頻率（忽略一些觸發）。而 <code>event.getCoalescedEvents()</code> 就是可以跳過 throttle 的控制，直接接受 event。</p>\n<h3 id=\"%E7%B6%B2%E7%AB%99%E5%84%AA%E5%8C%96\"><a class=\"direct-link\" href=\"#%E7%B6%B2%E7%AB%99%E5%84%AA%E5%8C%96\">#</a> 網站優化</h3>\n<p>其實講那麼多，為什麼我們要理解瀏覽器？無非就是想要優化網站的性能。但是要優化總不能以順不順這種主觀的感受來判斷，文中也提供了一些資源：</p>\n<ul>\n<li>\n<p>LighHouse 可以幫你的網站評分，來告訴你說你的網站有哪些做的比較不好而且可以怎麼改善，打開 Devtools 的更多工具就可以用了，而且不只效能優化，還有 Web accessibility, SEO 等等指標</p>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/web/tools/chrome-devtools/speed/get-started\">Optimize Website Speed With Chrome DevTools</a> 來看說怎麼用 Devtools 來優化網頁效能。</p>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/web/updates/2018/06/feature-policy\">Feature Policy</a> 裡面告訴你說一些網頁的雷不要踩。</p>\n</li>\n</ul>\n<h2 id=\"%E5%BE%8C%E8%A8%98\"><a class=\"direct-link\" href=\"#%E5%BE%8C%E8%A8%98\">#</a> 後記</h2>\n<p>原本只是想做個筆記的，沒想到打了蠻多東西的，這篇文章不是什麼很嚴謹的內容，更不是什麼把很難的內容變得簡單那種很偉大的東西，只是自己對於這幾篇文章思考的結果而已。</p>\n<p>瀏覽器的東西博大精深，這是篇很好的入門點，身為菜鳥工程師的自己看完這幾篇也覺得說自己的腦袋炸了，如果這一篇能夠幫助到和我一樣的人真是再好不過了。</p>\n<p>參考資料：\n<a href=\"https://juejin.im/post/6844903695600058375\">[译] 现代浏览器内部揭秘（第四部分）</a>\n<a href=\"https://juejin.im/post/6844903692894732295\">[译] 现代浏览器内部揭秘（第三部分）</a>\n<a href=\"https://juejin.im/post/6844903692890537992\">[译] 现代浏览器内部揭秘（第二部分）</a>\n<a href=\"https://juejin.im/post/6844903679389073415\">[译] 现代浏览器内部揭秘（第一部分）</a>\n<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part1\">Inside look at modern web browser (part 1)</a>\n<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\">Inside look at modern web browser (part 2)</a>\n<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part4\">Inside look at modern web browser (part 3)</a>\n<a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part4\">Inside look at modern web browser (part 4)</a></p>\n",
      "date_published": "2020-09-27T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/1-div-4-css/",
      "url": "https://lavi-blog.vercel.app/posts/1-div-4-css/",
      "title": "1 個 div 和 4 行 CSS 就能更了解瀏覽器渲染引擎",
      "content_html": "<!-- summary -->\n<!-- 相同 CSS 但各瀏覽器不同渲染的結果，讓你知道渲染引擎如何運作 -->\n<!-- summary -->\n<p>有一天看著阮一峰的 <a href=\"http://www.ruanyifeng.com/blog/2018/07/weekly-issue-14.html\">科技愛好者周刊</a>，突然看到 <a href=\"https://codepen.io/MartijnCuppens/pen/MXojmw\">這個東西</a> 。</p>\n<p><a href=\"https://twitter.com/Martijn_Cuppens/status/1015169981368225793\">@Martijn_Cuppens</a> 寫了一個空的 div 還有幾行 CSS，這個 div 就能在瀏覽器上渲染出不同的圖形如下。</p>\n<figure tabindex=\"1\"><img src=\"/img/post/0__nHm6zS0QfERpQAzz.jpg\" alt=\"\"></figure>\n<p>驚！勾起小弟一點好奇心，CSS 也可以做 browser，雖然使用 window 沒辦法使用 safari，來測試，而且 codepen 也不支持 IE，但還是利用手邊的瀏覽器還有一些服務像是 <a href=\"https://www.browserling.com/\">browserling</a>, <a href=\"https://www.lambdatest.com/\">lambdatest</a> 來測試。</p>\n<ul>\n<li>Edge 的結果，這裡是使用 Microsoft Edge 44.18362.449.0 版本的 edge ，所以還沒有換到最新的基於 chromium 的版本。</li>\n</ul>\n<figure tabindex=\"2\"><img src=\"/img/post/0__u6QZiPRtH2ENt1Ub.jpg\" alt=\"\"></figure>\n<ul>\n<li>Firefox 的結果，版本是 76</li>\n</ul>\n<figure tabindex=\"3\"><img src=\"/img/post/0__Awj74dFF__OVvhDS0.jpg\" alt=\"\"></figure>\n<ul>\n<li>用 browserling ，firefox ver.68 在 window 7 上測試的結果是</li>\n</ul>\n<figure tabindex=\"4\"><img src=\"/img/post/0__DeOeROeZjCJ51iTG.jpg\" alt=\"\"></figure>\n<ul>\n<li>chrome 的結果，版本是 84.0.4147.105</li>\n</ul>\n<figure tabindex=\"5\"><img src=\"/img/post/0__UufqtVjO3cWW5I6I.jpg\" alt=\"\"></figure>\n<ul>\n<li>用 lambdatest 在 safari 10.1 上面測試的結果。 codepen 就是傲嬌，嫌不支援又 render 出來</li>\n</ul>\n<figure tabindex=\"6\"><img src=\"/img/post/0__KD8KruS4a4ly8Jr0.jpg\" alt=\"\"></figure>\n<ul>\n<li>用 lambdatest 在 opera 68 上面測試的結果</li>\n</ul>\n<figure tabindex=\"7\"><img src=\"/img/post/0__XqGjXjT5cmL2Ty__q.jpg\" alt=\"\"></figure>\n<p>結果大概是這樣。會有這些結果其實不意外，每個瀏覽器都有自已的渲染引擎，一個 HTML 跟 CSS 卻各自表態，所以實現出來的東西當然也是不一樣。不過厲害的是這個簡單的 CSS 竟然剛好可以在這些主流(?)瀏覽器上可以顯示不一樣的結果。</p>\n<h3 id=\"%E9%A1%AF%E7%A4%BA%E7%B5%90%E6%9E%9C%E8%88%87%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E9%97%9C%E4%BF%82%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E9%A1%AF%E7%A4%BA%E7%B5%90%E6%9E%9C%E8%88%87%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E9%97%9C%E4%BF%82%EF%BC%9F\">#</a> 顯示結果與瀏覽器的關係？</h3>\n<p>為什麼不同的瀏覽器，但是 Render 的內容出來是一樣的？但有些相同瀏覽器，版本不同卻有不同的結果。</p>\n<p>這就得講到剛剛提到的<a href=\"https://en.wikipedia.org/wiki/Browser_engine\"><strong>渲染引擎</strong></a>，渲染引擎的工作之一就是把 HTML 還有 CSS 的程式碼轉換成我們看的到的圖形介面。（其實這裡自己對渲染引擎還有很多不了解，有錯誤在麻煩各位提點。）</p>\n<p>雖然是不同的瀏覽器，但如果使用相同的渲染引擎，那理所當然會渲染出同樣的畫面（像是筆電有各種牌子，但是作業系統都是 windows，所以畫面相同）。反之，就算是同樣的瀏覽器，可能因為開發成本過高或者是各種原因，不同的版本也可能使用不同的渲染引擎；抑或是引擎本身有更新，也會導致渲染出來的內容不一樣。</p>\n<p>在不同版本更換渲染引擎這點，對前端開發最著名 也是最可喜可賀的案例就是 Edge 吧。從 2020.1.15 開始，Edge 開始基於 <a href=\"https://zh.wikipedia.org/wiki/Chromium\">Chromium</a> 開發，理所當然地也沿用了 Chromium 的渲染引擎。</p>\n<p><img src=\"/img/post/0__pP9oy__w25Nzt1RqV.jpg\" alt=\"\">\n<img src=\"/img/post/0__H3xqFd1UZ6UBsq83.jpg\" alt=\"\"></p>\n<p>雖然沒有測試新版的 edge ，不過可想而知應該會得到相同的結果。</p>\n<p>那既然提到了渲染引擎，那麼目前各瀏覽器的渲染引擎又是那些呢？其實可以從上面的結果大概知道有哪幾種引擎，我們先複習一下剛剛那張圖。</p>\n<figure tabindex=\"8\"><img src=\"/img/post/0__j206rgz3EuduI8bn.jpg\" alt=\"\"></figure>\n<p>可以看到有 Firefox, Edge, Chrome, Safari, IE 這五種瀏覽器各呈現不同的方塊。也各代表不同的渲染引擎：</p>\n<h3 id=\"css-prefix\"><a class=\"direct-link\" href=\"#css-prefix\">#</a> CSS prefix</h3>\n<p>知道有這些渲染引擎有甚麼用？還記得有時候我們會做下面這件事情。也就是幫 CSS 的屬性加上 prefix</p>\n<p><a href=\"https://gist.github.com/9abe6552429875722405b74998825e3b\">https://gist.github.com/9abe6552429875722405b74998825e3b</a></p>\n<p>看到前面的 prefix： <code>-webkit-</code>, <code>-moz-</code> 可能覺得有些眼熟。是的，這些 prefix 就是要寫給渲染引擎看的。有一些比較新或者是還沒被廣泛應用的 CSS 屬性需要加上 prefix 才可以在特定的瀏覽器正常運作。</p>\n<p>不過當去查資料時，會發現支援 chrome 還有 safari 的 prefix 都是 <code>-webkit-</code> ，這是因為 chrome 的引擎 Blink 是從 WebKit <a href=\"https://zh.wikipedia.org/wiki/WebKit#%E9%96%8B%E7%99%BC%E5%88%86%E8%A3%82\">分出來的</a>。所以才會同樣使用 <code>-webkit-</code> ，不過由於實際上是不同的引擎，所以可能會遇到同樣的 CSS 屬性，webkit / Blink 引擎要加 prefix 但是另一個不用加的情形。</p>\n<h3 id=\"css-%E6%80%8E%E9%BA%BC%E5%B0%8E%E8%87%B4%E9%80%99%E7%A8%AE%E6%83%85%E5%BD%A2%E7%9A%84%EF%BC%9F\"><a class=\"direct-link\" href=\"#css-%E6%80%8E%E9%BA%BC%E5%B0%8E%E8%87%B4%E9%80%99%E7%A8%AE%E6%83%85%E5%BD%A2%E7%9A%84%EF%BC%9F\">#</a> CSS 怎麼導致這種情形的？</h3>\n<p>講了那麼多，不過到底是甚麼屬性導致這些瀏覽器各自表態？我們看看 CSS 的原始碼。</p>\n<p><a href=\"https://gist.github.com/08528f98399d9daa91e00ecf1c7e8c18\">https://gist.github.com/08528f98399d9daa91e00ecf1c7e8c18</a></p>\n<p>去掉置中的屬性，真正有趣的是 div 裡面的下面四個。</p>\n<p><a href=\"https://gist.github.com/e05825df9927e6228f3041d3ce72184b\">https://gist.github.com/e05825df9927e6228f3041d3ce72184b</a></p>\n<p><code>width</code> 以及 <code>height</code> 賦予元素高度以及寬度。那 <code>outline</code> 做了些甚麼？我們看一下 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline-style\">MDN</a> 上面的說法：</p>\n<blockquote>\n<p><em>An outline is a line that is drawn around an element, outside the border.</em></p>\n</blockquote>\n<p>outline 可以在 border 外面再加上邊框。而 <code>outline</code> 這個屬性是 <code>outline-style</code>, <code>outline-width</code>, <code>outline-color</code> 這三個屬性的簡寫。分別設定樣式、寬度還有顏色。 案例中的 <code>inset</code> 代表著 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/outline-style\">outline 會是嵌入狀的樣式</a> 。</p>\n<figure tabindex=\"9\"><img src=\"/img/post/0__5NPDlxYpxbvLVKcP.jpg\" alt=\"\"></figure>\n<p>而 <code>outline-offset</code> 則是設置 outline 的偏移，剛剛講說 outline 可以在 border 外面再加上邊框， <code>outline-offset</code> 的數值可以讓 border 跟 outline 之間新增距離，也就是 border 跟 outline 之間會有間距的意思。</p>\n<figure tabindex=\"10\"><img src=\"/img/post/0__Iq3kO5DG9__Lu6l3Q.jpg\" alt=\"\"></figure>\n<blockquote>\n<p><em>可以看到 offset 增加了 border 跟 outline 之間的空間。</em></p>\n</blockquote>\n<p>那跟呈現剛剛那樣的形狀有甚麼關係？我們先關掉 <code>outline-offset</code> 看看結果。</p>\n<figure tabindex=\"11\"><img src=\"/img/post/0__WmeLVd5rzByrYG9t.jpg\" alt=\"\"></figure>\n<p>可以看到其實蠻正常的，因為沒有 <code>border</code>，所以就是在一個空白的 <code>div</code> 外面加上粗度 100 的 <code>outline</code>，然後用 <code>inset</code> 的樣式。</p>\n<p>找到兇手了！就是 <code>outline-offset</code> ！</p>\n<figure tabindex=\"12\"><img src=\"/img/post/0__tmHWGl807CtouMtY.jpg\" alt=\"\"></figure>\n<p>我們看看這 <code>outline-offset</code> 幹了甚麼好事。</p>\n<p><code>outline-offset: -125px;</code> 代表在 border 外面加上 <code>-125px</code> 的間距，這到底是甚麼意思？如果說正值是以 border 為準，從border 向外推 offset 的距離再開始新增 outline，那負值可以說是向內推再開始新增 outline。</p>\n<p><img src=\"/img/post/0__iwKcs65P8zYKsd__0.jpg\" alt=\"\">\n<img src=\"/img/post/0__swXYDgauMZvdFWCU.jpg\" alt=\"\"></p>\n<blockquote>\n<p><em>因為向內 30px 所以和 border 是同樣的位置，但是 outline 會在 border 之上，所以把 border 遮住了。</em></p>\n</blockquote>\n<p>如果我們把數值改成 <code>outline-offset: -50px;</code> 那會怎麼樣？</p>\n<figure tabindex=\"13\"><img src=\"/img/post/0__W3XiCUbIyfTDO7CZ.jpg\" alt=\"\"></figure>\n<p>這個結果還算蠻合理的，寬和高都是 100px，所以 <code>outline-offset: -50px;</code> 會把整個 div 。那如果數值在繼續降低呢？讓我們繼續看下去。</p>\n<p><img src=\"/img/post/0__MkOcmyZnr6KsrFk0.jpg\" alt=\"\">\n<img src=\"/img/post/0__xwUfJfjHCodPvV8z.jpg\" alt=\"\">\n<img src=\"/img/post/0____3RJrP8pQdXqkItP.jpg\" alt=\"\"></p>\n<p>其實降低到比自身的大小還小我已經不知道發生甚麼事情了… 我想這應該可以說是一個 bug 吧（又者是彩蛋？）。不過可以看到其實數值小於 <code>-100</code> 就可以看到雛型了，數值特別設為 <code>-125</code> 應該只是為了美妙的圖案而已。</p>\n<p>上面的範例都是用 chrome 開啟的，因為 Blink 有自己的算法，小弟也不太清楚這塊，如果有人了解說是哪一個部分會處理到這塊或者是有一些方向歡迎私訊小弟…</p>\n<p>不過我們終於找到答案了，解開說為什麼只是一個 <code>div</code> 的 CSS 。竟然會導致在不同的瀏覽器有不同的圖案呈現：</p>\n<blockquote>\n<p><em>因為</em> <code>_outline-offset_</code> <em>的偏移設為負數，並且小於能夠縮退的自身的高度和寬度，導致渲染引擎的算法渲染出 不可理解的 特殊形狀，</em></p>\n</blockquote>\n<h3 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h3>\n<p>看到這個 case 其實蠻有趣的，不過因為 twitter 上已經是 2018 的文章了，時代在進步，瀏覽器也在更新中，所以現在這個 case 在不同的瀏覽器上已經沒辦法完全渲染出不同的圖形了。</p>\n<p>這個東西可以應用在哪？請諒小弟才疏學淺…我也不知道，反正就是很酷就對了。不過我們可能可以嘗試更多不同的 CSS 屬性組合，找一些 CSS 數值的 edge case，可能也有相同的效果。</p>\n<p>如果有甚麼想法可以多多交流，有錯誤也歡迎在下面指正或者是留言。 Big guy is John，感謝各位收看。</p>\n<p><em>Originally published at</em> <a href=\"https://gist.github.com/1290f33eca120c10ff394ed1218a53cc\"><em>http://github.com</em></a><em>.</em></p>\n",
      "date_published": "2020-09-26T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/mini-why-iife/",
      "url": "https://lavi-blog.vercel.app/posts/mini-why-iife/",
      "title": "[極短篇] 為什麼要用 IIFE",
      "content_html": "<h1 id=\"%E7%82%BA%E4%BB%80%E8%A6%81%E7%94%A8-iife\"><a class=\"direct-link\" href=\"#%E7%82%BA%E4%BB%80%E8%A6%81%E7%94%A8-iife\">#</a> 為什要用 IIFE</h1>\n<h3 id=\"%E9%98%B2%E6%AD%A2%E6%B1%A1%E6%9F%93%E5%85%A8%E5%B1%80%E8%AE%8A%E6%95%B8\"><a class=\"direct-link\" href=\"#%E9%98%B2%E6%AD%A2%E6%B1%A1%E6%9F%93%E5%85%A8%E5%B1%80%E8%AE%8A%E6%95%B8\">#</a> 防止污染全局變數</h3>\n<p>因為 var 是 依照 function 來區分 scope(function scope) 的，所以以前都會用 IIFE 來避免汙染。但現在的 const 還有 let 都是 block scop。所以如果怕污染可以直接用大括號包起來就可以。</p>\n<pre><code>{\n    const a = &quot;123&quot;;\n    let b = &quot;456&quot;\n}\n</code></pre>\n<p>但是，但是，就是有個但是！如果不支援 ES6 呢？所以還是用 IIFE 吧。</p>\n<h3 id=\"%E9%98%B2%E6%AD%A2%E5%85%A7%E9%83%A8%E8%AE%8A%E6%95%B8%E8%A2%AB%E5%AD%98%E5%8F%96\"><a class=\"direct-link\" href=\"#%E9%98%B2%E6%AD%A2%E5%85%A7%E9%83%A8%E8%AE%8A%E6%95%B8%E8%A2%AB%E5%AD%98%E5%8F%96\">#</a> 防止內部變數被存取</h3>\n<p>這個自己還沒有用到過。可以看下面這個 case。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> uniqueId <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">id_</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">uniqueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"id_1\"</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">uniqueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"id_2\"</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">uniqueId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"id_3\"</span></code></pre>\n<p>可以發現說，除了直接讀取 uniqueID 之外，沒有辦法存取到裡面的 count 的值。這樣就完全保證了裡面的東西不會被用到。這樣可以保證內部變數的隱私性。</p>\n<p>JS 有一種 design pattern -  <a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript\">revealing module pattern</a> 很依賴這樣的模式</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">let</span> counterValue <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token operator\">++</span>counterValue<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><br>    <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> counterValue<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span><br><br>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>counter<span class=\"token punctuation\">.</span><span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre>\n<p>你只有使用 counter.increment() 才能夠操作 <code>counter.value</code>，而這樣的模式可以保護內部的參數。</p>\n<h3 id=\"%E5%B9%AB-library-%E6%96%B0%E5%A2%9E%E5%88%A5%E5%90%8D%E3%80%82\"><a class=\"direct-link\" href=\"#%E5%B9%AB-library-%E6%96%B0%E5%A2%9E%E5%88%A5%E5%90%8D%E3%80%82\">#</a> 幫 Library 新增別名。</h3>\n<p>如果你用了兩個名子一樣的 library，就可以把整個 library 的東西包起來作為一個變數。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">somethingElse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>可以像這樣都包起來 然後指定給一個 variable。這種方式稱作 alias variable 給 library 一個別稱，讓同樣名子的 library 不會互相汙染，也更方便使用。</p>\n<h3 id=\"%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%92%B0%E5%A2%83%E5%AD%98%E5%8F%96-global-object%EF%BC%9A\"><a class=\"direct-link\" href=\"#%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%92%B0%E5%A2%83%E5%AD%98%E5%8F%96-global-object%EF%BC%9A\">#</a> 在不同的環境存取 global object：</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><span class=\"token comment\">// ...</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>如果有跨環境執行（例如一段程式碼在 browser 和 node.js 都需要執行）的狀況時，在這種情形 global object 的名稱不一樣，browser 是 window, node 是 global，那麼就可以用這種方式來統一存取 global object。</p>\n<h3 id=\"%E5%84%AA%E5%8C%96%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E5%90%8D%E7%A8%B1\"><a class=\"direct-link\" href=\"#%E5%84%AA%E5%8C%96%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E5%90%8D%E7%A8%B1\">#</a> 優化程式碼的名稱</h3>\n<p>如果在你的 code 裡面用到很多很多全局變數的話，那你的 code 裡面會充滿著 window 或者是 global。 這時候你就可以用像剛剛 alias variable 的方式。</p>\n<pre><code>(function(w, d, u) {\n  // ...\n})(window, document);\n</code></pre>\n<p>這樣就可以讓 uglyfyjs 等等的 JS minifier 來縮減變數名稱。</p>\n<p>而且這樣做還有另外一個優點，因為局部變數比全局變數處理的時間還要快。所以如果用到很多的全局變數可以這樣處理。</p>\n<blockquote>\n<p>Local variables are faster to resolve than the global variables, but this is on a huge scale and you’ll never notice the speed increase - but also worth considering if we’re referencing our globals a lot!</p>\n<p><a href=\"https://ultimatecourses.com/blog/what-function-window-document-undefined-iife-really-means\">https://ultimatecourses.com/blog/what-function-window-document-undefined-iife-really-means</a></p>\n</blockquote>\n<h3 id=\"%E9%98%B2%E6%AD%A2-undefined-%E7%9A%84%E5%80%BC%E8%A2%AB%E6%94%B9%E8%AE%8A\"><a class=\"direct-link\" href=\"#%E9%98%B2%E6%AD%A2-undefined-%E7%9A%84%E5%80%BC%E8%A2%AB%E6%94%B9%E8%AE%8A\">#</a> 防止 undefined 的值被改變</h3>\n<p>undefined 是一個 global variable，未設定的時候值是 undefined 。但 undefined 不是保留字，在沒有 strict mode 的情況下可以被 assign。所以下面的情形方式可以避免 undefined 變成奇怪的東西。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">undefined</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">window<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// undefined is a local undefined variable</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\"><a class=\"direct-link\" href=\"#%E5%8F%83%E8%80%83%E8%B3%87%E6%96%99\">#</a> 參考資料</h3>\n<ul>\n<li>\n<p><a href=\"http://adripofjavascript.com/blog/drips/an-introduction-to-iffes-immediately-invoked-function-expressions.html\">http://adripofjavascript.com/blog/drips/an-introduction-to-iffes-immediately-invoked-function-expressions.html</a></p>\n</li>\n<li>\n<p><a href=\"https://ultimatecourses.com/blog/what-function-window-document-undefined-iife-really-means\">https://ultimatecourses.com/blog/what-function-window-document-undefined-iife-really-means</a></p>\n</li>\n<li>\n<p><a href=\"https://mariusschulz.com/blog/use-cases-for-javascripts-iifes\">https://mariusschulz.com/blog/use-cases-for-javascripts-iifes</a></p>\n</li>\n<li>\n<p><a href=\"https://mariusschulz.com/blog/disassembling-javascripts-iife-syntax\">https://mariusschulz.com/blog/disassembling-javascripts-iife-syntax</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-08-25T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/mini-safe-method-idempotent-method/",
      "url": "https://lavi-blog.vercel.app/posts/mini-safe-method-idempotent-method/",
      "title": "[極短篇] HTTP 的 Safe method 還有 Idempotent method",
      "content_html": "<p>HTTP method 有很多種，method 有所謂的語意。白話來說，就是這個 method 有它本來被定義的時候應該要做的事情。</p>\n<p>符合語意是很重要的一件事情，Browser 等的開發上，會依照 spec 去實施，而，而像是 RESTful 的 API 風格也是以 HTTP method 本身的語意為基礎去延伸的。但語意歸語意，開發歸開發，實際開發上還是會出現像是拿 <code>GET</code> 來刪除東西像是：<code>post/delete?id=1</code> 這種東西（上古時期比較有可能會看到）。</p>\n<p>回到原本話題，HTTP method 在定義的時候就有提到哪些是 Safe method 或者是 Idempotent method。這些是什麼？\n<img src=\"https://static.coderbridge.com/img/Lauviah0622/1f6fdbc361fd4d8fb37d8060d157d081.png\" alt=\"可以看到 Safe 還有 Indempotent\"></p>\n<h2 id=\"safe-methods\"><a class=\"direct-link\" href=\"#safe-methods\">#</a> Safe Methods</h2>\n<p>Safe Methods 的<a href=\"https://www.rfc-editor.org/rfc/rfc7231.html#section-4.2.1\">定義</a>是：</p>\n<blockquote>\n<p>RFC 7231 4.2.1 Safe Methods\nRequest methods are considered &quot;safe&quot; if their defined semantics are\nessentially read-only. i.e., the client does not request, and does\nnot expect, any state change on the origin server as a result of\napplying a safe method to a target resource.</p>\n</blockquote>\n<p>很難看懂，我也覺得，<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP\">MDN</a>上面的好懂多了</p>\n<blockquote>\n<p>An HTTP method is safe if it doesn't alter the state of the server. In other words, a method is safe if it leads to a read-only operation</p>\n</blockquote>\n<p>簡單的說，Safe method 不應該造成 server 上任何的關於用戶的資料變動。也就是你不應該用 Safe method 去改你 server 上的資料。而這也代表著 Safe method 只提供讀取資料或讀取狀態行為（不改資料，換句話說就是只能讀取）。但這只限於和用戶有關的資料，如果是作 log 或者是紀錄有幾次是沒問題的，因為不影響到使用者。</p>\n<p>當然可能看過像是 <code>http://blog.com/post/delete?id=1</code> 利用 <code>GET</code> 的 reqeust 來刪除文章，你要這樣做也可以。但是  Safe method 因為特性的關係，browser 在設計上會有對應的行為，像是 cache （因為只讀取，所以 cache 起來也沒關係）。</p>\n<p>除此之外因為不改 server 上的資料，表示說要怎麼 request 都可以。所以瀏覽器也會做 pre-fetch，還有爬蟲也主要使用 safe method 來抓資料。如果你使用上面的方法就有可能因為被 cache 住了，request 也不會真正被發出去而刪除不到資料。</p>\n<p>總而言之，在設計 API 時 Safe method（對，就是說你 GET，出鏡率最高的 GET）。不要拿來修改用戶的資料，很可能會出現問題。</p>\n<h2 id=\"idempotent-methods\"><a class=\"direct-link\" href=\"#idempotent-methods\">#</a> Idempotent Methods</h2>\n<p>那另外一個名詞 Idempotent Methods 是什麼？</p>\n<p>看完 Safe Methods 後應該大概懂說這些標準的意義在哪裡。也就是：請你不要這麼做，但你真的這樣做我也不能怎麼辦（畢竟 server 是你寫的），不過在遇到 browser 上的一些機制可能會出問題。</p>\n<p>同樣的 Idempotent Methods 也是：<a href=\"https://www.rfc-editor.org/rfc/rfc7231.html#section-4.2.1\">定義</a> 是這樣寫的</p>\n<blockquote>\n<p>A request method is considered &quot;idempotent&quot; if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.  Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">MDN 白話版</a>（其實 RFC 這段相對寫得白話我覺得 XD）</p>\n<blockquote>\n<p>An HTTP method is idempotent if an identical request can be made once or several times in a row with the same effect while leaving the server in the same state</p>\n</blockquote>\n<p>Idempotent method 是指說不管 Request 幾次，結果都一樣。從這個定義來看，<code>DELETE</code>, <code>PUT</code> 還有 Safe methods 都是 Idempotent method。</p>\n<p>通常 <code>DELETE</code> 會帶上 id，所以刪除 1 次和刪除 100 次是一樣的，server 那邊找不到 id 操作就會被忽略。而 <code>PUT</code> 也一樣，<code>PUT</code> 代表替代的 http 操作，你發了 1 次 request 已經取代了內容後，那即使再發 100 次也只是替代一樣的內容。</p>\n<p>但是 <code>PATCH</code> 則不一定了， <code>PATCH</code> 在語意上代表著修改資料，換句話說可能這樣：</p>\n<pre><code>PATCH http://blog.com/post?id=1\n\nbody\n{\n    title: 'new title'\n}\n</code></pre>\n<p>request 代表著只更新 title, 這樣的 request 符合語意也 Idempotent。發了 100 次和 1 次標題都是同樣的 <code>new title</code>。但有另外一種可能</p>\n<pre><code>PATCH http:shop.com/item/add?id=1\n\nbody\n{\n    number: 10\n}\n</code></pre>\n<p>requst 代表的是增加 10 個 item 的數量。這種情況下也符合語意（修改資料），但就不符合 Idempotent 了，100 次會新增 1000 個。那 POST 就不用提，一次和 100 次肯定是不一樣的。</p>\n<p>雖然 Safe method, Idemptent method 好像冷知識的感覺，但也是了解 HTTP method 算重要的一環，了解後寫出來的 API 比較不會遇到被瀏覽器擋掉的奇怪 Bug。</p>\n<p>Big Guy Is John，感謝大家的收看。</p>\n<p>參考資料：</p>\n<ul>\n<li><a href=\"https://matthung0807.blogspot.com/2019/02/http-idempotent-methods.html\">HTTP 協議的Idempotent Methods</a> 寫的很好廢話不多</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP\">MDN Safe</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Idempotent\">MDN Idempotent</a></li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc7231.html#section-4.2.1\">RFC</a></li>\n</ul>\n",
      "date_published": "2020-06-06T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/mini-sql-injection/",
      "url": "https://lavi-blog.vercel.app/posts/mini-sql-injection/",
      "title": "[極短篇] 稍微看看 SQL injection 原理",
      "content_html": "<p>如果有人在 server 裡面用這麼樣的一段 code 去驗證登入正不正確\nex：</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">var</span> username <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">var</span> password <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">var</span> sql <span class=\"token operator\">=</span> <span class=\"token string backtick-quoted-string\">`SELECT * FROM users WHERE users.username = \"${username}\" AND password = \"${password}\"`</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SQLquery</span><span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">)</span><span class=\"token operator\">.</span>result<span class=\"token operator\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>基本上就是用這段 ：<code>SELECT * FROM users WHERE username = &quot;${username}&quot; AND password = &quot;${password}&quot;</code> ，然後填入 usernae 跟 password 之後做 SQL query，最後檢查說這個有沒有符合的 row 來驗證有沒有符合的使用者。一切的一切都很正常，直到有一天有個壞傢伙在帳號打了這個東西。</p>\n<pre><code>username : &quot;OR 1=1 #\npassword : whatever(實際上是什麼不重要)\n</code></pre>\n<p>打了這個之後我們來看看 query 的語法會變甚麼款</p>\n<pre><code>SELECT * FROM users WHERE username = &quot;&quot;OR 1=1 #&quot; AND password = &quot;whatever&quot;\n</code></pre>\n<p>在 SQL 裡面， <code>#</code> 後面的東西都會被註解，所以我們的 SQL 語法變成了這樣</p>\n<pre><code>SELECT * FROM users WHERE username = &quot;&quot;OR 1=1\n</code></pre>\n<p>上面這段語法可以幹嘛？<code>WHERE username = &quot;&quot; or 1 = 1</code>，<code>1 = 1</code> , <code>1 = 1</code> 一定會 return <code>true</code> 的，所以會直接抓到全部的資料。駭客：</p>\n<blockquote>\n<p>計画通り</p>\n</blockquote>\n<h3 id=\"%E6%89%80%E4%BB%A5-sql-injection-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\"><a class=\"direct-link\" href=\"#%E6%89%80%E4%BB%A5-sql-injection-%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F\">#</a> 所以 SQL injection 是什麼？</h3>\n<blockquote>\n<p>簡單來說， 就是透過駭客輸入非法的 input，讓你的 query SQL 語句產生設計以外的作用，來竊取資料的方法。</p>\n</blockquote>\n<h3 id=\"%E8%A6%81%E6%80%8E%E9%BA%BC%E9%98%B2%E7%AF%84\"><a class=\"direct-link\" href=\"#%E8%A6%81%E6%80%8E%E9%BA%BC%E9%98%B2%E7%AF%84\">#</a> 要怎麼防範</h3>\n<p>Parameterized statement 參數化查詢，原本這個方法是儲存語法以及需要搜索的路徑，來應對重複但不同關鍵字的的搜索，就不用重複的解析 SQL 語法以及重複搜尋路徑。因為搜尋的語句已經被固定了只會放入參數，所以剛好可以防範 SQL injection 攻擊，可喜可賀！</p>\n",
      "date_published": "2020-04-24T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/mini-database-acid/",
      "url": "https://lavi-blog.vercel.app/posts/mini-database-acid/",
      "title": "[極短篇] 資料庫的 ACID 是什麼？",
      "content_html": "<blockquote>\n<p>本文章擷取自 <a href=\"https://github.com/Lidemy/mentor-program-4th-Lauviah0622/blob/master/homeworks\">程式導師實驗計畫第四期作業</a>並做改寫</p>\n</blockquote>\n<p>操作資料庫裏面有一個很重要的東西叫做 transaction。簡單說，就是一連串必須要一起進行的操作，如果一個操錯失敗，所以已經執行的操作都必須取消。例如：</p>\n<blockquote>\n<p>A 匯錢給 B，必須要執行兩個步驟</p>\n<ol>\n<li>A.money -= 100</li>\n<li>B.money += 100</li>\n</ol>\n</blockquote>\n<p>如果 1. 沒有完成 2. 完成了，那麼整個銀行就會憑空多 100$。如果 1. 完成 2. 沒有完成，那麼整個銀行就會憑空少 100$。這麼嚴重的事情我們當然不能容忍（尤其是後者），所以再處理這種 transcation 的操作時我們必須要特別注意四點事項： ACID</p>\n<blockquote>\n<p>所以 ACID 就是在 database 上面處理 transaction 要注意的事項，大概就像洗手要濕搓沖捧擦這樣的口訣</p>\n</blockquote>\n<ul>\n<li>\n<p>Atomicity 原子性\ntransaction 裡面的操作要馬全部成功，要馬全部失敗。這點蠻理所當然的，就像剛剛的舉例，如果 1. 成功 2. 不成功就會憑空多錢</p>\n</li>\n<li>\n<p>Consistency 一致性\n不同的數據都會有一些基本的約束，而這些約束在交易前跟交易後都必須要遵守，如果沒辦法遵守交易就必須失敗，聽起來很抽象，舉剛剛的匯款的舉例，匯款有一些基本的限制：</p>\n<ol>\n<li>雙方的錢都不能小於 0</li>\n<li>雙方錢的總和不能改變</li>\n</ol>\n<p>上面兩個限制在交易前跟交易後都必須要遵守，這就是一致性。</p>\n</li>\n<li>\n<p>Isolation 隔離性\n多個 transaction 不會互相干擾，不能修改到同一個值，例如</p>\n<blockquote>\n<p>A 交易：小明 要匯給 小華 100：</p>\n<ol>\n<li>小明.money -= 100</li>\n<li>小華.money += 100\nB 交易：小明 要匯錢給 阿雅 100</li>\n<li>小明.money -= 100</li>\n<li>阿雅.money += 100\n想像一下，如果 A 交易跟 B 交易同時進行。</li>\n</ol>\n</blockquote>\n<ol>\n<li>執行 a.1 的操作，先看到小明有 500$</li>\n<li>b.1 也一起執行，也看到小明有 500$</li>\n<li>a.1 小明 -100$，然後幫小明標記為 400$</li>\n<li>b.1 也幫小明 -100$，也幫小明標記為 400$</li>\n</ol>\n<p>小明匯了兩筆錢，結果只扣到一筆的錢。所以 transation 在執行的時候必須要先把欄位鎖起來（不給操作），防止其他的操作也修改到同一個值。</p>\n</li>\n<li>\n<p>Durability 持久性\n這個最簡單了，在 transaction 成功之後。就算 server 當機、斷電，已經修改的數據也不會不見，應該要被寫入能夠永久儲存的裝置中，而不是暫存。</p>\n</li>\n</ul>\n<p>參考資料：\n<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1\">https://zh.wikipedia.org/wiki/数据库事务</a></p>\n",
      "date_published": "2020-04-24T00:00:00Z"
    },{
      "id": "https://lavi-blog.vercel.app/posts/what-is-api/",
      "url": "https://lavi-blog.vercel.app/posts/what-is-api/",
      "title": "從使用者的角度來看，什麼是 API ？",
      "content_html": "<p>自己覺得這篇比較像是自己對 Interface 的理解，可能有錯誤的地方，歡迎大家給予建議！！</p>\n<p>API 這個詞並沒有很複雜，只是這個詞的應用面真的太廣了。就像天龍這個詞有時候可能是形容詞，形容這個人可能觀念上很浮奢，可是有時候又在講名詞（台北某些地區），應用太廣泛（不是引戰阿，例子好難找）。</p>\n<p>簡單來說，自己對於 API 的理解就是：<strong>你照別人給的規定做事情，別人會執行對應的的操作</strong>。</p>\n<p>在 web API （也就是大部分前端工程師口中所稱的 API），通常是處理 server 端的資料，包含 CRUD： create 建立, read 讀取, Update 更新, Delete 刪除資料，這些處理資料的方式。</p>\n<p>API： Appication Programming Interface，應用程式介面，後面的 Interface 我覺得是精髓。</p>\n<p>那 Interface 是啥？中文叫做介面。在化工中有一個東西叫做介面活性劑，簡單說就是可以讓油跟水融合在一起的東西。</p>\n<p>油跟水本來是兩種沒辦法相容的液體，當你把油跟水倒在一起，他們之前會有明顯的分層，而我們就會叫那層東西叫做介面。而我們如果加入介面活性劑，就可以產生乳化作用，讓油和水混合在一起。</p>\n<figure tabindex=\"1\"><img src=\"https://i.imgur.com/nVlHd7X.jpg\" alt=\"\"></figure>\n<blockquote>\n<p>這樣看來，我們會把兩個不同的物體，它們之間的接觸、交互稱作為介面。</p>\n</blockquote>\n<blockquote>\n<p>不過其實介面活性劑的英文是 surface active agents，應該稱作表面活性劑才對，這裡只是借用中文的概念。</p>\n</blockquote>\n<p>那還有甚麼地方會有介面？ 其實講到介面這個詞我們最常想到的應該是手機吧。、</p>\n<p>手機上甚麼東西稱作為「介面」？我們最直覺想到的就是平常操作的螢幕，但並不只是這樣。我們常常會說這個界面不太好用，或者是聽到 Android 的用戶說 Iphone 的界面我用不習慣。那這些我們平常講「介面」到底是啥？</p>\n<blockquote>\n<p>人與手機他們之間交互的媒介，也就是我們平常在螢幕上的操作</p>\n</blockquote>\n<p>我們不可能甚麼都不做，甚麼都不表示，手機就知道我們要看影片、要拍照或者是要傳訊息。就算是聽起來很酷的<a href=\"https://zh.wikipedia.org/wiki/%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3\">腦機介面</a>，你也有要一個在腦中想的動作。</p>\n<p>那我們平常是怎麼操作手機的？很簡單，就是滑手機，不過其實滑手機這件事情我們可以拆解成很多的步驟來看。</p>\n<h3 id=\"1.-%E5%91%8A%E8%A8%B4%E4%BD%A0%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C\"><a class=\"direct-link\" href=\"#1.-%E5%91%8A%E8%A8%B4%E4%BD%A0%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C\">#</a> 1. 告訴你如何操作</h3>\n<p>手機大部分會用螢幕顯示資訊，來告訴你可以要如何操作。例如手機顯示的使用說明，這是比較淺白的利用文字來呈現；又或者是手機上面的 app 的圖示，雖然沒有告訴你這可以按，但是因為過去內化的經驗，又或者是與現實生活對應的設計，讓你知道說：「這個圖案按了就可以打開我要用的 App」。</p>\n<p>想像手機一片黑，你要怎麼知道點哪裡可以撥放 Spotify 的音樂？</p>\n<p>在這部分，我們可以看成手機向使用者傳遞資訊，傳遞的內容是「甚麼樣的操作，會得到甚麼樣的結果」，教學是我們比較常想到的。但但好的介面設計會設計的更加直覺或隱晦一點，所以在這邊稱作為「指示」我想會準確一點。</p>\n<p>雖然在手機上大部分都是利用螢幕來操作，但也不一定是螢幕（像是 siri），現在大家對於智慧型手機的操作都很熟悉了。而且智慧型手機基於人性化的操作，大部分的教學都會直接帶你操作或者是放在手機裡面。但是有時候當我們摸到新的手機、或者是跳到不同系統時，我們還是會看看說明書，這時候傳遞資訊的媒介就不是手機的螢幕，而是紙本的說明書。</p>\n<p>更有時候不以文字或圖形來傳達，當我們拿著手機看到按鈕，我們會很直覺的知道擺在一起的兩個按鈕，上面的就是調整音量變大、另一個按鈕就是變小。白白的螢幕上有著圓角矩形的小方框，我們就知道那可以點擊，如果是紅色，我們就會知道就會是比較危險的操作。這些我們都可以看成是「指示」。</p>\n<p>扯遠了，談到很多有點像是 UI/UX 的內容。簡單來說，第一個步驟手機會：</p>\n<blockquote>\n<p>告訴你可以做甚麼？要怎麼做</p>\n</blockquote>\n<h3 id=\"2.-%E6%93%8D%E4%BD%9C%E6%89%8B%E6%A9%9F\"><a class=\"direct-link\" href=\"#2.-%E6%93%8D%E4%BD%9C%E6%89%8B%E6%A9%9F\">#</a> 2. 操作手機</h3>\n<p>知道了怎麼操作之後，當然就是要操作手機嘛。</p>\n<p>使用者要操作手機，可能是利用觸控面板，或者是利用按鈕，有或者很酷的直接使用手勢操作（超想買 Pixel 的）。</p>\n<p>手機上面的操作有很多種，像是螢幕的點擊、長按、滑動，或者是按鈕的按壓，甚至是用聲音（siri, google assistant）。追根究柢這些都是一種操作，只是操作的媒介不一樣，但同樣都是操作手機來幫我們完成我們想做的事情。</p>\n<p>在這第二個步驟。不論媒介、方式，我們做的都是：</p>\n<blockquote>\n<p>操作我們的目標</p>\n</blockquote>\n<h3 id=\"3.-%E5%BE%97%E5%88%B0%E6%83%B3%E8%A6%81%E7%9A%84%E7%B5%90%E6%9E%9C\"><a class=\"direct-link\" href=\"#3.-%E5%BE%97%E5%88%B0%E6%83%B3%E8%A6%81%E7%9A%84%E7%B5%90%E6%9E%9C\">#</a> 3. 得到想要的結果</h3>\n<p>當你依照手機給的指示做出對應的動作，手機就必須有對應的行動。如果沒有做出對應的行動我們就會稱之為「當機」。<s>然後就會把手機拿來敲一敲</s></p>\n<p>對應的行動講起來很簡單，其實手機的 CPU 已經不知道執行了多少的程式，必須去解析你的操作，可能是手指停留的時間長度，或者是滑動位移的距離、方向。</p>\n<p>現在的觸控螢幕有很多不同的操控方式，單一隻手指可以做到空間（位置）還有時間（速度、停留的時間長短）的變化就很多，如果有多隻手指就有更多的組合了。</p>\n<p>手機在我們操作背後到底幹了啥不是我們需要理解的事情，那些交給硬體工程師還有 app 工程師去處理。最後一個階段，手機對於我們：</p>\n<blockquote>\n<p>做了我們想要做的事情</p>\n</blockquote>\n<p>簡單的小整理一下</p>\n<ol>\n<li>手機 =&gt; 我們：手機我們可以做些甚麼？如何操作</li>\n<li>我們 =&gt; 手機：我們對手機執行操作</li>\n<li>手機 =&gt; 我們：手機給予我們對應的結果</li>\n</ol>\n<p>當我們把「手機」換成「目標」，「我們」變成「使用者」這兩個比較抽象、廣泛的名詞，我們就可以知道所謂的「界面」到底能幹些啥。</p>\n<ol>\n<li>讓目標告訴使用者可以做些甚麼？如何操作</li>\n<li>讓使用者對目標執行操作</li>\n<li>讓目標能給予使用者對應的動作</li>\n</ol>\n<p>舉些其他例子，「手機的觸控螢幕」可以說是很複雜的界面，我們來講個簡單的：檯燈的開關。</p>\n<p>開關可以說是最為基礎的界面，就連手機的介面都是以開關為基礎設計的。</p>\n<p>開關這個的界面也只有「開」還有「關」這兩種狀態，我們可以藉由按下開關來操做，也對應到檯燈就只有「亮燈」和「關燈」兩種狀態（先以最基本的檯燈來看啦，不要調整亮度或者是色溫之類的）。</p>\n<p>開關的構造以及我們對於「燈」的認識告訴了我們開關應該<strong>如何操作</strong>，並會得到什麼樣的<strong>結果</strong>。而當我們按下開關，也就是<strong>操作</strong>「開關」這個「界面」，最後亮起燈，給予我們一開始<strong>想要做的結果</strong>－－開燈。</p>\n<p>好，剛剛講了那麼多，其實我們還只是在認識介面 Interface 這個概念而已，還沒講到 API 呢。不過當你了解了 Interface 這個概念之後，那我們在看看 API 這個詞。</p>\n<blockquote>\n<p>&quot;Appication Programming&quot; Interface</p>\n<p>「應用程式」介面</p>\n</blockquote>\n<p>就像硬體上的介面我們會稱為硬體介面（兩個不同的硬體互相交流的方式，例如 USB 接口是就是隨身碟與電腦之間聯絡的一種硬體介面），那使用者和程式之間的介面我們就會稱為使用者介面（User Interface），人類與機器就稱為人機介面，如果只用腦就可以操作而不使用其他控制方式就稱作腦機介面。</p>\n<p>API ，就只是在應用程式上的介面而已，就像這篇長文一開始講的。</p>\n<blockquote>\n<p><strong>你照別人給的規定做事情，別人會執行對應的的操作</strong></p>\n</blockquote>\n<p>那這樣的概念套用在 Appication Programming ，就是兩個不同的程式之間的控制方式，要處理兩程式間的控制當然就是我們工程師啦。那麼 Interface 這個概念在程式上會是甚麼樣的實現方式呢？</p>\n<h3 id=\"1.-%E8%AE%93%E7%9B%AE%E6%A8%99%E5%91%8A%E8%A8%B4%E4%BD%BF%E7%94%A8%E8%80%85%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E7%94%9A%E9%BA%BC%EF%BC%9F%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C\"><a class=\"direct-link\" href=\"#1.-%E8%AE%93%E7%9B%AE%E6%A8%99%E5%91%8A%E8%A8%B4%E4%BD%BF%E7%94%A8%E8%80%85%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BA%9B%E7%94%9A%E9%BA%BC%EF%BC%9F%E5%A6%82%E4%BD%95%E6%93%8D%E4%BD%9C\">#</a> 1. 讓目標告訴使用者可以做些甚麼？如何操作</h3>\n<p>我們通常會有一份 Document 可以看有那些東西可以用。</p>\n<h3 id=\"2.-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E5%B0%8D%E7%9B%AE%E6%A8%99%E5%9F%B7%E8%A1%8C%E6%93%8D%E4%BD%9C\"><a class=\"direct-link\" href=\"#2.-%E8%AE%93%E4%BD%BF%E7%94%A8%E8%80%85%E5%B0%8D%E7%9B%AE%E6%A8%99%E5%9F%B7%E8%A1%8C%E6%93%8D%E4%BD%9C\">#</a> 2. 讓使用者對目標執行操作</h3>\n<p>各種不同的領域有不同的操作方式。如果是軟體工程師可能就要使用 OS 提供的 API，前端就要使用 Web API。像是我們在 Coding 時使用的內建函式，或者是下載的 Package 中提供的 function 也是一種 API，所以我們才會看到有時候一些 Package 的 Docs 裡面會寫到 API 這個詞</p>\n<blockquote>\n<p>這個是 node.js 的 <a href=\"https://nodejs.org/en/docs/\">Document</a>，可以看到把他們的 docs 稱作 API Reference Documentation。<br>\n<img src=\"https://i.imgur.com/bLG3dTh.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"3.-%E8%AE%93%E7%9B%AE%E6%A8%99%E8%83%BD%E7%B5%A6%E4%BA%88%E4%BD%BF%E7%94%A8%E8%80%85%E5%B0%8D%E6%87%89%E7%9A%84%E5%8B%95%E4%BD%9C\"><a class=\"direct-link\" href=\"#3.-%E8%AE%93%E7%9B%AE%E6%A8%99%E8%83%BD%E7%B5%A6%E4%BA%88%E4%BD%BF%E7%94%A8%E8%80%85%E5%B0%8D%E6%87%89%E7%9A%84%E5%8B%95%E4%BD%9C\">#</a> 3. 讓目標能給予使用者對應的動作</h3>\n<p>也就是得到我們想要的資料，或者是執行我們要的操作。在 OS 可能是在記憶體中儲存或抹去資料。那在 Web API 可能就是從 Server 操作特定的內容。那如果是 Package 的話最直接的就是使用提供的函式。</p>\n<h2 id=\"%E7%B5%90%E8%AA%9E\"><a class=\"direct-link\" href=\"#%E7%B5%90%E8%AA%9E\">#</a> 結語</h2>\n<p>當我們站在使用者的角度，也就是從我們要使用某個程式的 API，其實概念也就這樣而已，一句話來說。</p>\n<blockquote>\n<p>照著開發者給的指示，讓我們去執行操作，讓程式做出對應的動作</p>\n</blockquote>\n<p>當我們在講要使用 node.js 的 API，我們基本上就是，照著 node.js 給的指示去寫 code，就能做我們要的操作，裡面的<a href=\"https://nodejs.org/docs/latest-v13.x/api/fs.html#fs_fs_open_path_flags_mode_callback\">文件</a>就告訴你 <code>fs.readfile(path[, flags[, mode]], callback)</code> 可以讀取檔案然後執行 callback 的操作，但只有 node.js 的環境上。</p>\n<p>要連 google map 的 API，就會是引入一段 script ，然後可以用 JS 做對應的操作。提到 restful API，就是那些利用 http method 搭配特定的 url 格式來執行對應操作的一個慣例（或者說方法）。</p>\n<p>老闆說要後端開發一套 API，指的就是開發一套操作方法，讓其他人可以透過這套 API，然後來使用公司的服務。</p>\n<p>從上面就可以看出，API 這個名詞使用的地方很廣泛，可能是語言，可能是環境，可能是服務。只要有應用程式的開發方與使用方，就會有 API 的存在。</p>\n<p>希望這篇可以不要讓 API 這個名詞這麼複雜。Big guy is John</p>\n",
      "date_published": "2020-04-23T00:00:00Z"
    }
  ]
}
